Package:  p0f
Version:  2.0.2
Revision: 2
DescPackaging: Rev 2 adds missing files: etc/p0f, ChangeLog and man page.
HomePage: http://lcamtuf.coredump.cx/p0f.shtml
#HomePage: http://www.mirrors.wiretapped.net/security/network-mapping/p0f/p0f.shtml
License: LGPL
#Source: mirror:custom:
#above line broken?
#CustomMirror: <<
# Primary: http://lcamtuf.coredump.cx/%n.tgz
# nam-us: http://www.mirrors.wiretapped.net/security/network-mapping/%n/%n-%v.tgz
#<<
Source: http://lcamtuf.coredump.cx/%n.tgz
Source-MD5: 40d54b9e72cd85a791d1ef633a804743
SourceRename: %n-%v.tgz
SourceDirectory: %n
#BuildDepends: libpcap (>= 0.4.0-1)
#Depends: libpcap-shlibs (>= 0.4.0-1)
#Above included with 10.2?
Recommends: daemonic
Conflicts: p0f-mysql
Replaces: p0f-mysql
Suggests: logrotate, logcheck
Maintainer: Carsten Klapp <carstenklapp@users.sourceforge.net>
Description: Passive OS fingerprinting of network packets
DescDetail: <<
 p0f performs a passive OS fingerprinting technique based on information
 coming from a remote host when it establishes connection to our system.
 Captured packets contain enough information to determine the OS--and unlike
 active scanners (nmap, queSO) p0f accomplishes this without sending anything
 to the connecting host.

 Read Lance Spitzner's white paper on passive OS fingerprinting:
   http://project.honeynet.org/papers/finger/

 P0f v2 is stable, but it's an early version after dumping the entire
 old database, so be polite ;-)

 How can I help?

 Easy. There are five things that need to be done - pick any: 

 1. Submit fingerprints. It's very easy - just visit the page
    http://lcamtuf.coredump.cx/p0f-help/ to automatically obtain a
    fingerprint of the system you're browsing from, and submit any
    corrections or additions. It takes perhaps 30 seconds.

 2. Download and test the beta code. Submit compilation reports from
    platforms other than the supported set (or submit problem reports
    from the supported ones). Send me suggestions and flames. Submit
    new fingerprints manually for the devices you have at home.

 3. Submit SYN|ACK signatures or take over the maintenance of this
    fingerprint database. There are no volunteers for this rather
    pleasurable task.

 4. Write some code. We need MySQL support for this version (or
    something similar) and perhaps some visualization / support tools.

 5. Talk to your vendor to upgrade and pick up the latest version of
    p0f. Mirror this page.

 Or, you can just send chocolate.  
<<
DescUsage: <<
 The p0f Log file can grow very quickly in a little as a day. For short-term
 use such as collecting data against a persistent intruder, you may not want
 to install the daemonic script and just start and stop it manually.

 Output is logged to a text file: %p/var/log/p0f.log. For long-term use
 consider rotating the logs daily or hourly with logrotate, depending on
 your network environment.

 Automatic Starting and Manual Stopping:
 sudo daemonic enable p0f (creates StartupItem in /Library/StartupItems)
 sudo /Library/StartupItems/daemonic-p0f/daemonic-p0f start

 To stop p0f, locate its PID with `ps axww | grep p0f` and kill it as superuser.
<<
PatchScript: sed 's|@PREFIX@|%p|g' < %a/%n-%v-%r.patch | patch -p1
CompileScript: <<
 make CFLAGS='-O3 -Wall -fomit-frame-pointer -funroll-loops -prebind'
<<
#"
InstallScript: <<
 mkdir -p %i/sbin %i/etc/%n %i/share/man/man1
 install -m 755 %N %Nrep %i/sbin
 install -m 644 %n.fp %na.fp %nr.fp %i/etc/%n
 install -m 644 %n.1 %i/share/man/man1
<<
ConfFiles: %p/etc/%n/%n.fp
DocFiles: doc/ChangeLog doc/COPYING doc/CREDITS doc/KNOWN_BUGS doc/README doc/TODO
DaemonicFile: <<
<service>
 <description>Passive network OS fingerprinting</description>
 <message>p0f</message>

 <daemon name="p0f">
  <executable>%p/sbin/%n</executable>
  <parameters>-d -o %p/var/log/%N.log</parameters>
  <configfile>%p/etc/%n/%n.fp</configfile>
  <pidfile>%p/var/run/%n.pid</pidfile>
 </daemon>

</service>
<<
PostInstScript: <<
# update init script if necessary
daemonic update %n
<<
PreRmScript: <<
# clean up
if [ $1 != "upgrade" ]; then
  daemonic remove %n
fi
<<
