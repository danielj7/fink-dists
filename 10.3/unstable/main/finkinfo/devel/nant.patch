diff -uNr nant-0.85-rc3/src/NAnt.DotNet/Tasks/AssemblyInfoTask.cs nant-0.85-rc3-new/src/NAnt.DotNet/Tasks/AssemblyInfoTask.cs
--- nant-0.85-rc3/src/NAnt.DotNet/Tasks/AssemblyInfoTask.cs	2005-04-16 07:55:12.000000000 -0400
+++ nant-0.85-rc3-new/src/NAnt.DotNet/Tasks/AssemblyInfoTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -321,9 +321,8 @@
         internal class CodeProvider {
             #region Private Instance Fields
 
-            private CodeLanguage _language;
+            private readonly CodeLanguage _language;
             private readonly ICodeGenerator _generator;
-            private readonly AssemblyInfoTask _assemblyInfoTask;
 
             #endregion Private Instance Fields
 
@@ -353,7 +352,6 @@
 
                 _generator = provider.CreateGenerator();
                 _language = codeLanguage;
-                _assemblyInfoTask = assemblyInfoTask;
             }
 
             #endregion Public Instance Constructors
diff -uNr nant-0.85-rc3/src/NAnt.DotNet/Tasks/ScriptTask.cs nant-0.85-rc3-new/src/NAnt.DotNet/Tasks/ScriptTask.cs
--- nant-0.85-rc3/src/NAnt.DotNet/Tasks/ScriptTask.cs	2005-04-16 07:55:12.000000000 -0400
+++ nant-0.85-rc3-new/src/NAnt.DotNet/Tasks/ScriptTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -411,14 +411,12 @@
 
         private CompilerInfo CreateCompilerInfo(string language) {
             CodeDomProvider provider = null;
-            LanguageId languageId;
 
             try {
                 switch (language) {
                     case "vb":
                     case "VB":
                     case "VISUALBASIC":
-                        languageId = LanguageId.VisualBasic;
                         provider = CreateCodeDomProvider(
                             "Microsoft.VisualBasic.VBCodeProvider",
                             "System, Culture=neutral");
@@ -426,7 +424,6 @@
                     case "c#":
                     case "C#":
                     case "CSHARP":
-                        languageId = LanguageId.CSharp;
                         provider = CreateCodeDomProvider(
                             "Microsoft.CSharp.CSharpCodeProvider",
                             "System, Culture=neutral");
@@ -434,7 +431,6 @@
                     case "js":
                     case "JS":
                     case "JSCRIPT":
-                        languageId = LanguageId.JScript;
                         provider = CreateCodeDomProvider(
                             "Microsoft.JScript.JScriptCodeProvider",
                             "Microsoft.JScript, Culture=neutral");
@@ -442,7 +438,6 @@
                     case "vjs":
                     case "VJS":
                     case "JSHARP":
-                        languageId = LanguageId.JSharp;
                         provider = CreateCodeDomProvider(
                             "Microsoft.VJSharp.VJSharpCodeProvider",
                             "VJSharpCodeProvider, Culture=neutral");
@@ -450,12 +445,11 @@
                     default:
                         // if its not one of the above then it must be a fully 
                         // qualified provider class name
-                        languageId = LanguageId.Other;
                         provider = CreateCodeDomProvider(language);
                         break;
                 }
 
-                return new CompilerInfo(languageId, provider);
+                return new CompilerInfo(provider);
             } catch (Exception ex) {
                 throw new BuildException(string.Format(CultureInfo.InvariantCulture,
                     ResourceUtils.GetString("NA2036"), language), Location, ex);
@@ -493,27 +487,15 @@
 
         #endregion Private Static Methods
 
-        internal enum LanguageId : int {
-            CSharp      = 1,
-            VisualBasic = 2,
-            JScript     = 3,
-            JSharp      = 4,
-            Other       = 5
-        }
-
         internal class CompilerInfo {
-            private LanguageId _lang;
             public readonly ICodeCompiler Compiler;
             public readonly ICodeGenerator CodeGen;
 
-            public CompilerInfo(LanguageId languageId, CodeDomProvider provider) {
-                _lang = languageId;
-
+            public CompilerInfo(CodeDomProvider provider) {
                 Compiler = provider.CreateCompiler();
                 CodeGen = provider.CreateGenerator();
             }
 
-
             public CodeCompileUnit GenerateCode(string typeName, string codeBody,
                                        StringCollection imports,
                                        string prefix) {
@@ -561,7 +543,6 @@
                 compileUnit.Namespaces.Add( nspace );
                 nspace.Types.Add(typeDecl);
     
-                
                 return compileUnit;
             }
         }
diff -uNr nant-0.85-rc3/src/NAnt.NUnit/NUnit1/XmlResultFormatter.cs nant-0.85-rc3-new/src/NAnt.NUnit/NUnit1/XmlResultFormatter.cs
--- nant-0.85-rc3/src/NAnt.NUnit/NUnit1/XmlResultFormatter.cs	2004-12-23 22:54:08.000000000 -0500
+++ nant-0.85-rc3-new/src/NAnt.NUnit/NUnit1/XmlResultFormatter.cs	2005-08-15 16:37:50.000000000 -0400
@@ -172,13 +172,11 @@
 
         #region Private Static Fields
 
-        const string ElementTestSuites = "testsuites";
         const string ElementTestSuite = "testsuite";
         const string ElementTestCase = "testcase";
         const string ElementError = "error";
         const string ElementFailure = "failure";
 
-        const string AttributePackage = "package";
         const string AttributeName = "name";
         const string AttributeTime = "time";
         const string AttributeErrors = "errors";
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/ChangeLogTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/ChangeLogTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/ChangeLogTask.cs	2004-11-10 02:33:44.000000000 -0500
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/ChangeLogTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -54,39 +54,18 @@
     /// </example>
     [TaskName("cvs-changelog")]
     public class ChangeLogTask : AbstractCvsTask {
-        #region Public Constants
+        #region Private Static Fields
 
         /// <summary>
         /// The command being executed.
         /// </summary>
-        public const string CvsCommandName = "xml";
-
-        #endregion Public Constants
-
-        #region Private Static Fields
-
-        private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+        private const string CvsCommandName = "xml";
 
         #endregion Private Static Fields
 
         #region Public Instance Properties
 
         /// <summary>
-        /// The cvs command to execute.
-        /// </summary>
-        public override string CommandName {
-            get {return CvsCommandName;}
-        }
-
-        /// <summary>
-        /// Override use of sharpcvslib, needs to be true.
-        /// </summary>
-        public override bool UseSharpCvsLib {
-            get {return true;}
-            set {/* can only use sharpcvslib for changelog */}
-        }
-
-        /// <summary>
         /// Name of the xml file that will contain the cvs log information.
         /// </summary>
         [TaskAttribute("xmlfile", Required=true)]
@@ -113,8 +92,9 @@
         [TaskAttribute("start", Required=true)]
         [DateTimeValidator()]
         public DateTime StartDate {
-            get {return Convert.ToDateTime(((Option)CommandOptions["start"]).Value);}
-            set {SetCommandOption("start", string.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["start"]).Value); }
+            set { SetCommandOption("start", string.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true); }
+
         }
 
         /// <summary>
@@ -123,8 +103,27 @@
         [TaskAttribute("end", Required=true)]
         [DateTimeValidator()]
         public DateTime EndDate {
-            get {return Convert.ToDateTime(((Option)CommandOptions["end"]).Value);}
-            set {SetCommandOption("end", string.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["end"]).Value); }
+            set { SetCommandOption("end", string.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true); }
+        }
+
+        #endregion Public Instance Properties
+
+        #region Override implementation of AbstractCvsTask
+
+        /// <summary>
+        /// The cvs command to execute.
+        /// </summary>
+        public override string CommandName {
+            get { return CvsCommandName; }
+        }
+
+        /// <summary>
+        /// Override use of sharpcvslib, needs to be true.
+        /// </summary>
+        public override bool UseSharpCvsLib {
+            get { return true; }
+            set { /* can only use sharpcvslib for changelog */ }
         }
 
         /// <summary>
@@ -168,11 +167,9 @@
                 }
                 return base.Root;
             }
-            set {
-                base.Root = value;
-            }
+            set { base.Root = value; }
         }
 
-        #endregion Public Instance Properties
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/CheckoutTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/CheckoutTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/CheckoutTask.cs	2005-01-06 23:11:50.000000000 -0500
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/CheckoutTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -77,13 +77,14 @@
     /// </example>
     [TaskName("cvs-checkout")]
     public class CheckoutTask : AbstractCvsTask {
-        #region Public Constants
+        #region Internal Static Fields
+
         /// <summary>
         /// The command being executed.
         /// </summary>
-        public const string CvsCommandName = "checkout";
+        internal const string CvsCommandName = "checkout";
 
-        #endregion
+        #endregion Internal Static Fields
 
         #region Public Instance Constructors
 
@@ -98,21 +99,14 @@
         #region Public Instance Properties
 
         /// <summary>
-        /// The name of the cvs command that is going to be executed.
-        /// </summary>
-        public override string CommandName {
-            get {return CvsCommandName;}
-        }
-
-        /// <summary>
         /// Specify the revision to checkout.  This corresponds to the "sticky-tag"
         /// of the file.
         /// </summary>
         [TaskAttribute("revision", Required=false)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string Revision {
-            get {return ((Option)CommandOptions["revision"]).Value;}
-             set {SetCommandOption("revision", String.Format(CultureInfo.InvariantCulture, "-r {0}", value), true);}
+            get { return ((Option)CommandOptions["revision"]).Value; }
+            set { SetCommandOption("revision", String.Format(CultureInfo.InvariantCulture, "-r {0}", value), true); }
         }
 
         /// <summary>
@@ -120,8 +114,8 @@
         /// </summary>
         [TaskAttribute("sticky-tag", Required=false)]
         public string StickyTag {
-            get {return Revision;}
-            set {Revision = value;}
+            get { return Revision; }
+            set { Revision = value; }
         }
 
         /// <summary>
@@ -132,8 +126,8 @@
         [TaskAttribute("date", Required=false)]
         [DateTimeValidator()]
         public DateTime Date {
-            get {return Convert.ToDateTime(((Option)CommandOptions["date"]).Value);}
-            set {SetCommandOption("date", String.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["date"]).Value); }
+            set { SetCommandOption("date", String.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true); }
         }
 
         /// <summary>
@@ -143,8 +137,8 @@
         [TaskAttribute("overridedir", Required=false)]
         [StringValidator(AllowEmpty=false)]
         public string OverrideDir {
-            get {return ((Option)CommandOptions["overridedir"]).Value;}
-            set {SetCommandOption("overridedir", String.Format(CultureInfo.InvariantCulture,"-d{0}", value), true);}
+            get { return ((Option)CommandOptions["overridedir"]).Value; }
+            set { SetCommandOption("overridedir", String.Format(CultureInfo.InvariantCulture,"-d{0}", value), true); }
         }
 
         /// <summary>
@@ -153,10 +147,21 @@
         /// </summary>
         [TaskAttribute("override-directory", Required=false)]
         public string OverrideDirectory {
-            get {return OverrideDir;}
-            set {OverrideDir = value;}
+            get { return OverrideDir; }
+            set { OverrideDir = value; }
         }
 
         #endregion
+
+        #region Override implementation of AbstractCvsTask
+
+        /// <summary>
+        /// The name of the cvs command that is going to be executed.
+        /// </summary>
+        public override string CommandName {
+            get { return CvsCommandName; }
+        }
+
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/CvsTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/CvsTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/CvsTask.cs	2005-02-13 14:29:26.000000000 -0500
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/CvsTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -17,18 +17,7 @@
 //
 // Clayton Harbour (claytonharbour@sporadicism.com)
 
-using System;
-using System.Text;
-using System.IO;
-using System.Diagnostics;
-
-using NAnt.Core;
 using NAnt.Core.Attributes;
-using NAnt.Core.Tasks;
-using NAnt.Core.Types;
-using NAnt.Core.Util;
-
-using ICSharpCode.SharpCvsLib.Commands;
 
 namespace NAnt.SourceControl.Tasks {
     /// <summary>
@@ -48,22 +37,21 @@
     /// </example>
     [TaskName("cvs")]
     public class CvsTask : AbstractCvsTask {
-
         #region Private Instance Fields
-        private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
 
         private string _commandName;
-        #endregion
 
-        #region Public Instance Properties
+        #endregion Private Instance Fields
+
+        #region Override implementation of AbstractCvsTask
 
         /// <summary>
         /// The cvs command to execute.
         /// </summary>
         [TaskAttribute("command", Required=true)]
         public override string CommandName {
-            get {return _commandName;}
-            set {_commandName = value;}
+            get { return _commandName; }
+            set { _commandName = value; }
         }
 
         /// <summary>
@@ -93,6 +81,6 @@
             }
         }
 
-        #endregion
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/ExportTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/ExportTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/ExportTask.cs	2004-12-30 14:45:54.000000000 -0500
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/ExportTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -74,22 +74,14 @@
     /// </example>
     [TaskName("cvs-export")]
     public class ExportTask : AbstractCvsTask {
-        #region Private Instance Fields
-
-        private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
-
-        private ArgumentCollection _exportFiles = new ArgumentCollection();
-
-        #endregion
-
-        #region Public Constants
+        #region Private Static Fields
 
         /// <summary>
         /// The command being executed.
         /// </summary>
-        public const string CvsCommandName = "export";
+        private const string CvsCommandName = "export";
 
-        #endregion
+        #endregion Private Static Fields
 
         #region Public Instance Constructors
 
@@ -105,25 +97,18 @@
         public ExportTask() {
             Recursive = true;
         }
-        #endregion
+        #endregion Public Instance Constructors
 
         #region Public Instance Properties
 
         /// <summary>
-        /// The export command name for the cvs client.
-        /// </summary>
-        public override string CommandName {
-            get {return CvsCommandName;}
-        }
-
-        /// <summary>
         /// No shortening.  Do not shorten module paths if -d specified.
         /// </summary>
         [TaskAttribute("no-shortening", Required=false)]
         [BooleanValidator()]
         public bool NoShortening {
-            get {return ((Option)CommandOptions["no-shortening"]).IfDefined;}
-            set {SetCommandOption("no-shortening", "-N", value);}
+            get { return ((Option)CommandOptions["no-shortening"]).IfDefined; }
+            set { SetCommandOption("no-shortening", "-N", value); }
         }
 
         /// <summary>
@@ -138,8 +123,8 @@
         [TaskAttribute("force-head", Required=false)]
         [BooleanValidator()]
         public bool ForceHead {
-            get {return ((Option)CommandOptions["force-head"]).IfDefined;}
-            set {SetCommandOption("force-head", "-f", value);}
+            get { return ((Option)CommandOptions["force-head"]).IfDefined; }
+            set { SetCommandOption("force-head", "-f", value); }
         }
 
         /// <summary>
@@ -153,7 +138,7 @@
         [TaskAttribute("recursive", Required=false)]
         [BooleanValidator()]
         public bool Recursive {
-            get {return ((Option)CommandOptions["recursive"]).IfDefined;}
+            get { return ((Option)CommandOptions["recursive"]).IfDefined; }
             set {
                 SetCommandOption("recursive", "-R", value);
                 SetCommandOption("local-only", "-l", !value);
@@ -172,7 +157,7 @@
                     return null;
                 }
                 return ((Option)CommandOptions["revision"]).Value;}
-            set {SetCommandOption("revision", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true);}
+            set { SetCommandOption("revision", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true); }
         }
 
         /// <summary>
@@ -186,12 +171,8 @@
         [TaskAttribute("date", Required=false)]
         [DateTimeValidator()]
         public DateTime Date {
-            get {return Convert.ToDateTime(((Option)CommandOptions["date"]).Value);}
-            set {SetCommandOption("date", String.Format(CultureInfo.InvariantCulture,"\"-D {0}\"", DateParser.GetCvsDateString(value)), true);}
-        }
-
-        private bool HasDate {
-            get {return !(null == CommandOptions["date"]);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["date"]).Value); }
+            set { SetCommandOption("date", String.Format(CultureInfo.InvariantCulture,"\"-D {0}\"", DateParser.GetCvsDateString(value)), true); }
         }
 
         /// <summary>
@@ -201,10 +182,21 @@
         [TaskAttribute("overridedir", Required=false)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string OverrideDir {
-            get {return ((Option)CommandOptions["overridedir"]).Value;}
-            set {SetCommandOption("overridedir", String.Format(CultureInfo.InvariantCulture,"-d{0}", value), true);}
+            get { return ((Option)CommandOptions["overridedir"]).Value; }
+            set { SetCommandOption("overridedir", String.Format(CultureInfo.InvariantCulture,"-d{0}", value), true); }
+        }
+
+        #endregion Public Instance Properties
+
+        #region Override implementation of AbstractCvsTask
+
+        /// <summary>
+        /// The export command name for the cvs client.
+        /// </summary>
+        public override string CommandName {
+            get { return CvsCommandName; }
         }
 
-        #endregion
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/RTagTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/RTagTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/RTagTask.cs	2005-04-13 16:16:50.000000000 -0400
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/RTagTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -74,22 +74,29 @@
     /// </example>
     [TaskName("cvs-rtag")]
     public class RTagTask : AbstractCvsTask {
-        private const string CvsCommandName = "rtag";
+        #region Private Instance Fields
+
         private string _tag;
-        /// <summary>
-        /// The name of the cvs command that is going to be executed.
-        /// </summary>
-        public override string CommandName {
-            get {return CvsCommandName;}
-        }
 
+        #endregion Private Instance Fields
 
         #region Private Static Fields
 
-        private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+        private const string CvsCommandName = "rtag";
 
         #endregion Private Static Fields
 
+        #region Public Instance Constructors
+
+        /// <summary>
+        /// Initializes a new instance of the <see cref="RTagTask" /> 
+        /// class.
+        /// </summary>
+        public RTagTask() {
+        }
+
+        #endregion Public Instance Constructors
+
         #region Public Instance Properties
 
         /// <summary>
@@ -101,8 +108,8 @@
         [TaskAttribute("tag", Required=true)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string Tag {
-            get {return this._tag;}
-            set {this._tag = value;}
+            get { return this._tag; }
+            set { this._tag = value; }
         }
 
         /// <summary>
@@ -116,8 +123,8 @@
         [TaskAttribute("remove", Required=false)]
         [BooleanValidator()]
         public bool Remove {
-            get {return ((Option)CommandOptions["remove"]).IfDefined;}
-            set {SetCommandOption("remove", "-d", value);}
+            get { return ((Option)CommandOptions["remove"]).IfDefined; }
+            set { SetCommandOption("remove", "-d", value); }
         }
 
         /// <summary>
@@ -132,8 +139,8 @@
         [TaskAttribute("move-if-exists", Required=false)]
         [BooleanValidator()]
         public bool MoveIfExists {
-            get {return ((Option)CommandOptions["move-if-exists"]).IfDefined;}
-            set {SetCommandOption("move-if-exists", "-F", value);}
+            get { return ((Option)CommandOptions["move-if-exists"]).IfDefined; }
+            set { SetCommandOption("move-if-exists", "-F", value); }
         }
 
         /// <summary>
@@ -147,7 +154,7 @@
         [TaskAttribute("recursive", Required=false)]
         [BooleanValidator()]
         public bool Recursive {
-            get {return ((Option)CommandOptions["recursive"]).IfDefined;}
+            get { return ((Option)CommandOptions["recursive"]).IfDefined; }
             set {
                 SetCommandOption("recursive", "-R", value);
                 SetCommandOption("local-only", "-l", !value);
@@ -166,8 +173,8 @@
         [TaskAttribute("act-on-tag", Required=false)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string ActOnTag {
-            get {return ((Option)CommandOptions["act-on-tag"]).Value;}
-            set {SetCommandOption("act-on-tag", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true);}
+            get { return ((Option)CommandOptions["act-on-tag"]).Value; }
+            set { SetCommandOption("act-on-tag", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true); }
         }
 
         /// <summary>
@@ -181,8 +188,8 @@
         [TaskAttribute("act-on-date", Required=false)]
         [DateTimeValidator()]
         public DateTime ActOnDate {
-            get {return Convert.ToDateTime(((Option)CommandOptions["act-on-date"]).Value);}
-            set {SetCommandOption("act-on-date", String.Format(CultureInfo.InvariantCulture,"-D {0}", DateParser.GetCvsDateString(value)), true);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["act-on-date"]).Value); }
+            set { SetCommandOption("act-on-date", String.Format(CultureInfo.InvariantCulture,"-D {0}", DateParser.GetCvsDateString(value)), true); }
         }
 
         /// <summary>
@@ -197,24 +204,21 @@
         [TaskAttribute("force-head", Required=false)]
         [BooleanValidator()]
         public bool ForceHead {
-            get {return ((Option)CommandOptions["force-head"]).IfDefined;}
-            set {SetCommandOption("force-head", "-f", value);}
+            get { return ((Option)CommandOptions["force-head"]).IfDefined; }
+            set { SetCommandOption("force-head", "-f", value); }
         }
 
         #endregion Public Instance Properties
 
-        #region Public Instance Constructors
+        #region Override implementation of AbstractCvsTask
 
         /// <summary>
-        /// Initializes a new instance of the <see cref="RTagTask" /> 
-        /// class.
+        /// The name of the cvs command that is going to be executed.
         /// </summary>
-        public RTagTask() {
+        public override string CommandName {
+            get {return CvsCommandName;}
         }
 
-        #endregion Public Instance Constructors
-
-        #region Protected Instance Methods
         /// <summary>
         /// Append the tag information to the commandline.
         /// </summary>
@@ -224,6 +228,7 @@
                 this.AddArg(this.Tag);
             }
         }
-        #endregion Protected Instance Methods
+
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/TagTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/TagTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/TagTask.cs	2005-04-13 16:16:52.000000000 -0400
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/TagTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -71,36 +71,33 @@
     /// </example>
     [TaskName("cvs-tag")]
     public class TagTask : AbstractCvsTask {
-        /// <summary>
-        /// Cvs command to be executed.
-        /// </summary>
-        public const string CvsCommandName = "tag";
+        #region Private Instance Fields
 
         private string _tag;
-        /// <summary>
-        /// The name of the cvs command that is going to be executed.
-        /// </summary>
-        public override string CommandName {
-            get {return CvsCommandName;}
-        }
 
+        #endregion Private Instance Fields
 
-        #region Private Static Fields
+        #region Internal Static Fields
 
-        private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+        /// <summary>
+        /// Cvs command to be executed.
+        /// </summary>
+        internal const string CvsCommandName = "tag";
 
-        #endregion Private Static Fields
+        #endregion Internal Static Fields
 
-        #region Public Instance Properties
+        #region Public Instance Constructors
 
         /// <summary>
-        /// Not used
+        /// Initializes a new instance of the <see cref="TagTask" /> 
+        /// class.
         /// </summary>
-        public override string Module {
-            get { return null; }
-            set { /* module not used for cvs-tag */ }
+        public TagTask() {
         }
 
+        #endregion Public Instance Constructors
+
+        #region Public Instance Properties
 
         /// <summary>
         /// The name of the tag to assign or remove.
@@ -111,8 +108,8 @@
         [TaskAttribute("tag", Required=true)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string Tag {
-            get {return this._tag;}
-            set {this._tag = value;}
+            get { return this._tag; }
+            set { this._tag = value; }
         }
 
         /// <summary>
@@ -126,8 +123,8 @@
         [TaskAttribute("remove", Required=false)]
         [BooleanValidator()]
         public bool Remove {
-            get {return ((Option)CommandOptions["remove"]).IfDefined;}
-            set {SetCommandOption("remove", "-d", value);}
+            get { return ((Option)CommandOptions["remove"]).IfDefined; }
+            set { SetCommandOption("remove", "-d", value); }
         }
 
         /// <summary>
@@ -142,8 +139,8 @@
         [TaskAttribute("move-if-exists", Required=false)]
         [BooleanValidator()]
         public bool MoveIfExists {
-            get {return ((Option)CommandOptions["move-if-exists"]).IfDefined;}
-            set {SetCommandOption("move-if-exists", "-F", value);}
+            get { return ((Option)CommandOptions["move-if-exists"]).IfDefined; }
+            set { SetCommandOption("move-if-exists", "-F", value); }
         }
 
         /// <summary>
@@ -157,7 +154,7 @@
         [TaskAttribute("recursive", Required=false)]
         [BooleanValidator()]
         public bool Recursive {
-            get {return ((Option)CommandOptions["recursive"]).IfDefined;}
+            get { return ((Option)CommandOptions["recursive"]).IfDefined; }
             set {
                 SetCommandOption("recursive", "-R", value);
                 SetCommandOption("local-only", "-l", !value);
@@ -176,8 +173,8 @@
         [TaskAttribute("act-on-tag", Required=false)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string ActOnTag {
-            get {return ((Option)CommandOptions["act-on-tag"]).Value;}
-            set {SetCommandOption("act-on-tag", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true);}
+            get { return ((Option)CommandOptions["act-on-tag"]).Value; }
+            set { SetCommandOption("act-on-tag", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true); }
         }
 
         /// <summary>
@@ -191,8 +188,8 @@
         [TaskAttribute("act-on-date", Required=false)]
         [DateTimeValidator()]
         public DateTime ActOnDate {
-            get {return Convert.ToDateTime(((Option)CommandOptions["act-on-date"]).Value);}
-            set {SetCommandOption("act-on-date", String.Format(CultureInfo.InvariantCulture,"-D {0}", DateParser.GetCvsDateString(value)), true);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["act-on-date"]).Value); }
+            set { SetCommandOption("act-on-date", String.Format(CultureInfo.InvariantCulture,"-D {0}", DateParser.GetCvsDateString(value)), true); }
         }
 
         /// <summary>
@@ -207,8 +204,8 @@
         [TaskAttribute("force-head", Required=false)]
         [BooleanValidator()]
         public bool ForceHead {
-            get {return ((Option)CommandOptions["force-head"]).IfDefined;}
-            set {SetCommandOption("force-head", "-f", value);}
+            get { return ((Option)CommandOptions["force-head"]).IfDefined; }
+            set { SetCommandOption("force-head", "-f", value); }
         }
 
         /// <summary>
@@ -223,24 +220,29 @@
         [TaskAttribute("fail-if-modified", Required=false)]
         [BooleanValidator()]
         public bool FailIfModified {
-            get {return ((Option)CommandOptions["fail-if-modified"]).IfDefined;}
-            set {SetCommandOption("fail-if-modified", "-c", value);}
+            get { return ((Option)CommandOptions["fail-if-modified"]).IfDefined; }
+            set { SetCommandOption("fail-if-modified", "-c", value); }
         }
 
         #endregion Public Instance Properties
 
-        #region Public Instance Constructors
+        #region Override implementation of AbstractCvsTask
 
         /// <summary>
-        /// Initializes a new instance of the <see cref="TagTask" /> 
-        /// class.
+        /// The name of the cvs command that is going to be executed.
         /// </summary>
-        public TagTask() {
+        public override string CommandName {
+            get { return CvsCommandName; }
         }
 
-        #endregion Public Instance Constructors
+        /// <summary>
+        /// Not used
+        /// </summary>
+        public override string Module {
+            get { return null; }
+            set { /* module not used for cvs-tag */ }
+        }
 
-        #region Protected Instance Methods
         /// <summary>
         /// Append the tag information to the commandline.
         /// </summary>
@@ -260,7 +262,6 @@
             get { return false; }
         }
 
-        #endregion Protected Instance Methods
-
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/src/NAnt.SourceControl/Tasks/UpdateTask.cs nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/UpdateTask.cs
--- nant-0.85-rc3/src/NAnt.SourceControl/Tasks/UpdateTask.cs	2004-07-21 07:51:46.000000000 -0400
+++ nant-0.85-rc3-new/src/NAnt.SourceControl/Tasks/UpdateTask.cs	2005-08-15 16:37:50.000000000 -0400
@@ -67,49 +67,52 @@
     /// </example>
     [TaskName("cvs-update")]
     public class UpdateTask : AbstractCvsTask {
-        #region Protected Constant Properties
+        #region Internal Static Fields
+
+        /// <summary>
+        /// The command being executed.
+        /// </summary>
+        internal const string CvsCommandName = "update";
+
+        #endregion Internal Static Fields
+
+        #region Protected Static Fields
+
         /// <summary>
         /// Default value for the overwrite local directive.
         /// </summary>
         protected const bool DefaultOverwriteLocal = false;
+
         /// <summary>
         /// Default value for build directory directive.
         /// </summary>
         protected const bool DefaultBuildDirs = true;
+
         /// <summary>
         /// Default value for prune empty directories directive.
         /// </summary>
         protected const bool DefaultPruneEmpty = true;
-        #endregion
 
-        #region "Protected Instance Properties"
-        /// <summary>
-        /// Specify if the module is needed for this cvs command.  It is
-        /// only needed if there is no module information on the local file
-        /// system.
-        /// </summary>
-        protected override bool IsModuleNeeded {
-            get {return false;}
-        }
+        #endregion Protected Static Fields
+
+        #region Public Instance Constructors
 
         /// <summary>
-        /// Specify if the cvs root should be used for this cvs command.  It is
-        /// only needed if there is no module information on the local file
-        /// system, there fore is not needed for a cvs update.
+        /// Initializes a new instance of the <see cref="UpdateTask" /> 
+        /// class.
         /// </summary>
-        protected override bool IsCvsRootNeeded {
-            get {return false;}
+        /// <remarks>
+        /// Sets the build directory and prune empty directory properties to
+        /// <see langword="true" />.
+        /// </remarks>
+        public UpdateTask() {
+            BuildDirs = true;
+            PruneEmpty = true;
         }
-        #endregion "Protected Instance Properties"
 
-        #region Public Instance Properties
+        #endregion Public Instance Constructors
 
-        /// <summary>
-        /// The name of the cvs command that is going to be executed.
-        /// </summary>
-        public override string CommandName {
-            get {return CvsCommandName;}
-        }
+        #region Public Instance Properties
 
         /// <summary>
         /// If <see langword="true" />. new directories will be created on the local
@@ -118,8 +121,8 @@
         [TaskAttribute("builddirs", Required=false)]
         [BooleanValidator()]
         public bool BuildDirs {
-            get {return ((Option)CommandOptions["builddirs"]).IfDefined;}
-            set {SetCommandOption("builddirs", "-d", value);}
+            get { return ((Option)CommandOptions["builddirs"]).IfDefined; }
+            set { SetCommandOption("builddirs", "-d", value); }
         }
 
         /// <summary>
@@ -130,8 +133,8 @@
         [TaskAttribute("pruneempty", Required=false)]
         [BooleanValidator()]
         public bool PruneEmpty {
-            get {return ((Option)CommandOptions["pruneempty"]).IfDefined;}
-            set {SetCommandOption("pruneempty", "-P", value);}
+            get { return ((Option)CommandOptions["pruneempty"]).IfDefined; }
+            set { SetCommandOption("pruneempty", "-P", value); }
         }
 
         /// <summary>
@@ -142,8 +145,8 @@
         [TaskAttribute("overwritelocal", Required=false)]
         [BooleanValidator()]
         public bool OverwriteLocal {
-            get {return ((Option)CommandOptions["overwritelocal"]).IfDefined;}
-            set {SetCommandOption("overwritelocal", "-C", value);}
+            get { return ((Option)CommandOptions["overwritelocal"]).IfDefined; }
+            set { SetCommandOption("overwritelocal", "-C", value); }
         }
 
         /// <summary>
@@ -152,8 +155,8 @@
         [TaskAttribute("recursive", Required=false)]
         [BooleanValidator()]
         public bool Recursive {
-            get {return ((Option)CommandOptions["recursive"]).IfDefined;}
-            set {SetCommandOption("recursive", "-R", value);}
+            get { return ((Option)CommandOptions["recursive"]).IfDefined; }
+            set { SetCommandOption("recursive", "-R", value); }
         }
 
         /// <summary>
@@ -163,8 +166,8 @@
         [TaskAttribute("revision", Required=false)]
         [StringValidator(AllowEmpty=false, Expression=@"^[A-Za-z0-9][A-Za-z0-9._\-]*$")]
         public string Revision {
-            get {return ((Option)CommandOptions["revision"]).Value;}
-            set {SetCommandOption("revision", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true);}
+            get { return ((Option)CommandOptions["revision"]).Value; }
+            set { SetCommandOption("revision", String.Format(CultureInfo.InvariantCulture,"-r {0}", value), true); }
         }
 
         /// <summary>
@@ -175,8 +178,8 @@
         /// </value>
         [TaskAttribute("sticky-tag", Required=false)]
         public string StickyTag {
-            get {return Revision;}
-            set {Revision = value;}
+            get { return Revision; }
+            set { Revision = value; }
         }
 
         /// <summary>
@@ -190,44 +193,39 @@
         [TaskAttribute("date", Required=false)]
         [DateTimeValidator()]
         public DateTime Date {
-            get {return Convert.ToDateTime(((Option)CommandOptions["date"]).Value);}
-            set {SetCommandOption("date", String.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true);}
+            get { return Convert.ToDateTime(((Option)CommandOptions["date"]).Value); }
+            set { SetCommandOption("date", String.Format(CultureInfo.InvariantCulture,"-D \"{0}\"", DateParser.GetCvsDateString(value)), true); }
         }
 
         #endregion
 
-        #region Private Static Fields
-
-        private static readonly log4net.ILog Logger = 
-            log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
-
-        #endregion Private Static Fields
-
-        #region Public Constants
+        #region Override implementation of AbstractCvsTask
 
         /// <summary>
-        /// The command being executed.
+        /// Specify if the module is needed for this cvs command.  It is
+        /// only needed if there is no module information on the local file
+        /// system.
         /// </summary>
-        public const string CvsCommandName = "update";
-
-        #endregion
-
-        #region Public Instance Constructors
+        protected override bool IsModuleNeeded {
+            get {return false;}
+        }
 
         /// <summary>
-        /// Initializes a new instance of the <see cref="UpdateTask" /> 
-        /// class.
+        /// Specify if the cvs root should be used for this cvs command.  It is
+        /// only needed if there is no module information on the local file
+        /// system, there fore is not needed for a cvs update.
         /// </summary>
-        /// <remarks>
-        /// Sets the build directory and prune empty directory properties to
-        /// <see langword="true" />.
-        /// </remarks>
-        public UpdateTask() {
-            BuildDirs = true;
-            PruneEmpty = true;
+        protected override bool IsCvsRootNeeded {
+            get {return false;}
         }
 
-        #endregion Public Instance Constructors
+        /// <summary>
+        /// The name of the cvs command that is going to be executed.
+        /// </summary>
+        public override string CommandName {
+            get {return CvsCommandName;}
+        }
 
+        #endregion Override implementation of AbstractCvsTask
     }
 }
diff -uNr nant-0.85-rc3/tests/NAnt.Core/ExceptionTest.cs nant-0.85-rc3-new/tests/NAnt.Core/ExceptionTest.cs
--- nant-0.85-rc3/tests/NAnt.Core/ExceptionTest.cs	2004-12-26 23:11:18.000000000 -0500
+++ nant-0.85-rc3-new/tests/NAnt.Core/ExceptionTest.cs	2005-08-15 16:37:50.000000000 -0400
@@ -130,21 +130,6 @@
             Assert.IsTrue(ci.IsFamily, t.Name + description + " is not protected, must be protected.");
         }
 
-        private void CheckPublicOrProtectedConstructor(Type t, string description, params Type[] parameters) {
-            // locate constructor
-            ConstructorInfo ci = t.GetConstructor(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance, null, parameters, null);
-            // fail if constructor does not exist
-            Assert.IsNotNull(ci, t.Name + description + " is a required constructor.");
-            // fail if constructor is private
-            Assert.IsFalse(ci.IsPrivate, t.Name + description + " is private, must be public or protected.");
-            // fail if constructor is internal
-            Assert.IsFalse(ci.IsAssembly, t.Name + description + " is internal, must be public or protected.");
-            // fail if constructor is protected internal
-            Assert.IsFalse(ci.IsFamilyOrAssembly, t.Name + description + " is protected internal, must be public or protected.");
-            // sainty check to make sure the constructor is protected or public
-            Assert.IsTrue(ci.IsPublic || ci.IsFamily, t.Name + description + " is not public or protected, must be public or protected.");
-        }
-
         private void CheckPrivateConstructor(Type t, string description, params Type[] parameters) {
             // locate constructor
             ConstructorInfo ci = t.GetConstructor(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance, null, parameters, null);
