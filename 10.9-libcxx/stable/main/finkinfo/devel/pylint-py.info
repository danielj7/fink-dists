Info2: <<

Package: pylint-py%type_pkg[python]
# Needs isort-py36
Type: python (2.7 3.4 3.5)
Version: 1.6.5
Revision: 1
Source: https://pypi.io/packages/source/p/pylint/pylint-%v.tar.gz
Source-MD5: 31da2185bf59142479e4fa16d8a9e347

Depends: <<
  python%type_pkg[python],
  astroid-py%type_pkg[python] (>= 1.4.9-1),
  isort-py%type_pkg[python] (>= 4.2.5-1),
  mccabe-py%type_pkg[python],
  six-py%type_pkg[python],
  (%type_raw[python] = 2.7) backports.functools-lru-cache-py%type_pkg[python],
  (%type_raw[python] = 2.7) configparser-py%type_pkg[python]
<<

Description: Analyzes Python code for bugs and quality
Maintainer: Kurt Schwehr <goatbar@users.sf.net>
Homepage: http://www.logilab.org/projects/pylint
DocFiles: COPYING DEPENDS README.rst PKG-INFO
CompileScript: <<
#!/bin/bash -ev
  if [ "%type_pkg[python]" -ge "31" ]; then
    # Yuck, but this is what they recommend
    find . ! -path "*/test/*py" -name "*py" -exec 2to3-%type_raw[python] -wn {} \;
  fi
  echo Skipping Build
<<
InstallScript: <<
#!/bin/bash -ev
   %p/bin/python%type_raw[python] setup.py install --root=%d --prefix=%p
   for file in pylint pylint-gui symilar epylint pyreverse; do
       mv %i/bin/${file} %i/bin/${file}%type_pkg[python]
   done
<<

PostInstScript: <<
  update-alternatives --verbose --install "%p/bin/pylint" pylint "%p/bin/pylint%type_pkg[python]" %type_pkg[python] \
    --slave "%p/bin/pylint-compile" pylint-gui "%p/bin/pylint-gui%type_pkg[python]" \
    --slave "%p/bin/symilar" symilar "%p/bin/symilar%type_pkg[python]" \
    --slave "%p/bin/epylint" epylint "%p/bin/epylint%type_pkg[python]" \
    --slave "%p/bin/pyreverse" pyreverse "%p/bin/pyreverse%type_pkg[python]"
<<

PreRmScript: <<
  if [ $1 != "upgrade" ]; then
    update-alternatives --verbose --remove pylint "%p/bin/pylint%type_pkg[python]"
  fi
<<

LICENSE: GPL

DescDetail: <<
Pylint is a python tool that checks if a module satisfy a coding
standard. Pylint can be seen as another PyChecker since nearly all
tests you can do with PyChecker can also be done with Pylint. But
Pylint offers some more features, like checking line-code's length,
checking if variable names are well-formed according to your coding
standard, or checking if declared interfaces are truly implemented,
and much more (see the complete check list).

The big advantage with Pylint is that it is highly configurable,
customizable, and you can easily write a small plugin to add a
personal feature.
<< 

# Info2
<<
