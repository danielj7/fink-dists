diff -ruN openttd-1.7.1-orig/Makefile.lang.in openttd-1.7.1/Makefile.lang.in
--- openttd-1.7.1-orig/Makefile.lang.in	2017-06-13 13:34:59.000000000 -0500
+++ openttd-1.7.1/Makefile.lang.in	2017-10-16 23:22:04.000000000 -0500
@@ -26,7 +26,7 @@
 endif
 
 # Make sure endian_host.h is reachable as if it was in the src/ dir
-CFLAGS_BUILD += -I $(LANG_OBJS_DIR)
+CFLAGS_BUILD += -I$(LANG_OBJS_DIR)
 
 ENDIAN_TARGETS := endian_host.h endian_target.h $(ENDIAN_CHECK)
 
diff -ruN openttd-1.7.1-orig/Makefile.src.in openttd-1.7.1/Makefile.src.in
--- openttd-1.7.1-orig/Makefile.src.in	2017-06-13 13:35:00.000000000 -0500
+++ openttd-1.7.1/Makefile.src.in	2017-10-16 23:22:04.000000000 -0500
@@ -57,10 +57,10 @@
 RES      := $(shell mkdir -p $(BIN_DIR) $(sort $(dir $(OBJS))))
 
 # Make sure endian_target.h is reasable as if it was in the src/ dir
-CFLAGS += -I $(SRC_OBJS_DIR) -I $(LANG_OBJS_DIR) -I $(SETTING_OBJS_DIR)
-CFLAGS_MAKEDEP += -I $(SRC_OBJS_DIR) -I $(LANG_OBJS_DIR) -I $(SETTING_OBJS_DIR)
+CFLAGS += -I$(SRC_OBJS_DIR) -I$(LANG_OBJS_DIR) -I$(SETTING_OBJS_DIR)
+CFLAGS_MAKEDEP += -I$(SRC_OBJS_DIR) -I$(LANG_OBJS_DIR) -I$(SETTING_OBJS_DIR)
 ifdef SCRIPT_SRC_DIR
-	CFLAGS_MAKEDEP += -I $(SCRIPT_SRC_DIR)
+	CFLAGS_MAKEDEP += -I$(SCRIPT_SRC_DIR)
 endif
 
 ENDIAN_TARGETS := endian_target.h $(ENDIAN_CHECK)
@@ -251,7 +251,7 @@
 
 $(OBJS_RC): %.o: $(SRC_DIR)/%.rc $(FILE_DEP)
 	$(E) '$(STAGE) Compiling resource $(<:$(SRC_DIR)/%.rc=%.rc)'
-	$(Q)$(WINDRES) -o $@ -I `basename $<` $<
+	$(Q)$(WINDRES) -o $@ -I`basename $<` $<
 
 $(BIN_DIR)/$(TTD): $(TTD)
 	$(Q)cp $(TTD) $(BIN_DIR)/$(TTD)
diff -ruN openttd-1.7.1-orig/config.lib openttd-1.7.1/config.lib
--- openttd-1.7.1-orig/config.lib	2017-06-13 13:35:00.000000000 -0500
+++ openttd-1.7.1/config.lib	2017-10-16 23:27:45.000000000 -0500
@@ -1598,7 +1598,7 @@
 		LDFLAGS="$LDFLAGS -framework Cocoa"
 
 		# Add macports include dir which is not always set a default system dir. This avoids zillions of bogus warnings.
-		CFLAGS="$CFLAGS -isystem/opt/local/include"
+		CFLAGS="$CFLAGS -isystem@FINK_PREFIX@/include"
 
 		if [ "$enable_dedicated" = "0" ] && ([ "$cpu_type" = "32" ] || [ "$enable_universal" != "0" ]); then
 			LIBS="$LIBS -framework QuickTime"
@@ -1688,7 +1688,7 @@
 
 	if [ "$with_lzo2" != "0" ]; then
 		if [ "$enable_static" != "0" ] && [ "$os" != "OSX" ]; then
-			LIBS="$LIBS $lzo2"
+			LIBS="$LIBS -llzo2"
 		else
 			LIBS="$LIBS -llzo2"
 		fi
@@ -2581,25 +2581,25 @@
 	log 2 "detecting $2"
 
 	if [ "$1" = "1" ] || [ "$1" = "" ] || [ "$1" = "2" ]; then
-		eval "$2=`ls -1 /usr/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
+		eval "$2=`ls -1 @FINK_PREFIX@/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
 		eval "res=\$$2"
 		if [ -z "$res" ]; then
-			log 2 "  trying /usr/include/$4$5... no"
-			eval "$2=`ls -1 /usr/local/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
+			log 2 "  trying @FINK_PREFIX@/include/$4$5... no"
+			eval "$2=`ls -1 /usr/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
 		fi
 		eval "res=\$$2"
 		if [ -z "$res" ]; then
-			log 2 "  trying /usr/local/include/$4$5... no"
+			log 2 "  trying /usr/include/$4$5... no"
 			eval "$2=`ls -1 /mingw/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
 		fi
 		eval "res=\$$2"
 		if [ -z "$res" ]; then
 			log 2 "  trying /mingw/include/$4$5... no"
-			eval "$2=`ls -1 /opt/local/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
+			eval "$2=`ls -1 @FINK_PREFIX@/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
 		fi
 		eval "res=\$$2"
 		if [ -z "$res" ]; then
-			log 2 "  trying /opt/local/include/$4$5... no"
+			log 2 "  trying @FINK_PREFIX@/include/$4$5... no"
 		fi
 		if [ -z "$res" ] && [ "$os" = "NETBSD" ]; then
 			eval "$2=`ls -1 /usr/pkg/include/$4*.h 2>/dev/null | egrep \"\/$5\$\"`"
@@ -2624,21 +2624,21 @@
 			eval "res=\$$2"
 			log 2 "  trying $res... found"
 			# Now find the static lib, if needed
-			eval "$2=`ls /lib/*.a 2>/dev/null | egrep \"\/$3\$\"`"
+			eval "$2=`ls /lib/*.dylib 2>/dev/null | egrep \"\/$3\$\"`"
 			eval "res=\$$2"
 			if [ -z "$res" ]; then
 				log 2 "  trying /lib/$3... no"
-				eval "$2=`ls /usr/lib/*.a 2>/dev/null | egrep \"\/$3\$\"`"
+				eval "$2=`ls /usr/lib/*.dylib 2>/dev/null | egrep \"\/$3\$\"`"
 			fi
 			eval "res=\$$2"
 			if [ -z "$res" ]; then
 				log 2 "  trying /usr/lib/$3... no"
-				eval "$2=`ls /usr/local/lib/*.a 2>/dev/null | egrep \"\/$3\$\"`"
+				eval "$2=`ls /usr/local/lib/*.dylib 2>/dev/null | egrep \"\/$3\$\"`"
 			fi
 			eval "res=\$$2"
 			if [ -z "$res" ]; then
 				log 2 "  trying /usr/local/lib/$3... no"
-				eval "$2=`ls /mingw/lib/*.a 2>/dev/null | egrep \"\/$3\$\"`"
+				eval "$2=`ls /mingw/lib/*.dylib 2>/dev/null | egrep \"\/$3\$\"`"
 			fi
 			eval "res=\$$2"
 			if [ -z "$res" ]; then
@@ -2688,7 +2688,7 @@
 }
 
 detect_lzo2() {
-	detect_library "$with_lzo2" "lzo2" "liblzo2.a" "lzo/" "lzo1x.h"
+	detect_library "$with_lzo2" "lzo2" "liblzo2.dylib" "lzo/" "lzo1x.h"
 }
 
 detect_libtimidity() {
X-Git-Url: http://git.openttd.org/?p=trunk.git;a=blobdiff_plain;f=src%2Ffileio.cpp;h=085c2c66dc186174cd002d3e5714489ec21d3b26;hp=a72950bc73837b2f4861d448ee90ddd0fccac0b9;hb=2f7ac7c41f46dfc0d16d963ea5c6de2f8d144971;hpb=dd3d824894ac2e0a926c8ee45112f67462b3d2aa

diff --git a/src/fileio.cpp b/src/fileio.cpp
index a72950b..085c2c6 100644
--- a/src/fileio.cpp
+++ b/src/fileio.cpp
@@ -1032,30 +1032,29 @@ extern void DetermineBasePaths(const char *exe);
  */
 static bool ChangeWorkingDirectoryToExecutable(const char *exe)
 {
+	char tmp[MAX_PATH];
+	strecpy(tmp, exe, lastof(tmp));
+
 	bool success = false;
 #ifdef WITH_COCOA
-	char *app_bundle = strchr(exe, '.');
+	char *app_bundle = strchr(tmp, '.');
 	while (app_bundle != NULL && strncasecmp(app_bundle, ".app", 4) != 0) app_bundle = strchr(&app_bundle[1], '.');
 
-	if (app_bundle != NULL) app_bundle[0] = '\0';
+	if (app_bundle != NULL) *app_bundle = '\0';
 #endif /* WITH_COCOA */
-	char *s = const_cast<char *>(strrchr(exe, PATHSEPCHAR));
+	char *s = strrchr(tmp, PATHSEPCHAR);
 	if (s != NULL) {
 		*s = '\0';
 #if defined(__DJGPP__)
 		/* If we want to go to the root, we can't use cd C:, but we must use '/' */
-		if (s[-1] == ':') chdir("/");
+		if (s > tmp && *(s - 1) == ':') chdir("/");
 #endif
-		if (chdir(exe) != 0) {
+		if (chdir(tmp) != 0) {
 			DEBUG(misc, 0, "Directory with the binary does not exist?");
 		} else {
 			success = true;
 		}
-		*s = PATHSEPCHAR;
 	}
-#ifdef WITH_COCOA
-	if (app_bundle != NULL) app_bundle[0] = '.';
-#endif /* WITH_COCOA */
 	return success;
 }
 
