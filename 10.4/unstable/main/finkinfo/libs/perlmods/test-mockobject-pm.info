Info2: <<
Package: test-mockobject-pm%type_pkg[perl]
Version: 1.06
Revision: 1021
Architecture: (%type_pkg[perl] = 581) powerpc, (%type_pkg[perl] = 584) powerpc
Description: Perl extension for emulating troublesome interfaces
Type: perl(5.8.1 5.8.4 5.8.6)
License: Artistic
Maintainer: Benjamin Reed <test-mockobject-pm@fink.racoonfink.com>

Depends: fink (>= 0.24-1), perl%type_pkg[perl]-core, test-simple-pm%type_pkg[perl], universal-isa-pm%type_pkg[perl] (>= 0.06-1), universal-can-pm%type_pkg[perl] (>= 1.11-1)
BuildDepends: fink (>= 0.24-1), module-build-pm%type_pkg[perl], perl%type_pkg[perl]-core, test-simple-pm%type_pkg[perl], universal-isa-pm%type_pkg[perl] (>= 0.06-1), universal-can-pm%type_pkg[perl] (>= 1.11-1)

Source: mirror:cpan:authors/id/C/CH/CHROMATIC/Test-MockObject-%v.tar.gz
Source-MD5: 3cef7884dd6fc6b15c35dd04697a8853

CompileScript: <<
#!/bin/sh -ex
	exec 2>&1
	perlversion=%type_raw[perl]
	eval "`perl$perlversion -V:archname`"
	perl$perlversion Build.PL \
		--install_path arch=%i/lib/perl5/$perlversion/$archname \
		--install_path bin=%i/bin \
		--install_path bindoc=%i/lib/perl5/$perlversion/man/man1 \
		--install_path lib=%i/lib/perl5/$perlversion \
		--install_path libdoc=%i/lib/perl5/$perlversion/man/man3 \
		--install_path script=%i/bin
	./Build
	./Build test
<<

UpdatePOD: true
InstallScript: <<
	./Build install
	find %d -name .packlist -exec rm -rf {} \;
<<
DocFiles: Changes MANIFEST README

Homepage: http://search.cpan.org/dist/Test-MockObject
DescDetail: <<
It's a simple program that doesn't use any other modules, and
those are easy to test.  More often, testing a program
completely means faking up input to another module, trying to
coax the right output from something you're not supposed to be
testing anyway.

Testing is a lot easier when you can control the entire
environment.  With Test::MockObject, you can get a lot closer.

Test::MockObject allows you to create objects that conform to
particular interfaces with very little code.  You don't have
to reimplement the behavior, just the input and the output.
<<
<<

