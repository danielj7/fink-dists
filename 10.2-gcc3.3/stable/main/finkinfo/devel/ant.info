Package: ant
Version: 1.6.2
Revision: 1
Type: java(1.3)
Maintainer: Benjamin Reed <rangerrick@users.sourceforge.net>
#
BuildDepends: fink (>= 0.22.2-1), fink-mirrors (>= 0.22.1.1-1), system-java13-dev
Depends: system-java13 | system-java14 | system-java15
Source: mirror:apache:ant/source/apache-ant-%v-src.tar.bz2
Source-MD5: 83c3adefdbf90bcbc4b804d4c55c0778
SourceDirectory: apache-%n-%v
CompileScript: ./build.sh -Ddist.name=%n -Dchmod.fail=false dist
InstallScript: <<
#!/bin/sh -ex
 mkdir -p %i/lib
 cp -R ant %i/lib
 # make up for failing build.xml
 chmod -R ugo+r %i/lib/%n
 # binaries
 rm %i/lib/%n/bin/*.bat
 mkdir -p %i/bin
 cd %i/bin ; ln -s ../lib/%n/bin/* .
 # docs
 mkdir -p %i/share/doc/%n
 cd %i/share/doc/%n ; ln -s ../../../lib/%n/docs html
 find %i -name \*junit\* -exec rm -rf {} \; || :
<<
DocFiles: KEYS LICENSE README WHATSNEW lib/README:README.lib
RuntimeVars: <<
 JAVA_HOME: /Library/Java/Home
 ANT_HOME: %p/lib/ant
<<
#
Description: Java based build tool
DescDetail: <<
Ant is different. Instead of a model where it is extended with shell
based commands, it is extended using Java classes. Instead of writing
shell commands, the configuration files are XML based calling out a
target tree where various tasks get executed. Each task is run by an
object which implements a particular Task interface.

Granted, this removes some of the expressive power that is inherent by
being able to construct a shell command such as `find . -name foo
-exec rm {}` but it gives you the ability to be cross platform. To
work anywhere and everywhere. And hey, if you really need to execute a
shell command, Ant has an exec rule that allows different commands to
be executed based on the OS that it is executing on.
<<
DescPackaging: <<
 I copy all the files to lib because there need to be a ANT_HOME env var.
 Linked the binaries in ... bin :-)
 Linked the docs to share/doc/%n
<<
DescPort: <<
 the chmod task of ant would fail with 
    Java: UNIXProcess:forkAndExec: exec failed: Argument list too long
  because apprently it tries to chmod thousands of files in a single
line of command,
  another solution is to set parallel to false, which cause chmod to
process one file after
  the other but then we get a java.io.IOException: Too many open
files. Conclusion
  use unix chmod in InstallScript ;-)
 Removed *.bat in bin
<<
License: BSD
Homepage: http://ant.apache.org/
