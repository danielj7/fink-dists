diff -uNr pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/dtrplugin.cpp pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/dtrplugin.cpp
--- pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/dtrplugin.cpp	2014-10-27 18:20:34.000000000 -0400
+++ pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/dtrplugin.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -484,7 +484,7 @@
         /* constant frame size */
         if (keys[i].size() != m_framesize) {
             fprintf(stderr, "non-constant framesize at frame %ld\n", i);
-            printf("size %d framesize %d\n\n",
+            printf("size %lld framesize %lld\n\n",
                     keys[i].size(), m_framesize);
             return true;
         }
@@ -1298,7 +1298,7 @@
   }
   Blob pos=blobs["POSITION"];
   if (pos.count != 3*natoms) {
-    fprintf(stderr, "ERROR, Expected %d elements in POSITION; got %ld\n",
+    fprintf(stderr, "ERROR, Expected %d elements in POSITION; got %lld\n",
         3*natoms, pos.count);
     return MOLFILE_ERROR;
   }
@@ -1307,7 +1307,7 @@
   if (with_velocity && ts->velocities && blobs.find("VELOCITY")!=blobs.end()) {
     Blob vel=blobs["VELOCITY"];
     if (vel.count != 3*natoms) {
-      fprintf(stderr, "ERROR, Expected %d elements in VELOCITY; got %ld\n",
+      fprintf(stderr, "ERROR, Expected %d elements in VELOCITY; got %lld\n",
           3*natoms, vel.count);
       return MOLFILE_ERROR;
     }
@@ -1569,7 +1569,7 @@
   // if required, get velocities
   if (ts->velocities && velblob.count > 0) {
     if (velblob.count != 3*natoms) {
-      fprintf(stderr, "VELOCITY field has %ld values; expected %d\n",
+      fprintf(stderr, "VELOCITY field has %lld values; expected %d\n",
           velblob.count, 3*natoms);
       return MOLFILE_ERROR;
     }
diff -uNr pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/gamessplugin.c pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/gamessplugin.c
--- pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/gamessplugin.c	2014-10-27 18:20:35.000000000 -0400
+++ pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/gamessplugin.c	2014-12-02 19:37:35.000000000 -0500
@@ -375,7 +375,7 @@
                   const char *filetype, int *natoms) {
 
   FILE *fd;
-  qmdata_t *data;
+  qmdata_t *data = NULL;
   gmsdata *gms;
 
   /* open the input file */
diff -uNr pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/graspplugin.cpp pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/graspplugin.cpp
--- pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/graspplugin.cpp	2014-10-27 18:20:34.000000000 -0400
+++ pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/graspplugin.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -104,7 +104,7 @@
 
   ///ojo aqui le quite el  !
   if ((grassp->flag)!=POTENTIALS) {
-    if (index >=0 && index <= 4) 
+    if (index <= 4) 
       printf("graspplugin) No data available for '%s' option\n", name[index]);
     else 
       printf("graspplugin) out of range property, flag: %d index: %d\n", grassp->flag, index);
diff -uNr pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c
--- pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c	2014-10-27 18:20:34.000000000 -0400
+++ pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c	2014-12-02 19:37:35.000000000 -0500
@@ -99,7 +99,7 @@
                               const char *filetype,
                               int *natoms) {
   FILE *fd;
-  qmdata_t *data;
+  qmdata_t *data = NULL;
   moldendata_t *moldendata;
   char buffer[1024];
   char keystring[20];
diff -uNr pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/pbeqplugin.cpp pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/pbeqplugin.cpp
--- pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/pbeqplugin.cpp	2014-10-27 18:20:34.000000000 -0400
+++ pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/pbeqplugin.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -259,7 +259,7 @@
         int addr = z*nclx*ncly + y*nclx + x;
         if (fread(datablock + addr, 4, 1, fd) != 1) {
           printf("pbeqplugin) Error reading potential map cell: %d,%d,%d\n", x, y, z);
-          printf("pbeqplugin) offset: %d\n", ftell(fd));
+          printf("pbeqplugin) offset: %ld\n", ftell(fd));
           return MOLFILE_ERROR;
         }
         count++;
diff -uNr pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/vtfplugin.c pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/vtfplugin.c
--- pymol-1.7.3.6/contrib/uiuc/plugins/molfile_plugin/src/vtfplugin.c	2014-10-27 18:20:34.000000000 -0400
+++ pymol-1.7.3.6.clang/contrib/uiuc/plugins/molfile_plugin/src/vtfplugin.c	2014-12-02 19:37:35.000000000 -0500
@@ -231,7 +231,7 @@
     switch (tolower(keyword[0])) {
     case 'n': {
       /* name */
-      if (sscanf(s, "%16s %n", &atom.name, &n) < 1) {
+      if (sscanf(s, "%16s %n", (char *) &atom.name, &n) < 1) {
 	vtf_error("could not get name in atom record", line);
 	return MOLFILE_ERROR;
       }
@@ -240,7 +240,7 @@
     }
     case 't': {
       /* type */
-      if (sscanf(s, "%16s %n", &atom.type, &n) < 1) {
+      if (sscanf(s, "%16s %n", (char *) &atom.type, &n) < 1) {
 	vtf_error("could not get type in atom record", line);
 	return MOLFILE_ERROR;
       }
@@ -266,7 +266,7 @@
       } else if (strcmp(keyword, "res") == 0 || 
 		 strcmp(keyword, "resname") == 0) {
 	/* resname */
-	if (sscanf(s, "%8s %n", &atom.resname, &n) < 1) {
+	if (sscanf(s, "%8s %n", (char *) &atom.resname, &n) < 1) {
 	  vtf_error("could not get resname in atom record", line);
 	  return MOLFILE_ERROR;
 	}
@@ -281,7 +281,7 @@
     }
     case 's': {
       /* segid */
-      if (sscanf(s, "%8s %n", &atom.segid, &n) < 1) {
+      if (sscanf(s, "%8s %n", (char *) &atom.segid, &n) < 1) {
 	vtf_error("could not get segid in atom record", line);
 	return MOLFILE_ERROR;
       }
@@ -290,7 +290,7 @@
     }
     case 'i': {
       /* insertion */
-      if (sscanf(s, "%2s %n", &atom.insertion, &n) < 1) {
+      if (sscanf(s, "%2s %n", (char *) &atom.insertion, &n) < 1) {
 	vtf_error("could not get insertion in atom record", line);
 	return MOLFILE_ERROR;
       }
@@ -302,7 +302,7 @@
       /* chain, charge */
       if (strlen(keyword) == 1 || 
 	  strcmp(keyword, "chain") == 0) {
-	if (sscanf(s, "%2s %n", &atom.chain, &n) < 1) {
+	if (sscanf(s, "%2s %n", (char *) &atom.chain, &n) < 1) {
 	  vtf_error("could not get chain in atom record", line);
 	  return MOLFILE_ERROR;
 	}
@@ -336,7 +336,7 @@
 	}
 	d->optflags |= MOLFILE_ATOMICNUMBER;
       } else if (strcmp(keyword, "altloc")) {
-	if (sscanf(s, "%2s %n", &atom.altloc, &n) < 1) {
+	if (sscanf(s, "%2s %n", (char *) &atom.altloc, &n) < 1) {
 	  vtf_error("could not get altloc in atom record", line);
 	  return MOLFILE_ERROR;
 	}
diff -uNr pymol-1.7.3.6/layer1/CGO.cpp pymol-1.7.3.6.clang/layer1/CGO.cpp
--- pymol-1.7.3.6/layer1/CGO.cpp	2014-10-27 18:20:29.000000000 -0400
+++ pymol-1.7.3.6.clang/layer1/CGO.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -7134,7 +7134,7 @@
   int  texture_id = CGO_get_int(*pc);
   float worldPos[4], screenMin[3], screenMax[3], textExtent[4];
   CShaderPrg * shaderPrg;
-  int buf1, buf2, attr_worldpos, attr_screenoffset, attr_texcoords;
+  int buf1 = 0, buf2 = 0, attr_worldpos, attr_screenoffset, attr_texcoords;
   copy3f(*pc, worldPos);  worldPos[3] = 1.f;
   copy3f(*pc+3, screenMin);
   copy3f(*pc+6, screenMax);
@@ -7175,7 +7175,7 @@
   int  texture_id = CGO_get_int(*pc);
   float worldPos[4], screenMin[3], screenMax[3], textExtent[4];
   CShaderPrg * shaderPrg;
-  int buf1, buf2, attr_worldpos, attr_screenoffset, attr_texcoords;
+  int buf1 = 0, buf2 = 0, attr_worldpos, attr_screenoffset, attr_texcoords;
   copy3f(*pc, worldPos);  worldPos[3] = 1.f;
   copy3f(*pc+3, screenMin);
   copy3f(*pc+6, screenMax);
diff -uNr pymol-1.7.3.6/layer2/ObjectMolecule.cpp pymol-1.7.3.6.clang/layer2/ObjectMolecule.cpp
--- pymol-1.7.3.6/layer2/ObjectMolecule.cpp	2014-10-27 18:20:31.000000000 -0400
+++ pymol-1.7.3.6.clang/layer2/ObjectMolecule.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -1476,7 +1476,7 @@
   int NPHIH, MPHIA, NHPARM, NPARM, NNB, NRES;
   int NBONA, NTHETA, NPHIA, NUMBND, NUMANG, NPTRA;
   int NATYP, NPHB, IFPERT, NBPER, NGPER, NDPER;
-  int MBPER, MGPER, MDPER, IFBOX, NMXRS, IFCAP;
+  int MBPER, MGPER, MDPER, IFBOX = 0, NMXRS, IFCAP;
   int NEXTRA, IPOL = 0;
   int wid, col;
   float BETA;
@@ -2105,7 +2105,7 @@
 
     if(IFBOX > 0) {
 
-      int IPTRES, NSPM, NSPSOL;
+      int IPTRES, NSPM = 0, NSPSOL;
 
       if(amber7) {
         p = findflag(G, buffer, "SOLVENT_POINTERS", "3I8");
@@ -4386,7 +4386,7 @@
   int result = 0;
   int flag = true;
   float v[3], v0[3], d;
-  CoordSet *cs;
+  CoordSet *cs = NULL;
   int ok = true;
 
   if((index >= 0) && (index <= I->NAtom)) {
diff -uNr pymol-1.7.3.6/layer2/ObjectMolecule2.cpp pymol-1.7.3.6.clang/layer2/ObjectMolecule2.cpp
--- pymol-1.7.3.6/layer2/ObjectMolecule2.cpp	2014-10-27 18:20:31.000000000 -0400
+++ pymol-1.7.3.6.clang/layer2/ObjectMolecule2.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -3625,7 +3625,7 @@
 {
   int ok = true;
   ObjectMolecule *I = NULL;
-  int discrete_flag;
+  int discrete_flag = 0;
   int ll;
   (*result) = NULL;
 
diff -uNr pymol-1.7.3.6/layer3/PlugIOManager.cpp pymol-1.7.3.6.clang/layer3/PlugIOManager.cpp
--- pymol-1.7.3.6/layer3/PlugIOManager.cpp	2014-10-27 18:20:32.000000000 -0400
+++ pymol-1.7.3.6.clang/layer3/PlugIOManager.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -274,7 +274,7 @@
                       ENDFB(G);
                   }
 
-                  if(stop > 0 && cnt >= stop || max > 0 && ncnt >= max) {
+                  if((stop > 0 && cnt >= stop) || (max > 0 && ncnt >= max)) {
                     cs = NULL;
                     break;
                   }
diff -uNr pymol-1.7.3.6/layer3/Selector.cpp pymol-1.7.3.6.clang/layer3/Selector.cpp
--- pymol-1.7.3.6/layer3/Selector.cpp	2014-10-27 18:20:32.000000000 -0400
+++ pymol-1.7.3.6.clang/layer3/Selector.cpp	2014-12-02 19:37:35.000000000 -0500
@@ -8916,11 +8916,11 @@
     for(a = cNDummyAtoms; a < I->NAtom; a++) {
       b = i_obj[i_table[a].model]->AtomInfo[i_table[a].atom].protons;
       base[0].sele[a] = (
-          b >  2 && b <  5 ||
-          b > 10 && b < 14 ||
-          b > 18 && b < 32 ||
-          b > 36 && b < 51 ||
-          b > 54 && b < 85 ||
+          (b >  2 && b <  5) ||
+          (b > 10 && b < 14) ||
+          (b > 18 && b < 32) ||
+          (b > 36 && b < 51) ||
+          (b > 54 && b < 85) ||
           b > 86);
     }
     break;
diff -uNr pymol-1.7.3.6/modules/cealign/src/tnt/tnt_array1d.h pymol-1.7.3.6.clang/modules/cealign/src/tnt/tnt_array1d.h
--- pymol-1.7.3.6/modules/cealign/src/tnt/tnt_array1d.h	2014-10-27 18:20:48.000000000 -0400
+++ pymol-1.7.3.6.clang/modules/cealign/src/tnt/tnt_array1d.h	2014-12-02 19:37:35.000000000 -0500
@@ -258,7 +258,7 @@
 template <class T>
 inline Array1D<T> Array1D<T>::subarray(int i0, int i1)
 {
-	if ((i0 >= 0) && (i1 < n_) || (i0 <= i1))
+	if (((i0 >= 0) && (i1 < n_)) || (i0 <= i1))
 	{
 		Array1D<T> X(*this);  /* create a new instance of this array. */
 		X.n_ = i1-i0+1;
diff -uNr pymol-1.7.3.6/modules/cealign/src/tnt/tnt_fortran_array1d.h pymol-1.7.3.6.clang/modules/cealign/src/tnt/tnt_fortran_array1d.h
--- pymol-1.7.3.6/modules/cealign/src/tnt/tnt_fortran_array1d.h	2014-10-27 18:20:48.000000000 -0400
+++ pymol-1.7.3.6.clang/modules/cealign/src/tnt/tnt_fortran_array1d.h	2014-12-02 19:37:35.000000000 -0500
@@ -221,7 +221,7 @@
 #ifdef TNT_DEBUG
 		std::cout << "entered subarray. \n";
 #endif
-	if ((i0 > 0) && (i1 < n_) || (i0 <= i1))
+	if (((i0 > 0) && (i1 < n_)) || (i0 <= i1))
 	{
 		Fortran_Array1D<T> X(*this);  /* create a new instance of this array. */
 		X.n_ = i1-i0+1;
--- pymol-1.7.4.0/ov/src/OVLexicon.cppg	2014-12-05 12:50:55.000000000 -0500
+++ pymol-1.7.4.0.clang/ov/src/OVLexicon.cpp	2014-12-05 12:52:22.000000000 -0500
@@ -191,13 +191,13 @@
 {
   if((!uk->entry) || (id < 1) || (id > (ov_word) uk->n_entry)) {        /* range checking */
     if(id)
-      printf("OVLexicon_DecRef-Warning: key %d not found, this might be a bug\n", id);
+      printf("OVLexicon_DecRef-Warning: key %ld not found, this might be a bug\n", id);
     return_OVstatus_NOT_FOUND;
   } else {
     register lex_entry *cur_entry = uk->entry + id;
     ov_word ref_cnt = (--cur_entry->ref_cnt);
     if(ref_cnt < 0) {
-      printf("OVLexicon_DecRef-Warning: key %d with ref_cnt %d, this might be a bug\n", id, ref_cnt);
+      printf("OVLexicon_DecRef-Warning: key %ld with ref_cnt %ld, this might be a bug\n", id, ref_cnt);
       return_OVstatus_INVALID_REF_CNT;
     } else if(!ref_cnt) {
       OVreturn_word result = OVOneToOne_GetForward(uk->up, cur_entry->hash);
--- pymol-1.7.4.0/layer2/CifFile.cpp	2014-12-05 13:00:02.000000000 -0500
+++ pymol-1.7.4.0.clang/layer2/CifFile.cpp	2014-12-05 13:01:04.000000000 -0500
@@ -152,8 +152,8 @@
   // dict lookup, return first hit
   m_str_cifarray_t::iterator arr, end = dict.end();
   if ((arr = dict.find(key)) != end ||
-      alias1 && (arr = dict.find(alias1)) != end ||
-      alias2 && (arr = dict.find(alias2)) != end)
+      (alias1 && (arr = dict.find(alias1)) != end) ||
+      (alias2 && (arr = dict.find(alias2)) != end))
     return &arr->second;
   return NULL;
 }
--- pymol-1.7.4.0/layer2/ObjectVolume.cpp	2014-12-05 13:03:16.000000000 -0500
+++ pymol-1.7.4.0.clang/layer2/ObjectVolume.cpp	2014-12-05 13:07:42.000000000 -0500
@@ -470,8 +470,8 @@
     }
 
     // handle legacy or default color ramp
-    if(!vs->Ramp || vs->RampSize && vs->Ramp[0] == 0.f
-        && vs->Ramp[5 * (vs->RampSize - 1)] == 359.f) {
+    if(!vs->Ramp || (vs->RampSize && vs->Ramp[0] == 0.f
+        && vs->Ramp[5 * (vs->RampSize - 1)] == 359.f)) {
 
       if(vs->Ramp) {
         // legacy color ramp (0..359)
@@ -921,7 +921,7 @@
         int bg_gradient = SettingGet_b(G, NULL, NULL, cSetting_bg_gradient);
         const char * bg_image_filename = SettingGet_s(G, NULL, NULL, cSetting_bg_image_filename);
 
-        CShaderPrg_Set1f(shaderPrg, "fogIsSolidColor", bg_gradient || bg_image_filename && bg_image_filename[0] ? 0.f : 1.f);
+        CShaderPrg_Set1f(shaderPrg, "fogIsSolidColor", bg_gradient || (bg_image_filename && bg_image_filename[0]) ? 0.f : 1.f);
         CShaderPrg_Set3fv(shaderPrg, "fogSolidColor", ColorGet(G, SettingGet_color(G, NULL, NULL, cSetting_bg_rgb)));
         CShaderPrg_SetFogUniforms(G, shaderPrg);
         CShaderPrg_Set1f(shaderPrg, "fog_enabled", SettingGetGlobal_b(G, cSetting_depth_cue) ? 1.f : 0.f);
--- pymol-1.7.4.0/layer4/Cmd.cpp	2014-12-05 13:09:14.000000000 -0500
+++ pymol-1.7.4.0.clang/layer4/Cmd.cpp	2014-12-05 13:09:58.000000000 -0500
@@ -6039,7 +6039,7 @@
     // with prior=1 other arguments (width, height, ray) are ignored
 
     if(!prior) {
-      if(ray || !G->HaveGUI && (!SceneGetCopyType(G) || width || height)) {
+      if(ray || (!G->HaveGUI && (!SceneGetCopyType(G) || width || height))) {
         SceneRay(G, width, height, SettingGetGlobal_i(G, cSetting_ray_default_renderer),
                  NULL, NULL, 0.0F, 0.0F, false, NULL, true, -1);
         prior = 1;
--- pymol-1.7.4.0/layer3/PlugIOManager.cpp	2014-12-05 13:10:58.000000000 -0500
+++ pymol-1.7.4.0.clang/layer3/PlugIOManager.cpp	2014-12-05 13:11:14.000000000 -0500
@@ -459,7 +459,7 @@
               }
 
               PRINTFB(G, FB_ObjectMap, FB_Details)
-                " ObjectMap: read %d values\n", size ENDFB(G);
+                " ObjectMap: read %lu values\n", size ENDFB(G);
             }
 
           }
