diff -ru pdksh-5.2.14/Makefile.in pdksh-5.2.14-patched/Makefile.in
--- pdksh-5.2.14/Makefile.in	1999-07-13 19:06:53.000000000 +0200
+++ pdksh-5.2.14-patched/Makefile.in	2002-08-09 17:25:39.000000000 +0200
@@ -16,7 +16,7 @@
 LIBS = @LIBS@
 
 CPPFLAGS = @CPPFLAGS@
-CFLAGS = @CFLAGS@
+CFLAGS = @CFLAGS@ -DDEBIAN
 LDSTATIC = @LDSTATIC@
 LDFLAGS = @LDFLAGS@
 
@@ -27,7 +27,7 @@
 transform=@program_transform_name@
 
 bindir = $(exec_prefix)/bin
-mandir = $(prefix)/man/man$(manext)
+mandir = $(prefix)/share/man/man$(manext)
 manext = 1
 
 # Suffix for executables: nothing for unix, .exe for os/2.
diff -ru pdksh-5.2.14/alloc.c pdksh-5.2.14-patched/alloc.c
--- pdksh-5.2.14/alloc.c	1999-05-18 16:45:09.000000000 +0200
+++ pdksh-5.2.14-patched/alloc.c	2002-08-09 17:24:13.000000000 +0200
@@ -282,7 +282,9 @@
 	 * working (as it assumes size < ICELLS means it is not
 	 * a `large object').
 	 */
-	if (oldcells > ICELLS && cells > ICELLS) {
+	if (oldcells > ICELLS && cells > ICELLS 
+	    && ((dp-2)->block->last == dp+oldcells) && (((Cell*)((dp-2)->block+1))+NOBJECT_FIELDS == dp) /* don't destroy blocks which have grown! */
+	   ) {
 		Block *bp = (dp-2)->block;
 		Block *nbp;
 		/* Saved in case realloc fails.. */
@@ -332,7 +334,7 @@
 	 * (need to check that cells < ICELLS so we don't make an
 	 * object a `large' - that would mess everything up).
 	 */
-	if (dp && cells > oldcells && cells <= ICELLS) {
+	if (dp && cells > oldcells) {
 		Cell *fp, *fpp;
 		Block *bp = (dp-2)->block;
 		int need = cells - oldcells - NOBJECT_FIELDS;
@@ -363,7 +365,7 @@
 	 * it to malloc...)
 	 * Note: this also handles cells == oldcells (a no-op).
 	 */
-	if (dp && cells <= oldcells && oldcells <= ICELLS) {
+	if (dp && cells <= oldcells) {
 		int split;
 
 		split = oldcells - cells;
@@ -411,7 +413,9 @@
 
 	/* If this is a large object, just free it up... */
 	/* Release object... */
-	if ((dp-1)->size > ICELLS) {
+	if ((dp-1)->size > ICELLS
+	    && (bp->last == dp + (dp-1)->size) && (((Cell*)(bp+1))+NOBJECT_FIELDS == dp) /* don't free non-free blocks which have grown! */
+	   ) {
 		ablockfree(bp, ap);
 		ACHECK(ap);
 		return;
Only in pdksh-5.2.14-patched: alloc.c~
diff -ru pdksh-5.2.14/c_ksh.c pdksh-5.2.14-patched/c_ksh.c
--- pdksh-5.2.14/c_ksh.c	1999-05-13 19:02:48.000000000 +0200
+++ pdksh-5.2.14-patched/c_ksh.c	2002-08-09 17:24:13.000000000 +0200
@@ -1208,6 +1208,7 @@
 						builtin_opt.optarg);
 					return 1;
 				}
+				break;		
 			  case '?':
 				return 1;
 			}
diff -ru pdksh-5.2.14/c_sh.c pdksh-5.2.14-patched/c_sh.c
--- pdksh-5.2.14/c_sh.c	1999-07-13 18:54:44.000000000 +0200
+++ pdksh-5.2.14-patched/c_sh.c	2002-08-09 17:24:13.000000000 +0200
@@ -422,7 +422,8 @@
 c_eval(wp)
 	char **wp;
 {
-	register struct source *s;
+	register struct source *s,*olds=source;
+	int retval;
 
 	if (ksh_getopt(wp, &builtin_opt, null) == '?')
 		return 1;
@@ -456,7 +457,9 @@
 		exstat = subst_exstat;
 	}
 
-	return shell(s, FALSE);
+	retval=shell(s, FALSE);
+	source=olds;
+	return retval;
 }
 
 int
diff -ru pdksh-5.2.14/edit.c pdksh-5.2.14-patched/edit.c
--- pdksh-5.2.14/edit.c	1999-05-13 19:04:33.000000000 +0200
+++ pdksh-5.2.14-patched/edit.c	2002-08-09 17:24:13.000000000 +0200
@@ -15,6 +15,9 @@
 # include <sys/stream.h>	/* needed for <sys/ptem.h> */
 # include <sys/ptem.h>		/* needed for struct winsize */
 #endif /* OS_SCO */
+#ifdef DEBIAN
+#include <sys/ioctl.h>
+#endif /* DEBIAN */
 #include <ctype.h>
 #include "ksh_stat.h"
 
@@ -552,7 +555,11 @@
 {
 	char *toglob;
 	char **words;
+#ifndef DEBIAN 
 	int nwords;
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+	int nwords, i, idx, escaping;
+#endif /* DEBIAN */
 	XPtrV w;
 	struct source *s, *sold;
 
@@ -561,6 +568,22 @@
 
 	toglob = add_glob(str, slen);
 
+#ifdef DEBIAN /* patch from OpenBSD */
+	/* remove all escaping backward slashes */
+	escaping = 0;
+	for(i = 0, idx = 0; toglob[i]; i++) {
+		if (toglob[i] == '\\' && !escaping) {
+			escaping = 1;
+			continue;
+		}
+
+		toglob[idx] = toglob[i];
+		idx++;
+		if (escaping) escaping = 0;
+	}
+	toglob[idx] = '\0';
+
+#endif /* DEBIAN */
 	/*
 	 * Convert "foo*" (toglob) to an array of strings (words)
 	 */
@@ -579,8 +602,27 @@
 	XPput(w, NULL);
 	words = (char **) XPclose(w);
 
-	for (nwords = 0; words[nwords]; nwords++)
-		;
+	/* Mon Nov 15 20:39:41 CET 1999 Marcin Dalecki <dalecki@cs.net.pl>:
+	 *
+	 * Count the matches and use this pass to quoteout matches containing
+	 * white spaces or actual input field separators.
+	 */
+	for (nwords = 0; words[nwords]; nwords++) {
+		char *tmp;
+		for (tmp = words[nwords]; *tmp; ++tmp)
+			if (ctype(*tmp, C_IFSWS))
+				break;
+		if(*tmp) {
+			int len = strlen(words[nwords]);
+			tmp = alloc(len + 3, ATEMP);
+			tmp[0] = '"';
+			memcpy(tmp + 1, words[nwords], len);
+			tmp[len + 1] = '"';
+			tmp[len + 2] = '\0';
+			afree(words[nwords], ATEMP);
+			words[nwords] = tmp;
+		}
+	}
 	if (nwords == 1) {
 		struct stat statb;
 
@@ -747,11 +789,23 @@
 	/* Keep going backwards to start of word (has effect of allowing
 	 * one blank after the end of a word)
 	 */
+#ifndef DEBIAN
 	for (; start > 0 && IS_WORDC(buf[start - 1]); start--)
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+	for (; (start > 0 && IS_WORDC(buf[start - 1]))
+		|| (start > 1 && buf[start-2] == '\\'); start--)
+#endif /* DEBIAN */
 		;
 	/* Go forwards to end of word */
+#ifndef DEBIAN
 	for (end = start; end < buflen && IS_WORDC(buf[end]); end++)
 		;
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+	for (end = start; end < buflen && IS_WORDC(buf[end]); end++) {
+		if (buf[end] == '\\' && (end+1) < buflen && buf[end+1] == ' ')
+			end++;
+	}
+#endif /* DEBIAN */
 
 	if (is_commandp) {
 		int iscmd;
@@ -1018,4 +1072,42 @@
 	Xfree(xs, xp);
 }
 
+#ifdef DEBIAN /* patch from OpenBSD */  
+/*
+ * if argument string contains any special characters, they will
+ * be escaped and the result will be put into edit buffer by
+ * keybinding-specific function
+ */
+int
+x_escape(s, len, putbuf_func)
+	const char *s;
+	size_t len;
+	int putbuf_func ARGS((const char *s, size_t len));
+{
+	size_t add, wlen;
+	const char *ifs = str_val(local("IFS", 0));
+	int rval=0;
+
+	for (add = 0, wlen = len; wlen - add > 0; add++) {
+		if (strchr("\\$(){}*&;|<>\"'", s[add]) || strchr(ifs, s[add])) {
+			if (putbuf_func(s, add) != 0) {
+				rval = -1;
+				break;
+			}
+
+			putbuf_func("\\", 1);
+			putbuf_func(&s[add], 1);
+
+			add++;
+			wlen -= add;
+			s += add;
+			add = -1; /* after the increment it will go to 0 */
+		}
+	}
+	if (wlen > 0 && rval == 0)
+		rval = putbuf_func(s, wlen);
+
+	return (rval);
+}
+#endif /* DEBIAN */
 #endif /* EDIT */
diff -ru pdksh-5.2.14/edit.h pdksh-5.2.14-patched/edit.h
--- pdksh-5.2.14/edit.h	1996-08-13 15:30:26.000000000 +0200
+++ pdksh-5.2.14-patched/edit.h	2002-08-09 17:24:13.000000000 +0200
@@ -55,6 +55,9 @@
 int	x_longest_prefix ARGS((int nwords, char *const *words));
 int	x_basename ARGS((const char *s, const char *se));
 void	x_free_words ARGS((int nwords, char **words));
+#ifdef DEBIAN /* patch from OpenBSD */ 
+int	x_escape ARGS((const char *, size_t, int (*)(const char *s, size_t len)));
+#endif /* DEBIAN */
 /* emacs.c */
 int 	x_emacs		ARGS((char *buf, size_t len));
 void 	x_init_emacs	ARGS((void));
diff -ru pdksh-5.2.14/emacs.c pdksh-5.2.14-patched/emacs.c
--- pdksh-5.2.14/emacs.c	1999-07-07 21:43:43.000000000 +0200
+++ pdksh-5.2.14-patched/emacs.c	2002-08-09 17:24:13.000000000 +0200
@@ -138,6 +138,10 @@
 static int	x_e_getc    ARGS((void));
 static void	x_e_putc    ARGS((int c));
 static void	x_e_puts    ARGS((const char *s));
+#ifdef DEBIAN /* patch from OpenBSD */ 
+static int	x_comment   ARGS((int c));
+static int	x_emacs_putbuf	ARGS((const char *s, size_t len));
+#endif /* DEBIAN */
 static int	x_fold_case ARGS((int c));
 static char	*x_lastcp ARGS((void));
 static void	do_complete ARGS((int flags, Comp_type type));
@@ -269,6 +273,9 @@
 	{ XFUNC_transpose,		0, CTRL('T') },
 #endif
 	{ XFUNC_complete,		1, CTRL('[') },
+#ifdef DEBIAN /* patch from OpenBSD */ 
+	{ XFUNC_complete,		0, CTRL('I') },
+#endif /* DEBIAN */
         { XFUNC_comp_list,		1,	'='  },
 	{ XFUNC_enumerate,		1,	'?'  },
         { XFUNC_expand,			1,	'*'  },
@@ -313,6 +320,9 @@
 	 * entries.
 	 */
         { XFUNC_meta2,			1,	'['  },
+#ifdef DEBIAN  /* patch from OpenBSD */ 
+        { XFUNC_meta2,			1,	'O'  },
+#endif /* DEBIAN */
 	{ XFUNC_prev_com,		2,	'A'  },
 	{ XFUNC_next_com,		2,	'B'  },
 	{ XFUNC_mv_forw,		2,	'C'  },
@@ -468,6 +478,23 @@
 	return 0;
 }
 
+#ifdef DEBIAN  /* patch from OpenBSD */ 
+/*
+ * this is used for x_escape() in do_complete()
+ */
+static int
+x_emacs_putbuf(s, len)
+	const char *s;
+	size_t len;
+{
+	int rval;
+
+	if ((rval = x_do_ins(s, len)) != 0)
+		return (rval);
+	return (rval);
+}
+
+#endif /* DEBIAN */
 static int
 x_del_back(c)
 	int c;
@@ -1485,7 +1512,11 @@
 		for (j = 0; j < X_TABSZ; j++)
 			x_tab[i][j] = XFUNC_error;
 	for (i = 0; i < NELEM(x_defbindings); i++)
+#ifndef DEBIAN
 		x_tab[x_defbindings[i].xdb_tab][x_defbindings[i].xdb_char]
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+		x_tab[(unsigned char)x_defbindings[i].xdb_tab][x_defbindings[i].xdb_char]
+#endif /* DEBIAN */
 			= x_defbindings[i].xdb_func;
 
 	x_atab = (char *(*)[X_TABSZ]) alloc(sizeofN(*x_atab, X_NTABS), AEDIT);
@@ -1828,8 +1859,13 @@
 			if (nlen > 0) {
 				x_goto(xbuf + start);
 				x_delete(end - start, FALSE);
+#ifndef DEBIAN
 				words[0][nlen] = '\0';
 				x_ins(words[0]);
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+				x_escape(words[0], nlen, x_emacs_putbuf);
+				x_adjust();
+#endif /* DEBIAN */
 				/* If single match is not a directory, add a
 				 * space to the end...
 				 */
diff -ru pdksh-5.2.14/exec.c pdksh-5.2.14-patched/exec.c
--- pdksh-5.2.14/exec.c	1999-07-13 18:53:46.000000000 +0200
+++ pdksh-5.2.14-patched/exec.c	2002-08-09 17:24:13.000000000 +0200
@@ -76,6 +76,7 @@
 {
 	int i;
 	volatile int rv = 0;
+	volatile int rv_prop = 0; /* rv being propogated or newly generated? */
 	int pv[2];
 	char ** volatile ap;
 	char *s, *cp;
@@ -157,6 +158,7 @@
 
 	  case TPAREN:
 		rv = execute(t->left, flags|XFORK);
+		rv_prop = 1;
 		break;
 
 	  case TPIPE:
@@ -275,6 +277,7 @@
 			rv = execute(t->right, flags & XERROK);
 		else
 			flags |= XERROK;
+		rv_prop = 1;
 		break;
 
 	  case TBANG:
@@ -323,6 +326,7 @@
 			}
 		}
 		rv = 0; /* in case of a continue */
+		rv_prop = 1;
 		if (t->type == TFOR) {
 			while (*ap != NULL) {
 				setstr(global(t->str), *ap++, KSH_UNWIND_ERROR);
@@ -334,6 +338,7 @@
 			for (;;) {
 				if (!(cp = do_selectargs(ap, is_first))) {
 					rv = 1;
+					rv_prop = 0;
 					break;
 				}
 				is_first = FALSE;
@@ -365,6 +370,7 @@
 		rv = 0; /* in case of a continue */
 		while ((execute(t->left, XERROK) == 0) == (t->type == TWHILE))
 			rv = execute(t->right, flags & XERROK);
+		rv_prop = 1;
 		break;
 
 	  case TIF:
@@ -374,6 +380,7 @@
 		rv = execute(t->left, XERROK) == 0 ?
 			execute(t->right->left, flags & XERROK) :
 			execute(t->right->right, flags & XERROK);
+		rv_prop = 1;
 		break;
 
 	  case TCASE:
@@ -386,10 +393,12 @@
 		break;
 	  Found:
 		rv = execute(t->left, flags & XERROK);
+		rv_prop = 1;
 		break;
 
 	  case TBRACE:
 		rv = execute(t->left, flags & XERROK);
+		rv_prop = 1;
 		break;
 
 	  case TFUNCT:
@@ -401,6 +410,7 @@
 		 * (allows "ls -l | time grep foo").
 		 */
 		rv = timex(t, flags & ~XEXEC);
+		rv_prop = 1;
 		break;
 
 	  case TEXEC:		/* an eval'd TCOM */
@@ -428,7 +438,7 @@
 	quitenv();		/* restores IO */
 	if ((flags&XEXEC))
 		unwind(LEXIT);	/* exit child */
-	if (rv != 0 && !(flags & XERROK)) {
+	if (rv != 0 && !rv_prop && !(flags & XERROK)) {
 		if (Flag(FERREXIT))
 			unwind(LERROR);
 		trapsig(SIGERR_);
Only in pdksh-5.2.14-patched: exec.c~
diff -ru pdksh-5.2.14/history.c pdksh-5.2.14-patched/history.c
--- pdksh-5.2.14/history.c	1999-05-10 15:13:06.000000000 +0200
+++ pdksh-5.2.14-patched/history.c	2002-08-09 17:24:13.000000000 +0200
@@ -610,7 +610,18 @@
 {
 	register char **hp = histptr;
 	char *cp;
+	int l;
 
+	/* don't save if command is the same as last one */
+	if (hp >= history && *hp != NULL) {
+		l = strlen(cmd);
+		if (strcmp(*hp, cmd) == 0)
+			return;
+		else if ((cmd[l-1] == '\n')
+				&& (strlen(*hp) == l-1)
+				&& strncmp(*hp, cmd, l - 1) == 0)
+			return;
+	}
 	if (++hp >= history + histsize) { /* remove oldest command */
 		afree((void*)history[0], APERM);
 		memmove(history, history + 1,
@@ -700,9 +711,13 @@
 				nread = fread(hline, 1, LINE, fh);
 				if (nread <= 0)
 					break;
-				hline[nread] = '\0';
+				hline[nread] = '\n';
 			}
-			end = strchr(hline + pos, 0); /* will always succeed */
+			end = strchr(hline + pos, '\n'); /* will always succeed - 0, but not \n!!! */
+			if(end != NULL) /* in case sth put \0 in .history...) */
+				*end = '\0';
+			else
+				end = strchr(hline + pos, '\0'); /* THIS will always succeed */
 			if (contin)
 				histappend(hline + pos, 0);
 			else {
@@ -742,7 +757,7 @@
   if (hname && (fh = fopen(hname, "w")))
   {
     for (i = 0; hp + i <= histptr && hp[i]; i++)
-      fprintf(fh, "%s%c", hp[i], '\0');
+      fprintf(fh, "%s\n", hp[i]);
     fclose(fh);
   }
 }
diff -ru pdksh-5.2.14/io.c pdksh-5.2.14-patched/io.c
--- pdksh-5.2.14/io.c	1999-05-12 15:43:41.000000000 +0200
+++ pdksh-5.2.14-patched/io.c	2002-08-09 17:24:13.000000000 +0200
@@ -516,6 +516,14 @@
 	tp->name = path = (char *) &tp[1];
 	tp->shf = (struct shf *) 0;
 	tp->type = type;
+#ifdef DEBIAN  /* based on patch from OpenBSD */ 
+	shf_snprintf(path, len, "%s/kshXXXXXX", dir);
+	fd = mkstemp(path);
+	if (fd >= 0)
+		tp->shf = shf_fdopen(fd, SHF_WR, (struct shf *) 0);
+	if (fd >= 0)
+		fchmod(fd, 0600);	
+#else /* DEBIAN */
 	while (1) {
 		/* Note that temp files need to fit 8.3 DOS limits */
 		shf_snprintf(path, len, "%s/sh%05u.%03x",
@@ -542,6 +550,7 @@
 			break;
 	}
 	tp->next = NULL;
+#endif /* DEBIAN */
 	tp->pid = procpid;
 
 	tp->next = *tlist;
diff -ru pdksh-5.2.14/jobs.c pdksh-5.2.14-patched/jobs.c
--- pdksh-5.2.14/jobs.c	1999-07-13 18:50:56.000000000 +0200
+++ pdksh-5.2.14-patched/jobs.c	2002-08-09 17:24:13.000000000 +0200
@@ -219,8 +219,7 @@
 static void		check_job ARGS((Job *j));
 static void		put_job ARGS((Job *j, int where));
 static void		remove_job ARGS((Job *j, const char *where));
-static void		kill_job ARGS((Job *j));
-static void	 	fill_command ARGS((char *c, int len, struct op *t));
+static int		kill_job ARGS((Job *j, int sig));
 
 /* initialize job control */
 void
@@ -294,10 +293,17 @@
 				    && procpid == kshpid)))))
 		{
 			killed = 1;
-			killpg(j->pgrp, SIGHUP);
+			if (j->pgrp == 0)
+				kill_job(j, SIGHUP);
+			else
+				killpg(j->pgrp, SIGHUP);
 #ifdef JOBS
-			if (j->state == PSTOPPED)
-				killpg(j->pgrp, SIGCONT);
+			if (j->state == PSTOPPED) {
+				if (j->pgrp == 0)
+					kill_job(j, SIGCONT);
+				else
+					killpg(j->pgrp, SIGCONT);
+			}
 #endif /* JOBS */
 		}
 	}
@@ -497,7 +503,7 @@
 		put_job(j, PJ_PAST_STOPPED);
 	}
 
-	fill_command(p->command, sizeof(p->command), t);
+	snptreef(p->command, sizeof(p->command), "%T", t);
 
 	/* create child process */
 	forksleep = 1;
@@ -508,7 +514,7 @@
 		forksleep <<= 1;
 	}
 	if (i < 0) {
-		kill_job(j);
+		kill_job(j, SIGKILL);
 		remove_job(j, "fork failed");
 #ifdef NEED_PGRP_SYNC
 		if (j_sync_open) {
@@ -823,11 +829,10 @@
 	}
 
 	if (j->pgrp == 0) {	/* started when !Flag(FMONITOR) */
-		for (p=j->proc_list; p != (Proc *) 0; p = p->next)
-			if (kill(p->pid, sig) < 0) {
-				bi_errorf("%s: %s", cp, strerror(errno));
-				rv = 1;
-			}
+		if (kill_job(j, sig) < 0) {
+			bi_errorf("%s: %s", cp, strerror(errno));
+			rv = 1;
+		}
 	} else {
 #ifdef JOBS
 		if (j->state == PSTOPPED && (sig == SIGTERM || sig == SIGHUP))
@@ -1825,50 +1830,17 @@
  *
  * If jobs are compiled in then this routine expects sigchld to be blocked.
  */
-static void
-kill_job(j)
+static int
+kill_job(j, sig)
 	Job	*j;
+	int	sig;
 {
 	Proc	*p;
+	int	rval = 0;
 
 	for (p = j->proc_list; p != (Proc *) 0; p = p->next)
 		if (p->pid != 0)
-			(void) kill(p->pid, SIGKILL);
-}
-
-/* put a more useful name on a process than snptreef does (in certain cases) */
-static void
-fill_command(c, len, t)
-	char		*c;
-	int		len;
-	struct op	*t;
-{
-	int		alen;
-	char		**ap;
-
-	if (t->type == TEXEC || t->type == TCOM) {
-		/* Causes problems when set -u is in effect, can also
-		   cause problems when array indices evaluated (may have
-		   side effects, eg, assignment, incr, etc.)
-		if (t->type == TCOM)
-			ap = eval(t->args, DOBLANK|DONTRUNCOMMAND);
-		else
-		*/
-		ap = t->args;
-		--len; /* save room for the null */
-		while (len > 0 && *ap != (char *) 0) {
-			alen = strlen(*ap);
-			if (alen > len)
-				alen = len;
-			memcpy(c, *ap, alen);
-			c += alen;
-			len -= alen;
-			if (len > 0) {
-				*c++ = ' '; len--;
-			}
-			ap++;
-		}
-		*c = '\0';
-	} else
-		snptreef(c, len, "%T", t);
+			if (kill(p->pid, sig) < 0)
+				rval = -1;
+	return rval;
 }
diff -ru pdksh-5.2.14/shf.c pdksh-5.2.14-patched/shf.c
--- pdksh-5.2.14/shf.c	1999-05-12 16:13:27.000000000 +0200
+++ pdksh-5.2.14-patched/shf.c	2002-08-09 17:24:13.000000000 +0200
@@ -355,7 +355,6 @@
 		shf->rp = nbuf + (shf->rp - shf->buf);
 		shf->wp = nbuf + (shf->wp - shf->buf);
 		shf->rbsize += shf->wbsize;
-		shf->wbsize += shf->wbsize;
 		shf->wnleft += shf->wbsize;
 		shf->wbsize *= 2;
 		shf->buf = nbuf;
diff -ru pdksh-5.2.14/table.h pdksh-5.2.14-patched/table.h
--- pdksh-5.2.14/table.h	1999-04-16 19:58:12.000000000 +0200
+++ pdksh-5.2.14-patched/table.h	2002-08-09 17:24:13.000000000 +0200
@@ -168,6 +168,7 @@
 #define V_TMOUT			15
 #define V_TMPDIR		16
 #define V_LINENO		17
+#define V_EDITMODE		18
 
 /* values for set_prompt() */
 #define PS1	0		/* command */
diff -ru pdksh-5.2.14/var.c pdksh-5.2.14-patched/var.c
--- pdksh-5.2.14/var.c	1999-05-11 16:27:02.000000000 +0200
+++ pdksh-5.2.14-patched/var.c	2002-08-09 17:24:13.000000000 +0200
@@ -94,6 +94,7 @@
 #endif /* HISTORY */
 #ifdef EDIT
 			{ "EDITOR",		V_EDITOR },
+			{ "EDITMODE",		V_EDITMODE },
 			{ "VISUAL",		V_VISUAL },
 #endif /* EDIT */
 #ifdef KSH
@@ -110,7 +111,7 @@
 	int i;
 	struct tbl *tp;
 
-	tinit(&specials, APERM, 32); /* must be 2^n (currently 17 specials) */
+	tinit(&specials, APERM, 32); /* must be 2^n (currently 18 specials) */
 	for (i = 0; names[i].name; i++) {
 		tp = tenter(&specials, names[i].name, hash(names[i].name));
 		tp->flag = DEFINED|ISSET;
@@ -353,7 +354,9 @@
 	const char *s;
 	int error_ok;
 {
-	if (vq->flag & RDONLY) {
+	int no_ro_check = error_ok & 0x4;
+	error_ok &= ~0x4;
+	if ((vq->flag & RDONLY) && !no_ro_check) {
 		warningf(TRUE, "%s: is read only", vq->name);
 		if (!error_ok)
 			errorf(null);
@@ -715,13 +718,13 @@
 	if (val != NULL) {
 		if (vp->flag&INTEGER) {
 			/* do not zero base before assignment */
-			setstr(vp, val, KSH_UNWIND_ERROR);
+			setstr(vp, val, KSH_UNWIND_ERROR | 0x4);
 			/* Done after assignment to override default */
 			if (base > 0)
 				vp->type = base;
 		} else
 			/* setstr can't fail (readonly check already done) */
-			setstr(vp, val, KSH_RETURN_ERROR);
+			setstr(vp, val, KSH_RETURN_ERROR | 0x4);
 	}
 
 	/* only x[0] is ever exported, so use vpbase */
@@ -1013,11 +1016,15 @@
 #endif /* HISTORY */
 #ifdef EDIT
 	  case V_VISUAL:
-		set_editmode(str_val(vp));
+		if (!(global("EDITMODE")->flag & ISSET))
+			set_editmode(str_val(vp));
 		break;
 	  case V_EDITOR:
-		if (!(global("VISUAL")->flag & ISSET))
-			set_editmode(str_val(vp));
+		if (!(global("EDITMODE")->flag & ISSET))
+			if(!(global("VISUAL")->flag & ISSET))
+				set_editmode(str_val(vp));
+	  case V_EDITMODE:
+		set_editmode(str_val(vp));
 		break;
 	  case V_COLUMNS:
 		if ((x_cols = intval(vp)) <= MIN_COLS)
diff -ru pdksh-5.2.14/vi.c pdksh-5.2.14-patched/vi.c
--- pdksh-5.2.14/vi.c	1999-05-18 16:57:44.000000000 +0200
+++ pdksh-5.2.14-patched/vi.c	2002-08-09 17:24:13.000000000 +0200
@@ -63,6 +63,9 @@
 static void	vi_pprompt ARGS((int full));
 static void	vi_error ARGS((void));
 static void	vi_macro_reset ARGS((void));
+#ifdef DEBIAN   /* patch from OpenBSD */ 
+static int	x_vi_putbuf	ARGS((const char *s, size_t len));
+#endif /* DEBIAN */
 
 #define C_	0x1		/* a valid command that isn't a M_, E_, U_ */
 #define M_	0x2		/* movement command (h, l, etc.) */
@@ -1470,6 +1473,19 @@
 	holdlen = 0;
 }
 
+#ifdef DEBIAN /* patch from OpenBSD */ 
+/*
+ * this is used for calling x_escape() in complete_word()
+ */
+static int
+x_vi_putbuf(s, len)
+	const char *s;
+	size_t len;
+{
+	return putbuf(s, len, 0);
+}
+
+#endif /* DEBIAN */
 static int
 putbuf(buf, len, repl)
 	const char *buf;
@@ -1965,7 +1981,11 @@
 	del_range(start, end);
 	es->cursor = start;
 	for (i = 0; i < nwords; ) {
+#ifndef DEBIAN
 		if (putbuf(words[i], (int) strlen(words[i]), 0) != 0) {
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+		if (x_escape(words[i], strlen(words[i]), x_vi_putbuf) != 0) {
+#endif /* DEBIAN */
 			rval = -1;
 			break;
 		}
@@ -2068,9 +2088,18 @@
 	buf = save_edstate(es);
 	del_range(start, end);
 	es->cursor = start;
+#ifndef DEBIAN
 	if (putbuf(match, match_len, 0) != 0)
 		rval = -1;
 	else if (is_unique) {
+#else /* DEBIAN */ /* patch from OpenBSD */ 
+
+	/* escape all shell-sensitive characters and put the result into
+	 * command buffer */
+	rval = x_escape(match, match_len, x_vi_putbuf);
+
+	if (rval == 0 && is_unique) {
+#endif /* DEBIAN */
 		/* If exact match, don't undo.  Allows directory completions
 		 * to be used (ie, complete the next portion of the path).
 		 */
