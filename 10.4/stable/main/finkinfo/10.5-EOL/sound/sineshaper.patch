diff -urN sineshaper-0.4.2-orig/src/common/dssiuiclient.hpp sineshaper-0.4.2/src/common/dssiuiclient.hpp
--- sineshaper-0.4.2-orig/src/common/dssiuiclient.hpp	2008-10-25 19:09:50.000000000 +0200
+++ sineshaper-0.4.2/src/common/dssiuiclient.hpp	2008-10-25 19:42:23.000000000 +0200
@@ -32,7 +32,7 @@
 #include <gtkmm.h>
 #include <libglademm.h>
 #include <lo/lo.h>
-#include <sigc++/sigc++.h>
+#include <sigc++-1.2/sigc++/sigc++.h>
 
 
 using namespace Glib;
@@ -99,13 +99,13 @@
   // Host to UI
   /** This signal is emitted when the host sends a new control value.
       The parameters are the control port number and the new control value. */
-  signal<void, int, float> control_received;
+  sigc::signal<void, int, float> control_received;
   /** Emitted when the host sends a program change. The parameters are the 
       bank and program numbers. */
-  signal<void, int, int> program_received;
+  sigc::signal<void, int, int> program_received;
   /** Emitted when the host sends a configuration value. The parameters are
       the configuration key and the configuration value. */
-  signal<void, const string, const string> configure_received;
+  sigc::signal<void, const string, const string> configure_received;
   /** Emitted when the host wants the UI to be visible. A DSSI GUI should not
       show any windows until this signal is emitted. */
   Dispatcher show_received;
@@ -134,7 +134,7 @@
   void* allocate_shared_memory(int bytes);
   
   /** Emitted when the plugin has attached to the shared memory segment. */
-  signal<void> plugin_attached;
+  sigc::signal<void> plugin_attached;
   
   /** Returns true if the plugin has attached to the shared memory segment. */
   bool plugin_has_attached();
diff -urN sineshaper-0.4.2-orig/src/sineshaper/sineshapergui.hpp sineshaper-0.4.2/src/sineshaper/sineshapergui.hpp
--- sineshaper-0.4.2-orig/src/sineshaper/sineshapergui.hpp	2008-10-25 19:09:50.000000000 +0200
+++ sineshaper-0.4.2/src/sineshaper/sineshapergui.hpp	2008-10-25 19:43:46.000000000 +0200
@@ -31,11 +31,11 @@
   void program_selected(int bank, int program);
   
   /** This signal is emitted when the user selects a program in the GUI. */
-  signal<void, unsigned long, unsigned long> signal_select_program;
+  sigc::signal<void, unsigned long, unsigned long> signal_select_program;
   
   /** This signal is emitted when the user has edited the programs and 
       the plugin needs to reload the file with the user presets. */
-  signal<void> signal_programs_changed;
+  sigc::signal<void> signal_programs_changed;
   
 protected:
   
