Info2: <<
Package: sql-abstract-pm%type_pkg[perl]
Version: 1.72
Revision: 1
Distribution: (%type_pkg[perl] = 586) 10.4, (%type_pkg[perl] = 586) 10.5, (%type_pkg[perl] = 5100) 10.5, (%type_pkg[perl] = 5100) 10.6
###
Source: mirror:cpan:authors/id/F/FR/FREW/SQL-Abstract-%v.tar.gz
Source-MD5: ca64d0e803eafa040e7c712afe482c94
###
BuildDepends: <<
	test-simple-pm%type_pkg[perl] (>= 0.92-1),
	test-deep-pm%type_pkg[perl],
	test-exception-pm,
	test-warn-pm%type_pkg[perl]
<<
Depends: <<
	class-accessor-grouped-pm%type_pkg[perl] (>= 0.10002-1),
	hash-merge-pm,
	getopt-long-descriptive-pm,
	perl%type_pkg[perl]-core
<<
Type: perl (5.8.6 5.8.8 5.10.0)
UpdatePOD: true
###
PatchScript: <<
	tail -n 7 lib/SQL/Abstract.pm > LICENSE

	# disable inappropriate silliness for packaging environment
	# Module::Install::AutoInstall specifically says *not* to put
	# this in Makefile.PL!
	perl -pi -e 's/(auto_install)/#\1/'g Makefile.PL
<<
InfoTest: <<
	TestDepends: <<
		test-exception-pm,
		test-warn-pm%type_pkg[perl]
	<<
<<
InstallScript: <<
	%{default_script}
	mv %i/share/man %i/lib/perl5/%type_raw[perl]
<<
DocFiles: Changes LICENSE
###
Description: Generate SQL from Perl data structures
DescDetail: <<
  This module was inspired by the excellent DBIx::Abstract. However, in
  using that module I found that what I really wanted to do was generate
  SQL, but still retain complete control over my statement handles and use
  the DBI interface. So, I set out to create an abstract SQL generation
  module.
<<
DescPackaging: <<
	Former Maintainer: degraw <degraw@users.sourceforge.net>
<<
###
License: Artistic/GPL
Maintainer: Daniel Macks <dmacks@netspace.org>
Homepage: http://search.cpan.org/dist/SQL-Abstract
<<
