diff -uNr gcc-4.5.1/gcc/config/i386/i386.c gcc-4.5.1.patched/gcc/config/i386/i386.c
--- gcc-4.5.1/gcc/config/i386/i386.c	2010-07-22 02:42:02.000000000 -0400
+++ gcc-4.5.1.patched/gcc/config/i386/i386.c	2010-08-10 19:16:23.000000000 -0400
@@ -4991,7 +4991,8 @@
    case, we return the original mode and warn ABI change if CUM isn't
    NULL.  */
 
-static enum machine_mode
+enum machine_mode type_natural_mode (const_tree, CUMULATIVE_ARGS *);
+enum machine_mode
 type_natural_mode (const_tree type, CUMULATIVE_ARGS *cum)
 {
   enum machine_mode mode = TYPE_MODE (type);
@@ -5122,7 +5123,9 @@
    See the x86-64 PS ABI for details.
 */
 
-static int
+int classify_argument (enum machine_mode, const_tree,
+                       enum x86_64_reg_class [MAX_CLASSES], int);
+int
 classify_argument (enum machine_mode mode, const_tree type,
 		   enum x86_64_reg_class classes[MAX_CLASSES], int bit_offset)
 {
@@ -5503,7 +5506,8 @@
 
 /* Examine the argument and return set number of register required in each
    class.  Return 0 iff parameter should be passed in memory.  */
-static int
+int examine_argument (enum machine_mode, const_tree, int, int *, int *);
+int
 examine_argument (enum machine_mode mode, const_tree type, int in_return,
 		  int *int_nregs, int *sse_nregs)
 {
@@ -6184,7 +6188,8 @@
 
 /* Return true when TYPE should be 128bit aligned for 32bit argument passing
    ABI.  */
-static bool
+bool contains_aligned_value_p (const_tree);
+bool
 contains_aligned_value_p (const_tree type)
 {
   enum machine_mode mode = TYPE_MODE (type);
diff -uNr gcc-4.5.1/libjava/configure gcc-4.5.1.patched/libjava/configure
--- gcc-4.5.1/libjava/configure	2010-07-31 05:34:58.000000000 -0400
+++ gcc-4.5.1.patched/libjava/configure	2010-08-10 19:16:23.000000000 -0400
@@ -1610,6 +1610,8 @@
                           default=yes
   --enable-java-maintainer-mode
                           allow rebuilding of .class and .h files
+  --enable-libjava-multilib
+                          build libjava as multilib
   --disable-dependency-tracking  speeds up one-time build
   --enable-dependency-tracking   do not reject slow dependency extractors
   --enable-maintainer-mode  enable make rules and dependencies not useful
@@ -3347,6 +3349,16 @@
 fi
 
 
+# Check whether --enable-libjava-multilib was given.
+if test "${enable_libjava_multilib+set}" = set; then
+  enableval=$enable_libjava_multilib;
+fi
+
+if test "$enable_libjava_multilib" = no; then
+  multilib=no
+  ac_configure_args="$ac_configure_args --disable-multilib"
+fi
+
 # It may not be safe to run linking tests in AC_PROG_CC/AC_PROG_CXX.
 
 
diff -uNr gcc-4.5.1/libjava/configure.ac gcc-4.5.1.patched/libjava/configure.ac
--- gcc-4.5.1/libjava/configure.ac	2010-07-15 08:05:56.000000000 -0400
+++ gcc-4.5.1.patched/libjava/configure.ac	2010-08-10 19:16:23.000000000 -0400
@@ -139,6 +139,13 @@
 	[allow rebuilding of .class and .h files]))
 AM_CONDITIONAL(JAVA_MAINTAINER_MODE, test "$enable_java_maintainer_mode" = yes)
 
+AC_ARG_ENABLE(libjava-multilib,
+	AS_HELP_STRING([--enable-libjava-multilib], [build libjava as multilib]))
+if test "$enable_libjava_multilib" = no; then
+  multilib=no
+  ac_configure_args="$ac_configure_args --disable-multilib"
+fi
+
 # It may not be safe to run linking tests in AC_PROG_CC/AC_PROG_CXX.
 GCC_NO_EXECUTABLES
 
