diff -ru SDL-1.2.14/sdl.m4 SDL-1.2.14-patched//sdl.m4
--- SDL-1.2.14/sdl.m4	2009-10-13 01:07:20.000000000 +0200
+++ SDL-1.2.14-patched//sdl.m4	2010-05-10 23:58:38.000000000 +0200
@@ -5,6 +5,8 @@
 # stolen from Manish Singh
 # Shamelessly stolen from Owen Taylor
 
+# serial 1
+
 dnl AM_PATH_SDL([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
 dnl Test for SDL, and define SDL_CFLAGS and SDL_LIBS
 dnl
diff -ru SDL-1.2.14/src/cpuinfo/SDL_cpuinfo.c SDL-1.2.14-patched//src/cpuinfo/SDL_cpuinfo.c
--- SDL-1.2.14/src/cpuinfo/SDL_cpuinfo.c	2009-10-13 01:07:14.000000000 +0200
+++ SDL-1.2.14-patched//src/cpuinfo/SDL_cpuinfo.c	2010-05-10 23:58:34.000000000 +0200
@@ -26,7 +26,7 @@
 #include "SDL.h"
 #include "SDL_cpuinfo.h"
 
-#if defined(__MACOSX__) && defined(__ppc__)
+#if defined(__MACOSX__) && (defined(__ppc__) || defined(__ppc64__))
 #include <sys/sysctl.h> /* For AltiVec check */
 #elif SDL_ALTIVEC_BLITTERS && HAVE_SETJMP
 #include <signal.h>
@@ -148,67 +148,77 @@
 	int features = 0;
 #if defined(__GNUC__) && defined(i386)
 	__asm__ (
-"        movl    %%ebx,%%edi\n"
 "        xorl    %%eax,%%eax         # Set up for CPUID instruction    \n"
+"        pushl   %%ebx                                                 \n"
 "        cpuid                       # Get and save vendor ID          \n"
+"        popl    %%ebx                                                 \n"
 "        cmpl    $1,%%eax            # Make sure 1 is valid input for CPUID\n"
 "        jl      1f                  # We dont have the CPUID instruction\n"
 "        xorl    %%eax,%%eax                                           \n"
 "        incl    %%eax                                                 \n"
+"        pushl   %%ebx                                                 \n"
 "        cpuid                       # Get family/model/stepping/features\n"
+"        popl    %%ebx                                                 \n"
 "        movl    %%edx,%0                                              \n"
 "1:                                                                    \n"
-"        movl    %%edi,%%ebx\n"
 	: "=m" (features)
 	:
-	: "%eax", "%ecx", "%edx", "%edi"
+	: "%eax", "%ecx", "%edx"
 	);
 #elif defined(__GNUC__) && defined(__x86_64__)
 	__asm__ (
-"        movq    %%rbx,%%rdi\n"
 "        xorl    %%eax,%%eax         # Set up for CPUID instruction    \n"
+"        pushq   %%rbx                                                 \n"
 "        cpuid                       # Get and save vendor ID          \n"
+"        popq    %%rbx                                                 \n"
 "        cmpl    $1,%%eax            # Make sure 1 is valid input for CPUID\n"
 "        jl      1f                  # We dont have the CPUID instruction\n"
 "        xorl    %%eax,%%eax                                           \n"
 "        incl    %%eax                                                 \n"
+"        pushq   %%rbx                                                 \n"
 "        cpuid                       # Get family/model/stepping/features\n"
+"        popq    %%rbx                                                 \n"
 "        movl    %%edx,%0                                              \n"
 "1:                                                                    \n"
-"        movq    %%rdi,%%rbx\n"
 	: "=m" (features)
 	:
-	: "%rax", "%rbx", "%rcx", "%rdx", "%rdi"
+	: "%rax", "%rcx", "%rdx"
 	);
 #elif (defined(_MSC_VER) && defined(_M_IX86)) || defined(__WATCOMC__)
 	__asm {
         xor     eax, eax            ; Set up for CPUID instruction
+        push    ebx
         cpuid                       ; Get and save vendor ID
+        pop     ebx
         cmp     eax, 1              ; Make sure 1 is valid input for CPUID
         jl      done                ; We dont have the CPUID instruction
         xor     eax, eax
         inc     eax
+        push    ebx
         cpuid                       ; Get family/model/stepping/features
+        pop     ebx
         mov     features, edx
 done:
 	}
 #elif defined(__sun) && (defined(__i386) || defined(__amd64))
 	    __asm(
-"        movl    %ebx,%edi\n"
 "        xorl    %eax,%eax         \n"
+"        pushl   %ebx              \n"
 "        cpuid                     \n"
+"        popl    %ebx              \n"
 "        cmpl    $1,%eax           \n"
 "        jl      1f                \n"
 "        xorl    %eax,%eax         \n"
 "        incl    %eax              \n"
+"        pushl   %ebx              \n"
 "        cpuid                     \n"
+"        popl    %ebx              \n"
 #ifdef __i386
 "        movl    %edx,-8(%ebp)     \n"
 #else
 "        movl    %edx,-8(%rbp)     \n"
 #endif
 "1:                                \n"
-"        movl    %edi,%ebx\n" );
 #endif
 	return features;
 }
@@ -218,63 +228,73 @@
 	int features = 0;
 #if defined(__GNUC__) && defined(i386)
 	__asm__ (
-"        movl    %%ebx,%%edi\n"
 "        movl    $0x80000000,%%eax   # Query for extended functions    \n"
+"        pushl   %%ebx                                                 \n"
 "        cpuid                       # Get extended function limit     \n"
+"        popl    %%ebx                                                 \n"
 "        cmpl    $0x80000001,%%eax                                     \n"
 "        jl      1f                  # Nope, we dont have function 800000001h\n"
 "        movl    $0x80000001,%%eax   # Setup extended function 800000001h\n"
+"        pushl   %%ebx                                                 \n"
 "        cpuid                       # and get the information         \n"
+"        popl    %%ebx                                                 \n"
 "        movl    %%edx,%0                                              \n"
 "1:                                                                    \n"
-"        movl    %%edi,%%ebx\n"
 	: "=m" (features)
 	:
-	: "%eax", "%ecx", "%edx", "%edi"
+	: "%eax", "%ecx", "%edx"
 	);
 #elif defined(__GNUC__) && defined (__x86_64__)
 	__asm__ (
-"        movq    %%rbx,%%rdi\n"
 "        movl    $0x80000000,%%eax   # Query for extended functions    \n"
+"        pushq   %%rbx                                                 \n"
 "        cpuid                       # Get extended function limit     \n"
+"        popq    %%rbx                                                 \n"
 "        cmpl    $0x80000001,%%eax                                     \n"
 "        jl      1f                  # Nope, we dont have function 800000001h\n"
 "        movl    $0x80000001,%%eax   # Setup extended function 800000001h\n"
+"        pushq   %%rbx                                                 \n"
 "        cpuid                       # and get the information         \n"
+"        popq    %%rbx                                                 \n"
 "        movl    %%edx,%0                                              \n"
 "1:                                                                    \n"
-"        movq    %%rdi,%%rbx\n"
 	: "=m" (features)
 	:
-	: "%rax", "%rbx", "%rcx", "%rdx", "%rdi"
+	: "%rax", "%rcx", "%rdx"
 	);
 #elif (defined(_MSC_VER) && defined(_M_IX86)) || defined(__WATCOMC__)
 	__asm {
         mov     eax,80000000h       ; Query for extended functions
+        push    ebx
         cpuid                       ; Get extended function limit
+        pop     ebx
         cmp     eax,80000001h
         jl      done                ; Nope, we dont have function 800000001h
         mov     eax,80000001h       ; Setup extended function 800000001h
+        push    ebx
         cpuid                       ; and get the information
+        pop     ebx
         mov     features,edx
 done:
 	}
 #elif defined(__sun) && ( defined(__i386) || defined(__amd64) )
 	    __asm (
-"        movl    %ebx,%edi\n"
 "        movl    $0x80000000,%eax \n"
+"        pushl   %ebx             \n"
 "        cpuid                    \n"
+"        popl    %ebx             \n"
 "        cmpl    $0x80000001,%eax \n"
 "        jl      1f               \n"
 "        movl    $0x80000001,%eax \n"
+"        pushl   %ebx             \n"
 "        cpuid                    \n"
+"        popl    %ebx             \n"
 #ifdef __i386
 "        movl    %edx,-8(%ebp)   \n"
 #else
 "        movl    %edx,-8(%rbp)   \n"
 #endif
 "1:                               \n"
-"        movl    %edi,%ebx\n"
 	    );
 #endif
 	return features;
@@ -339,7 +359,7 @@
 static __inline__ int CPU_haveAltiVec(void)
 {
 	volatile int altivec = 0;
-#if defined(__MACOSX__) && defined(__ppc__)
+#if defined(__MACOSX__) && (defined(__ppc__) || defined(__ppc64__))
 	int selectors[2] = { CTL_HW, HW_VECTORUNIT }; 
 	int hasVectorUnit = 0; 
 	size_t length = sizeof(hasVectorUnit); 
diff -ru SDL-1.2.14/src/joystick/SDL_joystick.c SDL-1.2.14-patched//src/joystick/SDL_joystick.c
--- SDL-1.2.14/src/joystick/SDL_joystick.c	2009-10-13 01:07:13.000000000 +0200
+++ SDL-1.2.14-patched//src/joystick/SDL_joystick.c	2010-05-10 23:58:32.000000000 +0200
@@ -113,6 +113,7 @@
 	/* Create and initialize the joystick */
 	joystick = (SDL_Joystick *)SDL_malloc((sizeof *joystick));
 	if ( !joystick ) {
+		SDL_OutOfMemory();
 		return(NULL);
 	}
 
diff -ru SDL-1.2.14/src/stdlib/SDL_iconv.c SDL-1.2.14-patched//src/stdlib/SDL_iconv.c
--- SDL-1.2.14/src/stdlib/SDL_iconv.c	2009-10-13 01:07:13.000000000 +0200
+++ SDL-1.2.14-patched//src/stdlib/SDL_iconv.c	2010-05-10 23:58:33.000000000 +0200
@@ -383,7 +383,7 @@
 						*/
 						ch = UNKNOWN_UNICODE;
 					} else {
-						if ( (p[0] & 0xCE) == 0xC0 ) {
+						if ( (p[0] & 0xDE) == 0xC0 ) {
 							overlong = SDL_TRUE;
 						}
 						ch = (Uint32)(p[0] & 0x1F);
diff -ru SDL-1.2.14/src/video/quartz/SDL_QuartzGL.m SDL-1.2.14-patched//src/video/quartz/SDL_QuartzGL.m
--- SDL-1.2.14/src/video/quartz/SDL_QuartzGL.m	2009-10-13 01:07:14.000000000 +0200
+++ SDL-1.2.14-patched//src/video/quartz/SDL_QuartzGL.m	2010-05-10 23:58:30.000000000 +0200
@@ -153,7 +153,7 @@
      * http://lists.apple.com/archives/mac-opengl/2006/Jan/msg00080.html )
      */
     if ( this->gl_config.swap_control >= 0 ) {
-        long value;
+        GLint value;
         value = this->gl_config.swap_control;
         [ gl_context setValues: &value forParameter: NSOpenGLCPSwapInterval ];
     }
@@ -175,7 +175,7 @@
     #endif
 
     {
-        long cache_max = 64;
+        GLint cache_max = 64;
         CGLContextObj ctx = QZ_GetCGLContextObj(gl_context);
         CGLSetParameter (ctx, GLI_SUBMIT_FUNC_CACHE_MAX, &cache_max);
         CGLSetParameter (ctx, GLI_ARRAY_FUNC_CACHE_MAX, &cache_max);
@@ -261,7 +261,7 @@
         }
         case SDL_GL_ACCELERATED_VISUAL:
         {
-            long val;
+            GLint val;
 	    /* FIXME: How do we get this information here?
             [fmt getValues: &val forAttribute: NSOpenGLPFAAccelerated attr forVirtualScreen: 0];
 	    */
@@ -271,7 +271,7 @@
         }
         case SDL_GL_SWAP_CONTROL:
         {
-            long val;
+            GLint val;
             [ gl_context getValues: &val forParameter: NSOpenGLCPSwapInterval ];
             *value = val;
             return 0;
diff -ru SDL-1.2.14/src/video/quartz/SDL_QuartzVideo.m SDL-1.2.14-patched//src/video/quartz/SDL_QuartzVideo.m
--- SDL-1.2.14/src/video/quartz/SDL_QuartzVideo.m	2009-10-17 09:45:42.000000000 +0200
+++ SDL-1.2.14-patched//src/video/quartz/SDL_QuartzVideo.m	2010-05-10 23:58:29.000000000 +0200
@@ -24,7 +24,7 @@
 #include "SDL_QuartzVideo.h"
 #include "SDL_QuartzWindow.h"
 
-#ifdef __powerpc__  /* I'm gambling they fixed this by 10.4. --ryan. */
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1060   /* Fixed in Snow Leopard */
 /*
     Add methods to get at private members of NSScreen. 
     Since there is a bug in Apple's screen switching code
@@ -479,6 +479,8 @@
     NSRect contentRect;
     CGDisplayFadeReservationToken fade_token = kCGDisplayFadeReservationInvalidToken;
 
+    contentRect = NSMakeRect (0, 0, width, height);
+
     /* Fade to black to hide resolution-switching flicker (and garbage
        that is displayed by a destroyed OpenGL context, if applicable) */
     if ( CGAcquireDisplayFadeReservation (5, &fade_token) == kCGErrorSuccess ) {
diff -ru SDL-1.2.14/src/video/quartz/SDL_QuartzWM.m SDL-1.2.14-patched//src/video/quartz/SDL_QuartzWM.m
--- SDL-1.2.14/src/video/quartz/SDL_QuartzWM.m	2009-10-13 01:07:14.000000000 +0200
+++ SDL-1.2.14-patched//src/video/quartz/SDL_QuartzWM.m	2010-05-10 23:58:21.000000000 +0200
@@ -151,14 +151,16 @@
 /* Convert Cocoa screen coordinate to Cocoa window coordinate */
 void QZ_PrivateGlobalToLocal (_THIS, NSPoint *p) {
 
-    *p = [ qz_window convertScreenToBase:*p ];
+	if ( ! CGDisplayIsCaptured (display_id) )
+		*p = [ qz_window convertScreenToBase:*p ];
 }
 
 
 /* Convert Cocoa window coordinate to Cocoa screen coordinate */
 void QZ_PrivateLocalToGlobal (_THIS, NSPoint *p) {
 
-    *p = [ qz_window convertBaseToScreen:*p ];
+	if ( ! CGDisplayIsCaptured (display_id) )
+		*p = [ qz_window convertBaseToScreen:*p ];
 }
 
 /* Convert SDL coordinate to Cocoa coordinate */
