#
# lua51.info
#
# Fink package file, maintained by Asko Kauppi <akauppi@gmail.com> and Jean-Louis Fuchs <ganwell@fangorn.ch>
#
# Home:
#   svn://slugak.dyndns.org/public/lua-fink/
#
# Packages:
#   lua51           The binary 'lua51' (Lua 5.1.x) interpreter, can co-exist with other Lua versions
#   lua51-dev       Lua development headers; conflicts with any other development versions
#   lua51-shlibs    Lua 5.1 shared libraries, can co-exist
#   lua51-sdl       Same as 'lua51' but with Cocoa initialization, allowing SDL Module to be used.
#
# Todo:
#   - Get approved to fink unstable (and eventually stable).
#
# Notes:
#   - The "-ev" parameter to scripts is giving quite a lot of (unnecessary?) build output.
#     Fink policy seems to be to have it (is this stated somewhere?); personally I would be
#     okay with just "-e".
#
# History:
#   AKa 29.7.2006: 5.1.1-5 Removed "MACOSX_DEPLOYMENT_TARGET" settings (fink does them)
#   AKa 19.7.2006: Removed "lua" package, removed "-bin" from "lua51-bin" and "lua51-sdl-bin"
#   AKa 10.7.2006: Applying 'lundump' patch, to allow loading of precompiled scripts regardless of
#                  endianness (Intel/PowerPC) issues. (should be a standard feature in future Lua versions,
#                  hopefully...)
#   AKa 3.7.2006: Trying to support OS X 10.3, too (without readline support); NOT TESTED YET
#                 Added #!/bin/sh -ex to make the scripts run as scripts.
#   AKa 11.6.2006: Using 5.1.1 now
#   AKa 2.6.2006: Preliminary tested on Intel mac (thanks, Janne!); upgraded to use 5.1.1-rc2
#   AKa 24.5.2006: Changed 'lua-dev' -> 'lua51-dev'; Added Jean-Louis as other maintainer
#   AKa 10.5.2006: Added 'lua51-sdl-bin' package
#   AKa 9.5.2006: Updated to include "-shlibs" and match Fink guidelines
#                 http://fink.sourceforge.net/doc/packaging/policy.php as best I can.
#   AKa 30.4.2006: Fighting with dynamic library support... :/
#   AKa 23.4.2006: Updated to Lua 5.1 official
#

# --- lua51 (main package, Lua 5.1 'lua51' interpreter) ---
#
# This package can live with other Lua interpreters, s.a. 'lua' (old 5.0 version), potential 'lua52' etc.
#
# Pure script packages can depend on 'lua51' package, making sure they have the version of Lua available
# that they were best tested with (or, they could depend on 'lua' >= 5.1 but that is more risky...)
#
# Note: This package is NOT dependent on 'lua51-shlibs', the Lua code is baked-in into the interpreter itself
#       (can be done both ways, this seems to be currently preferred in 5.1 and is simpler)
#
# Note: Do NOT use %v (version) automatically in place of each "5.1.1" and such there is; Lua 5.2 will have
#	%v=5.2, but 5.2.0 is needed as the "long version".
#
Package: lua51
Version: 5.1.1
Revision: 1

# NOTE: There's a problem with any Lua "-rcX" packages. Fink expects the root dir of the extracted contents
#       to match the tar name, which in this case it does not ("5.1.1" is okay, "5.1.1-rc2" is not).
#       One way to solve -- wait until RC's become final.
# 
#Source: http://www.lua.org/work/lua-5.1.1-rc2.tar.gz
#Source-MD5: e955f96b0e6b0343ca3914a2cd613d13

Source: http://www.lua.org/ftp/lua-%v.tar.gz
Source-MD5: 22f4f912f20802c11006fe9b84d5c461

# ---
# 'lundump.patch' is directly from Lua mailing list, and is _not_ in the suggested Fink patch format
# (neither do I care to transform it... :)
#
# It adds a conveniency, Intel/PowerPC transparency feature for precompiled scripts. This is NOT
# required to have Lua 5.1 in working condition, but can be considered a nice extra. To switch it
# off, just comment out the "PatchScript" line.
#
# When applying patch:
#   pwd: /sw/src/fink.build/lua51-5.1.1-3/lua-5.1.1
#   %a: /sw/fink/dists/local/main/finkinfo/
#
PatchScript: cd src && patch < %a/lundump.patch

# ---
Description: Small and fast embeddable scripting language
License: OSI-Approved
Homepage: http://www.lua.org
Maintainer: Asko Kauppi <akauppi@gmail.com>

DescDetail: <<
Lua is a programming language originally designed for extending applications,
but also frequently used as a general-purpose, stand-alone language. Lua
combines simple procedural syntax (similar to Pascal) with powerful data
description constructs based on associative arrays and extensible semantics.
Lua is dynamically typed, interpreted from bytecodes, and has automatic memory
management with garbage collection, making it ideal for configuration,
scripting, and rapid prototyping. 

A fundamental concept in the design of Lua is to provide meta-mechanisms for
implementing features, instead of providing a host of features directly in
the language. For example, although Lua is not a pure object-oriented
language, it does provide meta-mechanisms for implementing classes and
inheritance. Lua's meta-mechanisms bring an economy of concepts and keep the
language small, while allowing the semantics to be extended in unconventional
ways. Extensible semantics is a distinguishing feature of Lua. 

Lua is implemented as a small library of C functions, written in ANSI C, and
compiles unmodified in all known platforms. The implementation goals are
simplicity, efficiency, portability, and low embedding cost. 
<<

#---
# NOTE: "!/bin/sh -e" is needed for making 'if-then-else-fi' work.
#
# Comments are here to avoid unnecessary output when executing the script (-ev).
#
# 1. Change LUA_ROOT definition: "/usr/local/" -> "%p/"
# 2. Allow use of either .so or .bundle as the binary module postfix (Lua 5.1 only has .so)
# 3. >= 10.4: has built-in readline that we can (and should!) use
#     < 10.4: no proper command line edit and history (but no dependencies, either)
#
# NOTE: Stock Lua compilation does not create dynamic libraries; we do it here.
#       For some reason, cannot be done from 'liblua.a' directly, that will
#       lose all the symbols. :(   (at least was so on 10.4-transitional)
#
# NOTE: Install name is BY PURPOSE "liblua.5.1.dylib" (N = 5.1) since Lua has 5.1 and
#       (potential) 5.2 binary incompatible (other than most OSS projects, where 
#       5 and 6 would be). Use "current_version 5.2.0 -o liblua.5.2.0.dylib" for 5.2 
#
CompileScript: <<
#!/bin/sh -ev
 cd src
 cp luaconf.h luaconf.old
 cat luaconf.old | sed "s+/usr/local+%p+" > luaconf.h
 echo "#undef LUA_CPATH_DEFAULT" >> luaconf.h
 echo '#define LUA_CPATH_DEFAULT "./?.bundle;./?.so;" \
                LUA_CDIR "?.bundle;" LUA_CDIR "?.so;" \
                LUA_CDIR "loadall.bundle;" LUA_CDIR "loadall.so;"' \
    >> luaconf.h
 if [ `uname -r` \< "8.7.0" ]; then 
    make all MYCFLAGS="-fno-common -DLUA_USE_MACOSX"
 else
    make all MYCFLAGS="-fno-common -DLUA_USE_MACOSX -DLUA_USE_READLINE" MYLIBS="-lreadline"
 fi
 rm -f lua.o luac.o
 cc -dynamiclib -install_name %p/lib/liblua.5.1.dylib \
    -compatibility_version 5.1 -current_version 5.1.1 \
    -o liblua.5.1.1.dylib *.o
<<

InstallScript: <<
#!/bin/sh -ev
 make INSTALL_TOP=%i \
      INSTALL_MAN=%i/share/man/man1 \
      INSTALL_EXEC="install -s -m 0755" \
      INSTALL_DATA="install -m 0644" \
      install
 mv %i/bin/lua %i/bin/lua51
 mv %i/bin/luac %i/bin/luac51
 mv %i/share/man/man1/lua.1 %i/share/man/man1/lua51.1
 mv %i/share/man/man1/luac.1 %i/share/man/man1/luac51.1
 mkdir -p %i/share/lua
 mkdir -p %i/share/lua/5.1
 mkdir -p %i/lib/lua/5.1
 cp etc/strict.lua %i/share/lua/5.1
 rm -rf %i/include
 rm -rf %i/lib
<<

DocFiles: <<
doc/contents.html doc/logo.gif doc/lua.css doc/lua.html doc/luac.html
doc/manual.html doc/readme.html COPYRIGHT HISTORY INSTALL README
<<

DescPackaging: <<
Lua offers four header files for the creation of C/Lua bindings:
 
  lua.h, lualib.h, luaconf.h, and lauxlib.h

These are in the lua51-dev package, which has "conflicts: lua (<< 5.1)"
declared in it.  User can have several Lua versions installed, but will
only be able to develop (C bindings) for one of them.
<<


# --- lua51-shlibs (versioned shared libraries, no headers) ---
#
# See "3.4 Shared libraries" at http://fink.sourceforge.net/doc/packaging/policy.php
#
# This package only installs the _versioned_ shared libraries, thus allowing co-existence
# with other Lua shared library versions (s.a. 5.0, potential 5.2)
#
SplitOff: <<
Package: lua51-shlibs
Depends:

#---
# 1. install -s strips the binaries of debug info
# 2. Dynamic library numbering as in http://fink.sourceforge.net/doc/porting/shared.php
#
InstallScript: <<
#!/bin/sh -ev
 make INSTALL_TOP=%i \
      INSTALL_EXEC="install -s -m 0755" \
      INSTALL_DATA="install -m 0644" \
      install
 rm -rf %i/bin %i/man %i/include
 rm %i/lib/*.a
 cp src/liblua.5.1.1.dylib       %i/lib/liblua.5.1.1.dylib
 ln -s %p/lib/liblua.5.1.1.dylib %i/lib/liblua.5.1.dylib
<<

DocFiles: COPYRIGHT HISTORY INSTALL README

# library with -install_name '%p/lib/liblua.5.1.dylib' and -compatibility_version 5.1.0 has been installed
# since version 5.1.1-1 of the lua51 package. (http://fink.sourceforge.net/doc/packaging/policy.php)
#
Shlibs: <<
  %p/lib/liblua.5.1.dylib 5.1.0 lua51-shlibs (>= 5.1.1-1)
<<

Description: Shared libraries for linking Lua 5.1 engine into an application
<<


# --- lua51-dev (development headers, static library, unversioned dynamic library link) ---
#
# Only one of these packages can exist on the system at any time, defining which Lua
# version is 'seen' by C programs compiling for it. 
#
# NOTE! With upcoming versions, do remember to add all earlier packages in the conflicts:
# Conflicts: lua (<< 5.1), lua51-dev
# Replaces: lua (<< 5.1), lua51-dev
#
SplitOff2: <<
Package: lua51-dev
Depends: lua51-shlibs (= %v-%r)
Conflicts: lua (<< 5.1)
Replaces: lua (<< 5.1)
BuildDependsOnly: True

#---
# 1. install -s strips the binaries of debug info
# 2. leave %i/include/ and %i/lib/ (static library)
#
InstallScript: <<
#!/bin/sh -ev
 make INSTALL_TOP=%i \
      INSTALL_EXEC="install -s -m 0755" \
      INSTALL_DATA="install -m 0644" \
      install
 rm -rf %i/bin
 rm -rf %i/man
 ln -s %p/lib/liblua.5.1.1.dylib %i/lib/liblua.dylib
<<

DocFiles: COPYRIGHT HISTORY INSTALL README

Description: Files needed to make Lua/C bindings

DescDetail: <<
For details about Lua/C API:
http://www.lua.org/manual/5.1/manual.html#3
<<
<<


# --- lua51-sdl ('lua51-sdl' binary, which has SDL/Cocoa initialization code)
#
# Note: This package has no manpages, or such, since they'd be exactly the same as 'lua51'
#       already has (we can do a second copy, if needed...?)
#
SplitOff3: <<
Package: lua51-sdl
Depends: sdl (>= 1.2.9)

#---
# 1. Compilation is done at install, since it keeps all SDL stuff neatly in one place
#
InstallScript: <<
#!/bin/sh -ev
 cd src
 echo '#include "SDL_main.h"'  > %d/lua-sdl.c
 cat lua.c >> %d/lua-sdl.c
 if [ `uname -r` \< "8.7.0" ]; then 
      gcc -o %d/lua51-sdl -fno-common -DLUA_USE_MACOSX \
        `sdl-config --cflags --libs` -I ./ %d/lua-sdl.c liblua.a
 else
      gcc -o %d/lua51-sdl -fno-common -DLUA_USE_MACOSX -DLUA_USE_READLINE -lreadline \
        `sdl-config --cflags --libs` -I ./ %d/lua-sdl.c liblua.a
 fi
 install -d %i/bin
 install -s -m 0755 %d/lua51-sdl %i/bin
 rm %d/lua-sdl.c %d/lua51-sdl
<<

DocFiles: COPYRIGHT HISTORY INSTALL README

Description: Lua interpreter with SDL module support

DescDetail: <<
This package is _hopefully_ just a temporary arrangement, and is only needed since the
SDL library needs to 'hijack' the main loop, which cannot be done from within a Lua module.
<<
<<
