--- pymol-1.7.4.0/layer1/Scene.cpp.orig	2014-12-11 12:48:50.000000000 -0500
+++ pymol-1.7.4.0/layer1/Scene.cpp	2014-12-11 13:30:54.000000000 -0500
@@ -57,6 +57,8 @@
 #include"ScrollBar.h"
 #include "ShaderMgr.h"
 
+#include <GLKit/GLKMatrix4.h>
+
 #ifdef _PYMOL_IP_EXTRAS
 #include "IncentiveCopyToClipboard.h"
 #endif
@@ -9156,7 +9158,8 @@
     }
     if(!SettingGetGlobal_b(G, cSetting_ortho)) {
       float fov = SettingGetGlobal_f(G, cSetting_field_of_view);
-      gluPerspective(fov, aspRat, I->FrontSafe, I->BackSafe);
+      // gluPerspective(fov, aspRat, I->FrontSafe, I->BackSafe);
+      glMultMatrixf(GLKMatrix4MakePerspective(fov*PI/180., aspRat, I->FrontSafe, I->BackSafe).m);
     } else {
       height = fmax(R_SMALL4, -I->Pos[2]) * GetFovWidth(G) / 2.f;
       width = height * aspRat;
--- pymol-1.7.4.0/setup.py.orig	2014-12-11 13:59:08.000000000 -0500
+++ pymol-1.7.4.0/setup.py	2014-12-11 14:02:20.000000000 -0500
@@ -279,6 +279,11 @@
         glut = posix_find_lib(['glut', 'freeglut'], lib_dirs)
         pyogl_libs += ["GL", "GLU", glut]
 
+    if sys.platform == 'darwin':
+       ext_link_args += [
+         "-framework", "GLKit",
+        ]
+
     libs += ["GLEW"]
     libs += pyogl_libs
 
--- pymol-1.7.5.0/layer0/os_gl.h.orig	2015-03-15 18:58:00.000000000 -0400
+++ pymol-1.7.5.0/layer0/os_gl.h	2015-03-15 18:59:47.000000000 -0400
@@ -64,6 +64,8 @@
 
 /* END PROPRIETARY CODE SEGMENT */
 
+static const char* PyMOLgluErrorString(GLenum errorCode);
+
 void PyMOLReadPixels(GLint x,
                      GLint y,
                      GLsizei width,
--- pymol-1.7.5.0/layer0/os_gl.cpp.orig	2015-03-15 18:41:25.000000000 -0400
+++ pymol-1.7.5.0/layer0/os_gl.cpp	2015-03-15 18:57:47.000000000 -0400
@@ -3,6 +3,43 @@
 
 #include<stdio.h>
 
+const char* PyMOLgluErrorString(GLenum errorCode)
+{
+	static const struct {
+		GLenum code;
+		const char *string;
+	} errors[]=
+	{
+		/* GL */
+		{GL_NO_ERROR, "no error"},
+		{GL_INVALID_ENUM, "invalid enumerant"},
+		{GL_INVALID_VALUE, "invalid value"},
+		{GL_INVALID_OPERATION, "invalid operation"},
+		{GL_STACK_OVERFLOW, "stack overflow"},
+		{GL_STACK_UNDERFLOW, "stack underflow"},
+		{GL_OUT_OF_MEMORY, "out of memory"},
+		{GLU_INVALID_ENUM, "invalid enumerant"},
+		{GLU_INVALID_VALUE, "invalid value"},
+		{GLU_OUT_OF_MEMORY, "out of memory"},
+		{GLU_INCOMPATIBLE_GL_VERSION, "incompatible gl version"},
+		{GLU_INVALID_OPERATION, "invalid operation"},
+
+	{0, NULL }
+	};
+
+	int i;
+
+	for (i=0; errors[i].string; i++)
+	{
+		if (errors[i].code == errorCode)
+		{
+			return errors[i].string;
+		}
+	}
+
+	return NULL;
+}
+		
 void PyMOLReadPixels(GLint x,
                      GLint y,
                      GLsizei width,
@@ -96,7 +133,7 @@
   int flag = 0;
   GLenum glerr = glGetError();
   while(glerr != GL_NO_ERROR) {
-    printf("OpenGL-Error: Where? %s: %s\n", pos, (char *) gluErrorString(glerr));
+    printf("OpenGL-Error: Where? %s: %s\n", pos, (char *) PyMOLgluErrorString(glerr));
     glerr = glGetError();
     flag = 1;
   }
