diff --git a/setup.py b/setup.py
index bdf6bc9..63f63d1 100644
--- a/setup.py
+++ b/setup.py
@@ -100,15 +100,9 @@ class pil_build_ext(build_ext):
                 "/usr/lib", "python%s" % sys.version[:3], "config"))
 
         elif sys.platform == "darwin":
-            # attempt to make sure we pick freetype2 over other versions
-            _add_directory(include_dirs, "/sw/include/freetype2")
-            _add_directory(include_dirs, "/sw/lib/freetype2/include")
             # fink installation directories
-            _add_directory(library_dirs, "/sw/lib")
-            _add_directory(include_dirs, "/sw/include")
-            # darwin ports installation directories
-            _add_directory(library_dirs, "/opt/local/lib")
-            _add_directory(include_dirs, "/opt/local/include")
+            _add_directory(library_dirs, "@PREFIX@/lib")
+            _add_directory(include_dirs, "@PREFIX@/include")
             # freetype2 ships with X11
             _add_directory(library_dirs, "/usr/X11/lib")
             _add_directory(include_dirs, "/usr/X11/include")
@@ -126,7 +120,6 @@ class pil_build_ext(build_ext):
             # work ;-)
             self.add_multiarch_paths()
 
-        _add_directory(library_dirs, "/usr/local/lib")
         # FIXME: check /opt/stuff directories here?
 
         prefix = sysconfig.get_config_var("prefix")
@@ -187,9 +180,6 @@ class pil_build_ext(build_ext):
                 _add_directory(include_dirs, tcl_dir)
 
         # standard locations
-        _add_directory(library_dirs, "/usr/local/lib")
-        _add_directory(include_dirs, "/usr/local/include")
-
         _add_directory(library_dirs, "/usr/lib")
         _add_directory(include_dirs, "/usr/include")
 
@@ -242,7 +232,8 @@ class pil_build_ext(build_ext):
                 feature.freetype = "freetype"
                 feature.freetype_version = freetype_version
                 if dir:
-                    _add_directory(self.compiler.include_dirs, dir, 0)
+                    # ft also needs its subdir; place after the one local -I flag
+                    _add_directory(self.compiler.include_dirs, dir, 1)
 
         if _find_include_file(self, "lcms.h"):
             if _find_library_file(self, "lcms"):
@@ -307,28 +298,7 @@ class pil_build_ext(build_ext):
             exts.append(Extension(
                 "_imagingcms", ["_imagingcms.c"], libraries=["lcms"] + extra))
 
-        if sys.platform == "darwin":
-            # locate Tcl/Tk frameworks
-            frameworks = []
-            framework_roots = [
-                "/Library/Frameworks",
-                "/System/Library/Frameworks"]
-            for root in framework_roots:
-                if (os.path.exists(os.path.join(root, "Tcl.framework")) and
-                    os.path.exists(os.path.join(root, "Tk.framework"))):
-                    print("--- using frameworks at %s" % root)
-                    frameworks = ["-framework", "Tcl", "-framework", "Tk"]
-                    dir = os.path.join(root, "Tcl.framework", "Headers")
-                    _add_directory(self.compiler.include_dirs, dir, 0)
-                    dir = os.path.join(root, "Tk.framework", "Headers")
-                    _add_directory(self.compiler.include_dirs, dir, 1)
-                    break
-            if frameworks:
-                exts.append(Extension(
-                    "_imagingtk", ["_imagingtk.c", "Tk/tkImaging.c"],
-                    extra_compile_args=frameworks, extra_link_args=frameworks))
-                feature.tcl = feature.tk = 1  # mark as present
-        elif feature.tcl and feature.tk:
+        if feature.tcl and feature.tk:
             exts.append(Extension(
                 "_imagingtk", ["_imagingtk.c", "Tk/tkImaging.c"],
                 libraries=[feature.tcl, feature.tk]))
