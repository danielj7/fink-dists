diff -Naur BioPerl-1.6.0/Bio/Root/Build.pm BioPerl-1.6.0-patched/Bio/Root/Build.pm
--- BioPerl-1.6.0/Bio/Root/Build.pm	2009-01-25 00:19:26.000000000 -0500
+++ BioPerl-1.6.0-patched/Bio/Root/Build.pm	2009-02-01 10:08:09.000000000 -0500
@@ -141,9 +141,11 @@
         }
     }
     closedir($scripts_dir);
-    my $question = $int_ok ? "Install [a]ll Bioperl scripts, [n]one, or choose groups [i]nteractively?" : "Install [a]ll Bioperl scripts or [n]one?";
+#    my $question = $int_ok ? "Install [a]ll Bioperl scripts, [n]one, or choose groups [i]nteractively?" : "Install [a]ll Bioperl scripts or [n]one?";
     
-    my $prompt = $accept ? 'a' : $self->prompt($question, 'a');
+#    my $prompt = $accept ? 'a' : $self->prompt($question, 'a');
+    
+    my $prompt = 'a';
     
     if ($prompt =~ /^[aA]/) {
         $self->log_info("  - will install all scripts\n");
diff -Naur BioPerl-1.6.0/Build.PL BioPerl-1.6.0-patched/Build.PL
--- BioPerl-1.6.0/Build.PL	2009-01-25 00:19:13.000000000 -0500
+++ BioPerl-1.6.0-patched/Build.PL	2009-02-01 09:59:55.000000000 -0500
@@ -29,43 +29,43 @@
                             'perl'                      => '5.6.1',
                             'IO::String'                => 0,
                             'DB_File'                   => 0,
-                            'Data::Stag'                => 0.11, # Bio::SeqIO::swiss, we can change to 'recommend' if needed
+ #                           'Data::Stag'                => 0.11, # Bio::SeqIO::swiss, we can change to 'recommend' if needed
                             'Scalar::Util'              => 0 # not in Perl 5.6.1, arrived in core in 5.7.3
                            },
     build_requires      => {
                             'Test::More'                => 0,
                             'Module::Build'             => 0.2805,
                             'Test::Harness'             => 2.62,
-                            'CPAN'                      => 1.81
+#                            'CPAN'                      => 1.81
                            },
     recommends          => { # does what you would expect of recommends, except more informative output and generates optional_features in META.yml
-                            'Ace'                       => '0/access of ACeDB database/Bio::DB::Ace,Bio::DB::GFF::Adaptor::ace',
-                            'Algorithm::Munkres'        => '0/Phylogenetic Networks/Bio::PhyloNetwork',
+#                            'Ace'                       => '0/access of ACeDB database/Bio::DB::Ace,Bio::DB::GFF::Adaptor::ace',
+#                            'Algorithm::Munkres'        => '0/Phylogenetic Networks/Bio::PhyloNetwork',
                             'Array::Compare'            => '0/Phylogenetic Networks/Bio::PhyloNetwork',
                             # this won't actually install due to circular dep, but we have no way of doing a post-install
                             # the [circular dependency!] specifies it is only installed on explicit request for this specific module,
                             # not when simply choosing to install 'all' modules
-                            'Bio::ASN1::EntrezGene'     => '0/parsing entrezgene/Bio::SeqIO::entrezgene [circular dependency!]',
+#                            'Bio::ASN1::EntrezGene'     => '0/parsing entrezgene/Bio::SeqIO::entrezgene [circular dependency!]',
                             # we actually need 1.01 of Class::AutoClass, but unfortunately it is versioned as 1.0
                             'Clone'                     => '0/cloning objects/Bio::Tools::Primer3',
-                            'Convert::Binary::C'        => '0/strider functionality/Bio::SeqIO::strider',
+#                            'Convert::Binary::C'        => '0/strider functionality/Bio::SeqIO::strider',
                             # we specifically want Graph::Directed, but that has no VERSION
                             'Graph'                     => '0/ontology engine implementation for the GO parser/Bio::PhyloNetwork',
-                            'GraphViz'                  => '0/Phylogenetic Network Visulization/Bio::PhyloNetwork::GraphViz',
+#                            'GraphViz'                  => '0/Phylogenetic Network Visulization/Bio::PhyloNetwork::GraphViz',
                             'HTML::Entities'            => '0/remote analysis POST submissions/Bio::SearchIO::blastxml',
-                            'HTML::HeadParser'          => '3/parsing <HEAD> section of HTML docs/Bio::Tools::Analysis::DNA::ESEfinder',
+#                            'HTML::HeadParser'          => '3/parsing <HEAD> section of HTML docs/Bio::Tools::Analysis::DNA::ESEfinder',
                             'HTTP::Request::Common'     => '0/GenBank+GenPept sequence retrieval, remote http Blast jobs/Bio::DB::*,Bio::Tools::Run::RemoteBlast,Bio::Tools::Analysis::Protein*,Bio::Tools::Analysis::DNA*',
                             'LWP::UserAgent'            => '0/remote access/Bio::DB::*,Bio::Tools::Run::RemoteBlast,Bio::WebAgent',
-                            'Math::Random'              => '0/Random Phylogenetic Networks/Bio::PhyloNetwork::RandomFactory',
-                            'PostScript::TextBlock'     => '0/EPS output/Bio::Tree::Draw::Cladogram',
+#                            'Math::Random'              => '0/Random Phylogenetic Networks/Bio::PhyloNetwork::RandomFactory',
+#                            'PostScript::TextBlock'     => '0/EPS output/Bio::Tree::Draw::Cladogram',
                             'Set::Scalar'               => '0/proper operation/Bio::Tree::Compatible',
                             'SOAP::Lite'                => '0/Bibliographic queries/Bio::DB::Biblio::soap',
                             'Spreadsheet::ParseExcel'   => '0/parsing Excel files/Bio::SeqIO::excel',
                             'Storable'                  => '2.05/storing sequence objects in local file cache/Bio::DB::FileCache,Bio::SeqFeature::Collection,Bio::PopGen::HtSNP,Bio::PopGen::TagHaplotype,Bio::DB::GFF::Adaptor::berkeleydb',
-                            'SVG::Graph'                => '0.01/creating SVG images/Bio::TreeIO::svggraph',
+#                            'SVG::Graph'                => '0.01/creating SVG images/Bio::TreeIO::svggraph',
                             'Text::ParseWords'          => '0/test scripts/Bio::DB::SeqFeature::Store::FeatureFileLoader',
                             'URI::Escape'               => '0/dealing with web resources/Bio::FeatureIO::gff,Bio::FeatureIO::interpro,Bio::DB::Biblio::eutils,Bio::DB::EUtilParameters,Bio::DB::Query::GenBank,Bio::DB::NCBIHelper,Bio::SeqFeature::Annotated',
-                            'XML::DOM::XPath'           => '0.13/parsing interpro features/Bio::FeatureIO::interpro',
+#                            'XML::DOM::XPath'           => '0.13/parsing interpro features/Bio::FeatureIO::interpro',
                             'XML::Parser'               => '0/parsing xml/Bio::Biblio::IO::medlinexml',
                             'XML::Parser::PerlSAX'      => '0/parsing xml/Bio::SeqIO::tinyseq,Bio::SeqIO::game::gameSubs,Bio::OntologyIO::InterProParser,Bio::ClusterIO::dbsnp',
                             'XML::SAX'                  => '0.15/parsing xml/Bio::SearchIO::blastxml,Bio::SeqIO::tigrxml,Bio::SeqIO::bsml_sax',
@@ -76,28 +76,28 @@
     get_options         => {
                             network => { } # say 'perl Build.PL --network' to manually request network tests
                            },
-    auto_features       => {
-                            BioDBSeqFeature_BDB   => {
-                                                        description      => "BDB tests for Bio::DB::SeqFeature::Store",
-                                                        feature_requires => { 'DB_File' => 0 } # feature_requires is like requires, except that it doesn't trigger installation
-                                                     },
-                            BioDBGFF              => {
-                                                        description      => "BioDBGFF database tests (will need to answer questions before really enabling)",
-                                                        feature_requires => { 'DBI' => 0 },
-                                                        excludes_os      => ['mswin'],
-                                                        test             => \&test_biodbgff # Bio::Root::Build unique requirement that after everything else succeeds, supplied code ref must also return undef
-                                                     },
-                            BioDBSeqFeature_mysql => {
-                                                        description      => "MySQL tests for Bio::DB::SeqFeature::Store",
-                                                        feature_requires => { 'DBI' => 0, 'DBD::mysql' => 0 },
-                                                        test             => \&test_db_sf
-                                                     },
-                            Network               => {
-                                                        description => "Enable tests that need an internet connection",
-                                                        requires    => { 'LWP::UserAgent' => 0 },
-                                                        test        => \&Bio::Root::Build::test_internet
-                                                     }
-                           },
+#    auto_features       => {
+#                            BioDBSeqFeature_BDB   => {
+#                                                        description      => "BDB tests for Bio::DB::SeqFeature::Store",
+#                                                        feature_requires => { 'DB_File' => 0 } # feature_requires is like requires, except that it doesn't trigger installation
+#                                                     },
+#                            BioDBGFF              => {
+#                                                       description      => "BioDBGFF database tests (will need to answer questions before really enabling)",
+#                                                        feature_requires => { 'DBI' => 0 },
+#                                                        excludes_os      => ['mswin'],
+#                                                        test             => \&test_biodbgff # Bio::Root::Build unique requirement that after everything else succeeds, supplied code ref must also return undef
+#                                                     },
+#                            BioDBSeqFeature_mysql => {
+#                                                        description      => "MySQL tests for Bio::DB::SeqFeature::Store",
+#                                                        feature_requires => { 'DBI' => 0, 'DBD::mysql' => 0 },
+#                                                        test             => \&test_db_sf
+#                                                     },
+#                            Network               => {
+#                                                        description => "Enable tests that need an internet connection",
+#                                                        requires    => { 'LWP::UserAgent' => 0 },
+#                                                        test        => \&Bio::Root::Build::test_internet
+#                                                     }
+#                           },
     dynamic_config      => 1,
     create_makefile_pl  => 'passthrough',
     recursive_test_files => 1,
diff -Naur BioPerl-1.6.0/Makefile.PL BioPerl-1.6.0-patched/Makefile.PL
--- BioPerl-1.6.0/Makefile.PL	2009-01-25 00:19:07.000000000 -0500
+++ BioPerl-1.6.0-patched/Makefile.PL	2009-01-29 20:10:42.000000000 -0500
@@ -1,30 +1,30 @@
 # Note: this file was auto-generated by Module::Build::Compat version 0.30
 require 5.6.1;
     
-    unless (eval "use Module::Build::Compat 0.02; 1" ) {
-      print "This module requires Module::Build to install itself.\n";
-      
-      require ExtUtils::MakeMaker;
-      my $yn = ExtUtils::MakeMaker::prompt
-	('  Install Module::Build now from CPAN?', 'y');
-      
-      unless ($yn =~ /^y/i) {
-	die " *** Cannot install without Module::Build.  Exiting ...\n";
-      }
-      
-      require Cwd;
-      require File::Spec;
-      require CPAN;
-      
-      # Save this 'cause CPAN will chdir all over the place.
-      my $cwd = Cwd::cwd();
-      
-      CPAN::Shell->install('Module::Build::Compat');
-      CPAN::Shell->expand("Module", "Module::Build::Compat")->uptodate
-	or die "Couldn't install Module::Build, giving up.\n";
-      
-      chdir $cwd or die "Cannot chdir() back to $cwd: $!";
-    }
+#    unless (eval "use Module::Build::Compat 0.02; 1" ) {
+#      print "This module requires Module::Build to install itself.\n";
+#      
+#      require ExtUtils::MakeMaker;
+#      my $yn = ExtUtils::MakeMaker::prompt
+#	('  Install Module::Build now from CPAN?', 'y');
+#      
+#      unless ($yn =~ /^y/i) {
+#	die " *** Cannot install without Module::Build.  Exiting ...\n";
+#      }
+#      
+#      require Cwd;
+#      require File::Spec;
+#      require CPAN;
+#      
+#      # Save this 'cause CPAN will chdir all over the place.
+#      my $cwd = Cwd::cwd();
+#      
+#      CPAN::Shell->install('Module::Build::Compat');
+#      CPAN::Shell->expand("Module", "Module::Build::Compat")->uptodate
+#	or die "Couldn't install Module::Build, giving up.\n";
+#      
+#      chdir $cwd or die "Cannot chdir() back to $cwd: $!";
+#    }
     eval "use Module::Build::Compat 0.02; 1" or die $@;
     use lib '.';
     Module::Build::Compat->run_build_pl(args => \@ARGV);
