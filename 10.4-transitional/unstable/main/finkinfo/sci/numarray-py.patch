Index: Src/_ufuncmodule.c
===================================================================
RCS file: /cvsroot/numpy/numarray/Src/_ufuncmodule.c,v
retrieving revision 1.84
retrieving revision 1.85
diff -u -b -w -r1.84 -r1.85
--- numarray/Src/_ufuncmodule.c	23 Oct 2005 23:24:19 -0000	1.84
+++ numarray/Src/_ufuncmodule.c	28 Nov 2005 01:07:07 -0000	1.85
@@ -350,7 +350,7 @@
 		return -1;
 	if (!result) return -1;
 	Py_DECREF(result);  /* Py_None */
-	return NA_checkAndReportFPErrors(PyString_AS_STRING(self->operator));
+	return NA_checkAndReportFPErrors(PyString_AS_STRING(self->oprator));
 }
 
 #if defined(UNTHREADED)
@@ -501,13 +501,13 @@
 	if (!self) return NULL;
 	
 	if (!PyArg_ParseTuple(args, "OOiiO", 
-			      &self->operator, &ufuncs, 
+			      &self->oprator, &ufuncs, 
 			      &self->n_inputs, &self->n_outputs,
 			      &self->identity))
 		return NULL;
 	
 	memset(&self->cache, 0, sizeof(self->cache));
-	Py_INCREF(self->operator);
+	Py_INCREF(self->oprator);
 	Py_INCREF(self->identity);
 	
 	self->call = (_ufunc_function) _cached_dispatch;
@@ -520,7 +520,7 @@
 {
 	PyUfuncObject *me = (PyUfuncObject*) self;
 	_cache_flush(&me->cache);
-	Py_DECREF(me->operator);
+	Py_DECREF(me->oprator);
 	Py_DECREF(me->identity);
 	self->ob_type->tp_free(self);
 }
@@ -540,8 +540,8 @@
 static PyObject *
 _ufunc_operator_get(PyUfuncObject *self)
 {
-	Py_INCREF(self->operator);
-	return self->operator;
+	Py_INCREF(self->oprator);
+	return self->oprator;
 }
 
 static PyObject *
@@ -653,12 +653,12 @@
 			PyExc_RuntimeError, 
 			"_ufunc_call: __call__ is not implemented by base UFunc class");
 	case 1:
-		snprintf(spec, sizeof(spec), "O|O:%s", PyString_AS_STRING(self->operator));
+		snprintf(spec, sizeof(spec), "O|O:%s", PyString_AS_STRING(self->oprator));
 		if (!PyArg_ParseTuple(args, spec, &in1, &out))
 			return NULL;
 		return _cached_dispatch1((PyObject *) self, in1, out); 
 	case 2:
-		snprintf(spec, sizeof(spec), "OO|O:%s", PyString_AS_STRING(self->operator));
+		snprintf(spec, sizeof(spec), "OO|O:%s", PyString_AS_STRING(self->oprator));
 		if (!PyArg_ParseTuple(args, spec, &in1, &in2, &out))
 			return NULL;
 		return _cached_dispatch2((PyObject *) self, in1, in2, out);
Index: Include/numarray/nummacro.h
===================================================================
RCS file: /cvsroot/numpy/numarray/Include/numarray/nummacro.h,v
retrieving revision 1.15
retrieving revision 1.16
diff -u -b -w -r1.15 -r1.16
--- numarray/Include/numarray/nummacro.h	20 Oct 2005 21:22:39 -0000	1.15
+++ numarray/Include/numarray/nummacro.h	28 Nov 2005 01:07:02 -0000	1.16
@@ -24,7 +24,7 @@
 				     int n_outs, PyObject*outs[]);
 typedef struct {
 	PyObject_HEAD
-	PyObject *operator;          /* ufunc name */
+	PyObject *oprator;          /* ufunc name */
         PyObject *identity;          /* identity value, e.g. 0 for + or 1 for * */
         int   n_inputs, n_outputs;
         _ufunc_function call;
