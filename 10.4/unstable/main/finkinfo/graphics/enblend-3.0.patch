diff -ru enblend-3.0.orig/configure.in enblend-3.0/configure.in
--- enblend-3.0.orig/configure.in	2007-01-27 04:54:39.000000000 +0000
+++ enblend-3.0/configure.in	2007-02-15 22:32:19.000000000 +0000
@@ -18,9 +18,9 @@
 AC_CHECK_LIB(tiff,TIFFOpen,,AC_MSG_WARN([libtiff is required to compile enblend.]),[])
 AC_CHECK_LIB(lcms,cmsCreateTransform,,AC_MSG_WARN([liblcms is required to compile enblend.]),[])
 AC_CHECK_LIB(xmi,miNewPaintedSet,,AC_MSG_WARN([libxmi is required to compile enblend.]),[])
-AC_CHECK_LIB(glut,glutInitDisplayMode,,AC_MSG_WARN([GLUT is required to compile enblend.]),[-lGL -lGLU])
-AC_CHECK_LIB(GLU,gluBeginCurve,,AC_MSG_WARN([libGLU is required to compile enblend.]),[])
-AC_CHECK_LIB(GL,glBegin,,AC_MSG_WARN([libGL is required to compile enblend.]),[])
+#AC_CHECK_LIB(glut,glutInitDisplayMode,,AC_MSG_WARN([GLUT is required to compile enblend.]),[-lGL -lGLU])
+#AC_CHECK_LIB(GLU,gluBeginCurve,,AC_MSG_WARN([libGLU is required to compile enblend.]),[])
+#AC_CHECK_LIB(GL,glBegin,,AC_MSG_WARN([libGL is required to compile enblend.]),[])
 AC_CHECK_LIB(GLEW,glewInit,,AC_MSG_WARN([GLEW is required to compile enblend.]),[])
 #AC_CHECK_LIB(sh,main,,AC_MSG_WARN([libsh is required to compile enblend.]),[])
 #AC_CHECK_LIB(brook,main,,AC_MSG_WARN([BrookGPU runtime libraries are required to compile enblend.]),[-logl -lcpu -lgpu])
@@ -36,7 +36,7 @@
 AC_CHECK_HEADER(lcms.h,,AC_MSG_WARN([lcms header files are required to compile enblend.]))
 AC_CHECK_HEADER(xmi.h,,AC_MSG_WARN([xmi header files are required to compile enblend.]))
 AC_CHECK_HEADER(GL/glew.h,,AC_MSG_WARN([glew header files are required to compile enblend.]))
-AC_CHECK_HEADER(GL/glut.h,,AC_MSG_WARN([glut header files are required to compile enblend.]))
+AC_CHECK_HEADER(GLUT/glut.h,,AC_MSG_WARN([glut header files are required to compile enblend.]))
 #AC_CHECK_HEADER(GL/gl.h,,AC_MSG_WARN([OpenGL gl.h header file is required to compile enblend.]))
 #AC_CHECK_HEADER(GL/glx.h,,AC_MSG_WARN([OpenGL glx.h header file is required to compile enblend.]))
 #AC_CHECK_HEADER(sh/sh.hpp,,AC_MSG_WARN([libsh header files are required to compile enblend.]))
@@ -60,8 +60,8 @@
 AC_CHECK_FUNCS([floor memset pow rint sqrt strchr strerror strrchr mkstemp])
 
 # lrint and lrintf
-AC_C99_FUNC_LRINT
-AC_C99_FUNC_LRINTF
+#AC_C99_FUNC_LRINT
+#AC_C99_FUNC_LRINTF
 
 AC_CONFIG_FILES([Makefile
                  doc/Makefile
Only in enblend-3.0: enblend-3.0.patch
diff -ru enblend-3.0.orig/src/anneal.h enblend-3.0/src/anneal.h
--- enblend-3.0.orig/src/anneal.h	2004-11-21 09:23:08.000000000 +0000
+++ enblend-3.0/src/anneal.h	2007-02-15 22:32:19.000000000 +0000
@@ -399,7 +399,7 @@
                     //    printf("%08x         adj\n", 1072693248 - 60801);
                     //    printf("%08x%08x\n", eco.n.i, eco.n.j);
                     //}
-                    if (isnan(piTAn)) {
+                    if (piTAn!=piTAn) { // patched to test for NaN as isnan is non-standard (NaN is never equal even to itself)
                         // exp term is infinity or zero.
                         if (ej > E[i]) piTAn = 0.0;
                         else piTAn = piT;
@@ -678,7 +678,7 @@
 
             localK = stateSpace->size();
             if (localK < 2) convergedPoints[index] = true;
-            kMax = std::max(kMax, stateProbabilities->size());
+            kMax = kMax > stateProbabilities->size() ? kMax : stateProbabilities->size(); // patched as std::max is not always available
 
         }
 
diff -ru enblend-3.0.orig/src/enblend.cc enblend-3.0/src/enblend.cc
--- enblend-3.0.orig/src/enblend.cc	2007-01-27 20:05:39.000000000 +0000
+++ enblend-3.0/src/enblend.cc	2007-02-15 23:31:21.000000000 +0000
@@ -474,7 +474,7 @@
     }
 
     if (UseGPU) {
-        initGPU();
+        initGPU(&argc, argv);
     }
 
     if (MaskVectorizeDistance == 0) {
diff -ru enblend-3.0.orig/src/gpu.cc enblend-3.0/src/gpu.cc
--- enblend-3.0.orig/src/gpu.cc	2006-12-08 08:40:58.000000000 +0000
+++ enblend-3.0/src/gpu.cc	2007-02-17 14:44:11.000000000 +0000
@@ -39,7 +39,7 @@
 static GLint TempParam;
 static GLint KMaxParam;
 
-static const char *GDAKernelSource = {
+static const char *GDAKernelSource =
 "uniform sampler2DRect PiTexture;"
 "uniform sampler2DRect ETexture;"
 "uniform float Temperature;"
@@ -50,17 +50,16 @@
 "   vec4 ex = texture2DRect(ETexture, gl_TexCoord[0].st);"
 "   vec4 An;"
 "   vec4 pi_plus;"
-"   vec4 sum = vec4(0.0f, 0.0f, 0.0f, 0.0f);"
+"   vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);"
 "   float i = 0.0;"
 "   for (i = 0.0; i < KMax; i++) {"
 "       vec2 coord = vec2(i, gl_TexCoord[0].t);"
-"       An = exp((ex - texture2DRect(ETexture, coord)) / Temperature) + 1.0f;"
+"       An = exp((ex - texture2DRect(ETexture, coord)) / Temperature) + 1.0;"
 "       pi_plus = pix + texture2DRect(PiTexture, coord);"
 "       sum += (pi_plus / An);"
 "   }"
 "   gl_FragColor = sum / KMax;"
-"}"
-};
+"}";
 
 void checkGLErrors(int line, char *file) {
     GLenum errCode;
@@ -115,25 +114,36 @@
     return false;
 }
 
-bool initGPU() {
+void displayFunction(void)
+{
+    glClear(GL_COLOR_BUFFER_BIT);
+    glFlush();
+}
+
+bool initGPU(int *argcp, char **argv) {
+    glutInit(argcp, argv);
     glutInitDisplayMode(GLUT_RGBA | GLUT_ALPHA);
     GlutWindowHandle = glutCreateWindow("Enblend");
+    glutDisplayFunc(displayFunction);
 
-    int err = glewInit();
-    if (err != GLEW_OK) {
-        cerr << "enblend: an error occured while setting up the GPU:" << endl;
-        cerr << glewGetErrorString(err) << endl;
-        cerr << "enblend: sorry, the --gpu flag is not going to work on this machine." << endl;
-        glutDestroyWindow(GlutWindowHandle);
-        exit(1);
-    }
+//    int err = glewInit();
+//    if (err != GLEW_OK) {
+//        cerr << "enblend: an error occured while setting up the GPU:" << endl;
+//        cerr << glewGetErrorString(err) << endl;
+//        cerr << "enblend: sorry, the --gpu flag is not going to work on this machine." << endl;
+//        glutDestroyWindow(GlutWindowHandle);
+//        exit(1);
+//    }
 
     cout << "enblend: using graphics card: " << glGetString(GL_VENDOR) << " " << glGetString(GL_RENDERER) << endl;
 
-    GLboolean has_arb_fragment_shader = glewGetExtension("GL_ARB_fragment_shader");
-    GLboolean has_arb_vertex_shader = glewGetExtension("GL_ARB_vertex_shader");
-    GLboolean has_arb_shader_objects = glewGetExtension("GL_ARB_shader_objects");
-    GLboolean has_arb_shading_language = glewGetExtension("GL_ARB_shading_language_100");
+	const GLubyte *str;
+	str = glGetString (GL_EXTENSIONS);
+
+    GLboolean has_arb_fragment_shader = (strstr((const char *)str, "GL_ARB_fragment_shader") != NULL);
+    GLboolean has_arb_vertex_shader = (strstr((const char *)str, "GL_ARB_vertex_shader") != NULL);
+    GLboolean has_arb_shader_objects = (strstr((const char *)str, "GL_ARB_shader_objects") != NULL);
+    GLboolean has_arb_shading_language = (strstr((const char *)str, "GL_ARB_shading_language_100") != NULL); // glewGetExtension
 
     if (!(has_arb_fragment_shader && has_arb_vertex_shader && has_arb_shader_objects && has_arb_shading_language)) {
         const char * msg[] = {"false", "true"};
diff -ru enblend-3.0.orig/src/gpu.h enblend-3.0/src/gpu.h
--- enblend-3.0.orig/src/gpu.h	2006-12-08 08:40:58.000000000 +0000
+++ enblend-3.0/src/gpu.h	2007-02-16 00:03:51.000000000 +0000
@@ -24,17 +24,25 @@
 #include <config.h>
 #endif
 
-#define GLEW_STATIC 1
-#include <GL/glew.h>
+#include <string.h>
+
+//#define GLEW_STATIC 1
+//#include <GL/glew.h>
+
+#if defined(__APPLE__) || defined(MACOSX)
+#include <GLUT/glut.h>
+#else
 #include <GL/glut.h>
+#endif
 
 #define CHECK_GL() checkGLErrors(__LINE__, __FILE__)
 
 void checkGLErrors(int line, char *file);
 void printInfoLog(GLhandleARB obj);
 bool checkFramebufferStatus();
+void displayFunction(void);
 
-bool initGPU(void);
+bool initGPU(int *argcp, char **argv);
 bool configureGPUTextures(unsigned int k, unsigned int vars);
 bool gpuGDAKernel(unsigned int k, unsigned int vars, double t, float *packedEData, float *packedPiData, float *packedOutData);
 bool clearGPUTextures();
