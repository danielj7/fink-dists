diff -uNr openmp.orig/runtime/Build_With_CMake.txt openmp/runtime/Build_With_CMake.txt
--- openmp.orig/runtime/Build_With_CMake.txt	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/Build_With_CMake.txt	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,134 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+               Building libiomp5 using CMake
+               =============================
+
+* Version of CMake required: v2.8.11 or above
+
+Calling cmake
+=============
+* When calling cmake for the first time, all needed compiler options 
+  must be specified on the command line.  After this initial call to 
+  cmake, the compiler definitions must not be included for further calls 
+  to cmake.  Other options can be specified on the command line multiple
+  times including all definitions in the Build options section below.
+* Example of configuring, building, reconfiguring, rebuilding:
+  $ mkdir build
+  $ cd build
+  $ cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -Dos=lin -Darch=32 ..  # Initial configuration
+  $ make all common
+  ...
+  $ make clean
+  $ cmake -Darch=32e -Dbuild_type=debug ..                                       # Second configuration
+  $ make all common
+  ...
+  $ rm -rf *
+  $ cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ..                     # Third configuration
+  $ make all common
+* Notice in the example how the compiler definitions are only specified
+  for an empty build directory, but other Build options are used at any time.
+* The file CMakeCache.txt which is created after the first call to cmake
+  is a configuration file which holds all the values for the Build options.
+  These configuration values can be changed using a text editor to modify 
+  CMakeCache.txt as opposed to using definitions on the command line.
+* To have cmake create a particular type of build generator file simply 
+  inlude the -G <Generator name> option:
+  $ cmake -G "Unix Makefiles" ...
+  You can see a list of generators cmake supports by typing "cmake" with
+  no arguments and a list will be printed.
+
+Instructions to Build
+=====================
+ $ cd libomp_top_level/ [ directory with src/ , exports/ , tools/ , etc. ]
+ $ mkdir build
+ $ cd build
+
+ [ Linux, Mac Libraries ]
+ $ cmake -DCMAKE_C_COMPILER=<C Compiler> -DCMAKE_CXX_COMPILER=<C++ Compiler> ..
+
+ [ Intel(R) Many Integrated Core Library (Intel(R) MIC Library) ]
+ $ cmake -DCMAKE_C_COMPILER=<C Compiler> -DCMAKE_CXX_COMPILER=<C++ Compiler> -Dos=mic -Darch=32e ..
+
+ [ Windows Libraries ]
+ $ cmake -G "Unix Makefiles" -DCMAKE_C_COMPILER=<C Compiler> -DCMAKE_CXX_COMPILER=<C++ Compiler> -DCMAKE_ASM_COMPILER=[ml | ml64] -Darch=[32 | 32e] ..
+
+ $ make all common
+
+Mac Fat Libraries
+=================
+On OS X machines, it is possible to build universal (or fat) libraries which
+include both IA-32 architecture and Intel(R) 64 architecture objects in a
+single archive; just build the 32 and 32e libraries separately:
+ $ cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -Darch=32 ..
+ $ make
+ $ cmake -Darch=32e ..
+ $ make
+then invoke make again with a special argument as follows:
+ $ make fat
+* The fat target is only available for the arch=32e configuration.
+* The fat libraries will be put in exports/mac_32e/lib while the "thin" libraries 
+  will be in exports/mac_32e/lib.thin and exports/mac_32/lib.thin
+
+Compiler options
+================
+-DCMAKE_C_COMPILER=<C compiler name>
+-DCMAKE_CXX_COMPILER=<C++ compiler name>
+-DCMAKE_Fortran_COMPILER=<Fortran compiler name>
+-DCMAKE_ASM_COMPILER=<Assembler name>
+
+Build options
+=============
+-Dos=lin|mac|win|mic --- Operating system can be lin (Linux), mac (Mac), win (Windows), or 
+                         mic (Intel(R) Many Integrated Core Architecture (Intel(R) MIC Architecture)). 
+                         If not specified, cmake will try to determine your current operating system.
+-Darch=32|32e|arm --- Architecture can be 32 (IA-32 architecture), 32e (Intel(R) 64 architecture)
+                         or arm (ARM architecture)
+
+**** First values listed are the default value ****
+-Dlib_type=normal|profile|stubs --- Library type can be normal, profile, or stubs.
+-Dbuild_type=release|debug|diag --- Build type can be release, debug, or diag.
+-Dversion=5|4                   --- libiomp5 version can be 5 or 4.
+-Domp_version=40|30             --- OpenMP version can be either 40 or 30.
+-Dmic_arch=knc|knf              --- Intel(R) MIC Architecture.  Can be knf (Knights Ferry) or knc (Knights Corner).
+                                    This value is ignored if os != mic
+-Dmic_os=lin|bsd                --- Operating system on Intel(R) MIC Architecture.  Can be either bsd or lin. 
+                                    This value is ignored if os != mic
+-Dcreate_fortran_modules=off|on --- Should the Fortran modules be created (requires Fortran compiler)
+-Dcoverage=off|on               --- Should include coverage compiler flags? (icc only)
+-Dstats=off|on                  --- Should include stats-gathering code?
+
+**** Micro tests ****
+After the library has been built, five microtests are performed (some will be skipped based upon the platform).
+These tests can be turned on (default) or off with the following options:
+-Dtest_touch=on|off             --- Should the touch test be done?
+-Dtest_relo=on|off              --- Should the position independent code test be done?
+-Dtest_execstack=on|off         --- Should the stack be checked for executability (it should not be executable)?
+-Dtest_instr=on|off             --- Should the Intel(R) MIC Libraries be checked for correct instruction set?
+-Dtest_deps=on|off              --- Should libiomp5's dependencies be checked?
+-Dtests=on|off                  --- Should any of the above tests be done?
+
+
+Examples usages of cmake
+========================
+* Typical usage:
+cmake -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc ..
+cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ..
+cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
+
+* With Various Options:
+cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -Dos=lin -Darch=32 ..
+cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -Dos=mac -Darch=32 -Dbuild_type=debug ..
+cmake -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DCMAKE_Fortran_COMPILER=ifort -Dstats=on -Dtests=off -Dcreate_fortran_modules=on ..
+
+* Stubs library:
+cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -Dlib_type=stubs ..
+
diff -uNr openmp.orig/runtime/CMakeLists.txt openmp/runtime/CMakeLists.txt
--- openmp.orig/runtime/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/CMakeLists.txt	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,1493 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+################
+# CMAKE libiomp5
+cmake_minimum_required(VERSION 2.8.11 FATAL_ERROR)
+project(libiomp C CXX ASM)
+
+#########
+# GLOBALS 
+set(GLOBAL_DEBUG 0)
+
+# add cmake directory to search for custom cmake functions
+set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
+
+# ../cmake/HelperFunctions.cmake 
+# contains check_variable(), say(), printv(), get_build_number(), set_legal_type(), set_legal_arch(), add_prefix(), add_postfix()...
+include(HelperFunctions)
+include(CppFlags)
+include(CFlags)
+include(FortranFlags)
+include(AsmFlags)
+include(LinkerFlags)
+include(SourceFiles)
+include(PerlFlags)
+include(FindPerl) # Standard cmake module to check for Perl
+
+# Set base libomp directory (directory with exports/ , src/ , tools/ , etc.)
+get_base_libomp_dir(LIBOMP_WORK)
+
+####################################################################
+# CONFIGURATION
+say("")
+say("------------------- CONFIGURATION --------------------------")
+printv(CMAKE_CURRENT_SOURCE_DIR)
+printv(CMAKE_CURRENT_BINARY_DIR)
+printv(CMAKE_SOURCE_DIR)
+printv(CMAKE_BINARY_DIR)
+printv(CMAKE_HOST_SYSTEM_PROCESSOR)
+printv(CMAKE_HOST_SYSTEM_NAME)
+printv(CMAKE_SYSTEM_PROCESSOR)
+printv(CMAKE_SYSTEM_NAME)
+printv(CMAKE_SYSTEM)
+printv(CMAKE_C_COMPILER)
+printv(CMAKE_CXX_COMPILER)
+printv(LIBOMP_WORK)
+
+# Build Configuration
+set(os_possible_values          lin mac win mic)
+set(arch_possible_values        32e 32 arm)
+set(build_type_possible_values  release debug diag)
+set(omp_version_possible_values 40 30)
+set(lib_type_possible_values    normal profile stubs)
+set(link_type_possible_values   static dynamic)
+set(mic_arch_possible_values    knf knc)
+set(mic_os_possible_values      bsd lin)
+set(mic_comp_possible_values    native offload)
+
+# Below, cmake will try and determine the operating system and architecture for you (it assumes Intel architecture)
+# These values are set in CMakeCache.txt when cmake is first run (-Dvar_name=... will take precedence)
+#  parameter  | default value             
+# ----------------------------
+if(${APPLE}) # Apple goes first because CMake considers Mac to be a Unix based operating system, while libiomp5 considers it a special case
+    set(os             mac         CACHE STRING "The operating system to build for (lin/mac/win/mic)")
+elseif(${UNIX})
+    set(os             lin         CACHE STRING "The operating system to build for (lin/mac/win/mic)")
+elseif(${WIN32})       
+    set(os             win         CACHE STRING "The operating system to build for (lin/mac/win/mic)")
+else()
+    set(os             lin         CACHE STRING "The operating system to build for (lin/mac/win/mic)")
+endif()
+
+if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
+    set(arch           32          CACHE STRING "The architecture to build for (32e/32/arm).  32e is Intel(R) 64 architecture, 32 is IA-32 architecture")
+else()
+    set(arch           32e         CACHE STRING "The architecture to build for (32e/32/arm).  32e is Intel(R) 64 architecture, 32 is IA-32 architecture")
+endif()
+
+set(lib_type       normal      CACHE STRING "Performance,Profiling,Stubs library (normal/profile/stubs)")
+set(build_type     release     CACHE STRING "The build type (release/debug/diag)")
+set(version        5           CACHE STRING "Produce libguide (version 4) or libiomp5 (version 5)")
+set(omp_version    40          CACHE STRING "The OpenMP version (40/30)")
+set(link_type      dynamic     CACHE STRING "Static or Dynamic library (static/dynamic)")
+set(mic_arch       knc         CACHE STRING "Intel(R) Many Integrated Core Architecture (Intel(R) MIC Architecture) (knf/knc).   Ignored if not Intel(R) MIC Architecture build.")
+set(mic_os         lin         CACHE STRING "Intel(R) MIC Architecture operating system (bsd/lin).   Ignored if not Intel(R) MIC Architecture build.")
+set(mic_comp       native      CACHE STRING "Intel(R) Many Integrated Core Compiler (Intel(R) MIC Compiler) (native/offload). Ignored if not Intel(R) MIC Architecture build.")
+set(create_fortran_modules OFF CACHE STRING "Create Fortran module files? (requires fortran compiler)")
+
+# - These tests are little tests performed after the library is formed.
+# - The library won't be copied to the exports directory until it has passed/skipped all below tests
+# - To skip these tests, just pass -Dtests=OFF to cmake or change tests value in CMakeCache.txt to OFF after running cmake
+set(test_touch      ON         CACHE BOOL   "Perform a small touch test?"                            )
+set(test_relo       ON         CACHE BOOL   "Perform a relocation test for dynamic libraries?"       )
+set(test_execstack  ON         CACHE BOOL   "Perform a execstack test for linux dynamic libraries?"  )
+set(test_instr      ON         CACHE BOOL   "Perform an instruction test for Intel(R) MIC Architecture libraries?" )
+set(test_deps       ON         CACHE BOOL   "Perform a library dependency test?"                     )
+set(tests           ON         CACHE BOOL   "Perform touch, relo, execstack, instr, and deps tests?" )
+
+# - coverage is icc specific and records code coverage, within OpenMP code, when executables are run with libiomp5
+# - stats-gathering enables OpenMP stats where things like the number of parallel regions, clock ticks spent in
+#   particular openmp regions are recorded.
+set(coverage        OFF        CACHE BOOL   "Include code coverage flags/libraries?"                 )
+set(stats           OFF        CACHE BOOL   "Stats-Gathering functionality?"                         )
+
+check_variable(os          "Operating System" "${os_possible_values}")
+check_variable(arch        "Architecture    " "${arch_possible_values}")
+check_variable(build_type  "Build Type      " "${build_type_possible_values}")
+check_variable(omp_version "OpenMP Version  " "${omp_version_possible_values}")
+check_variable(lib_type    "Lib Type        " "${lib_type_possible_values}")
+check_variable(link_type   "Link Type       " "${link_type_possible_values}")
+if("${os}" STREQUAL "mic")
+    check_variable(mic_arch    "Intel(R) MIC Architecture   " "${mic_arch_possible_values}")
+    check_variable(mic_os      "Intel(R) MIC Architecture OS" "${mic_os_possible_values}")
+    check_variable(mic_comp    "Intel(R) MIC Compiler type  " "${mic_comp_possible_values}")
+endif()
+say("Coverage         : ${coverage}")
+say("Stats-Gathering  : ${stats}")
+say("Fortran Modules  : ${create_fortran_modules}")
+# Get the build number from kmp_version.c
+# will say development if all zeros
+get_build_number("${LIBOMP_WORK}" build_number)
+if("${build_number}" STREQUAL "00000000")
+    set(build "development")
+else()
+    set(build "${build_number}")
+endif()
+say("Build            : ${build}")
+
+# Getting time and date 
+get_date(date)
+say("Date             : ${date}")
+
+say("------------------------------------------------------------")
+say("")
+printv(date)
+printv(coverage)
+printv(stats)
+
+#################################################################
+# Set some useful flags variables for other parts of cmake to use
+# Operating System
+set(LINUX FALSE)
+set(MAC FALSE)
+set(WINDOWS FALSE)
+set(MIC FALSE)
+set(FREEBSD FALSE)
+if("${os}" STREQUAL "lin")
+    set(LINUX TRUE)
+    set(real_os lin)
+elseif("${os}" STREQUAL "mac")
+    set(MAC TRUE)
+    set(real_os mac)
+elseif("${os}" STREQUAL "win")
+    set(WINDOWS TRUE)
+    set(real_os win)
+elseif("${os}" STREQUAL "mic")
+    set(MIC TRUE)
+    set(real_os lrb)
+endif()
+if("${CMAKE_SYSTEM_NAME}" STREQUAL "FreeBSD")
+    set(FREEBSD TRUE)
+endif()
+
+# Architecture
+set(IA32 FALSE)
+set(IA64 FALSE)
+set(INTEL64 FALSE)
+set(ARM FALSE)
+if("${arch}" STREQUAL "32")      # IA-32 architecture
+    set(IA32 TRUE)
+elseif("${arch}" STREQUAL "32e") # Intel(R) 64 architecture
+    set(INTEL64 TRUE)
+elseif("${arch}" STREQUAL "arm") # ARM architecture
+    set(ARM TRUE)
+endif()
+
+# Compiler Collection (corresponding c++ compiler is assumed)
+# Get C/C++ compiler name (path removed)
+get_filename_component(c "${CMAKE_C_COMPILER}" NAME)
+get_filename_component(cxx "${CMAKE_CXX_COMPILER}" NAME)
+set(GCC FALSE)
+set(CLANG FALSE)
+set(ICC FALSE)
+if("${c}" STREQUAL "icc" OR "${c}" STREQUAL "icl" OR "${c}" STREQUAL "icl.exe")
+    set(ICC TRUE)
+elseif("${c}" STREQUAL "gcc")
+    set(GCC TRUE)
+elseif("${c}" STREQUAL "clang")
+    set(CLANG TRUE)
+endif()
+
+# Set some flags based on build_type
+if("${build_type}" STREQUAL "release")
+    set(DEBUG_INFO FALSE)
+    set(DIAG FALSE)
+    set(OPTIMIZATION TRUE)
+elseif("${build_type}" STREQUAL "debug")
+    set(DEBUG_INFO TRUE)
+    set(DIAG TRUE)
+    set(OPTIMIZATION FALSE)
+else()
+    set(DEBUG_INFO TRUE)
+    set(DIAG TRUE)
+    set(OPTIMIZATION TRUE)
+endif()
+# Coverage on or off?
+set(COVERAGE FALSE)
+if("${coverage}") # string "on" or "ON" is seen as boolean TRUE
+    set(COVERAGE TRUE)
+endif()
+# Stats-gathering on or off?
+# Stats-gathering needs libstdc++ lib
+set(STATS_GATHERING FALSE)
+set(STD_CPP_LIB FALSE)
+if("${stats}") # string "on" or "ON" is seen as boolean TRUE
+    set(STATS_GATHERING TRUE)
+    set(STD_CPP_LIB TRUE)
+endif()
+# Linking type (dynamic/static)
+set(STATIC_LIBRARY  FALSE)
+set(DYNAMIC_LIBRARY FALSE)
+if("${link_type}" STREQUAL "static")
+    set(STATIC_LIBRARY TRUE)
+elseif("${link_type}" STREQUAL "dynamic")
+    set(DYNAMIC_LIBRARY TRUE)
+endif()
+# itt notify interface?
+set(USE_ITT_NOTIFY TRUE)
+if(${STATIC_LIBRARY})
+    set(USE_ITT_NOTIFY FALSE)
+endif()
+# normal, profile, stubs library.
+set(NORMAL_LIBRARY FALSE)
+set(STUBS_LIBRARY FALSE)
+set(PROFILE_LIBRARY FALSE)
+if("${lib_type}" STREQUAL "normal")
+    set(NORMAL_LIBRARY TRUE)
+elseif("${lib_type}" STREQUAL "profile")
+    set(PROFILE_LIBRARY TRUE)
+elseif("${lib_type}" STREQUAL "stubs")
+    set(STUBS_LIBRARY TRUE)
+endif()
+
+##################################
+# Error checking the configuration 
+if(${stats} AND (${WINDOWS} OR ${MAC}))
+    error_say("Stats-gathering functionality is only supported on Linux and Intel(R) MIC Architecture")
+endif()
+if(NOT ${ICC} AND ${COVERAGE})
+    error_say("Coverage is only supported with the Intel(R) C Compiler / Intel(R) C++ Compiler")
+endif()
+if(${COVERAGE} AND ${MIC})
+    error_say("Coverage is not supported for Intel(R) MIC Architecture libraries")
+endif()
+
+
+###############################################
+# - Create the suffix for the output directory
+# - Only add to suffix when not a default value
+# - Example suffix: .deb.30.s1 
+#   final output directory: exports/lin_32e.deb.30.s1/lib
+# - These suffixes imply the build is a Debug, OpenMP 3.0, Stats-Gathering version of the library
+if(NOT "${build_type}" STREQUAL "release")
+    string(SUBSTRING "${build_type}" 0 3 build_type_suffix)
+    set(suffix "${suffix}.${build_type_suffix}")
+endif()
+if(NOT "${omp_version}" STREQUAL "40")
+    set(suffix "${suffix}.${omp_version}")
+endif()
+if(${COVERAGE})
+    set(suffix "${suffix}.c1")
+endif()
+if(${STATS_GATHERING})
+    set(suffix "${suffix}.s1")
+endif()
+if(${MIC})
+    if(NOT "${mic_arch}" STREQUAL "knf")
+        set(suffix "${suffix}.${mic_arch}")
+    endif()
+    if(NOT "${mic_os}" STREQUAL "bsd")
+        set(suffix "${suffix}.${mic_os}")
+    endif()
+    if(NOT "${mic_comp}" STREQUAL "native")
+        string(SUBSTRING "${mic_comp}" 0 3 mic_comp_suffix)
+        set(suffix "${suffix}.${mic_comp_suffix}")
+    endif()
+endif()
+
+#########################
+# Setting file extensions 
+if(${WINDOWS})
+    set(asm ".asm")
+    set(obj ".obj")
+    set(lib ".lib")
+    set(dll ".dll")
+    set(exe ".exe")
+    set(cat "${dll}")
+else()
+    set(asm ".s")
+    set(obj ".o")
+    set(lib ".a")
+    if(${MAC})
+        set(dll ".dylib")
+    else()
+        set(dll ".so")
+    endif()
+    set(exe "")
+    set(cat ".cat")
+endif()
+
+#########################
+# Finding Necessary Tools 
+set(mic_executables_path "/usr/linux-k1om-4.7/bin")
+if(${WINDOWS})
+    find_a_program(link.exe "" archiver)
+    # objcopy is created for windows (source in tools/objcopy.cpp)
+    set(objcopy objcopy${exe})
+    set(linker ${archiver})
+elseif(${MAC}) 
+    if(${STATIC_LIBRARY})
+        find_a_program(libtool "" archiver)
+    endif()
+    set(linker ${CMAKE_C_COMPILER})
+elseif(${MIC})
+    if(${STATIC_LIBRARY})
+        find_a_program(x86_64-k1om-linux-ar "${mic_executables_path}" archiver)
+    endif()
+    find_a_program(x86_64-k1om-linux-objcopy "${mic_executables_path}" objcopy)
+    set(linker ${CMAKE_C_COMPILER})
+else() # *nix systems
+    if(${STATIC_LIBRARY})
+        find_a_program(ar "" archiver)
+    endif()
+    find_a_program(objcopy "" objcopy)
+    set(linker ${CMAKE_C_COMPILER})
+endif()
+# perl
+if(NOT "${PERL_FOUND}") # variable is defined in FindPerl cmake module
+    error_say("Error: Could not find valid perl")
+endif()
+
+
+#########################
+# Setting directory names
+set(platform       "${real_os}_${arch}")
+set(LIBOMP_BUILD   "${CMAKE_CURRENT_BINARY_DIR}")
+set(tools_dir      "${LIBOMP_WORK}/tools")
+set(export_dir     "${LIBOMP_WORK}/exports")
+set(export_cmn_dir "${export_dir}/common${suffix}")
+set(export_ptf_dir "${export_dir}/${platform}${suffix}")
+_export_lib_dir(${platform} export_lib_dir)
+if(${MAC})
+    _export_lib_fat_dir(${platform} export_lib_fat_dir)
+endif()
+set(src_dir        "${LIBOMP_WORK}/src")
+set(inc_dir        "${LIBOMP_WORK}/src/include/${omp_version}")
+set(build_dir      "${CMAKE_CURRENT_BINARY_DIR}")
+
+
+############################
+# Setting final library name
+if("${version}" STREQUAL "4")
+    if(${STUBS_LIBRARY})
+        set(lib_item "libompstub")
+    else()
+        set(lib_item "libguide")
+    endif()
+    if(${WINDOWS} AND ${DYNAMIC_LIBRARY})
+        set(lib_item "${lib_item}40")
+    endif()
+    if(${PROFILE_LIBRARY})
+        set(lib_item "${lib_item}_stats")
+    endif()
+elseif("${version}" STREQUAL "5")
+    set(lib_item "libiomp")
+    if(${PROFILE_LIBRARY})
+        set(lib_item "${lib_item}prof")
+    endif()
+    if(${STUBS_LIBRARY})
+        set(lib_item "${lib_item}stubs")
+    endif()
+    set(lib_item "${lib_item}${version}")
+    if(${WINDOWS} AND ${DYNAMIC_LIBRARY})
+        set(lib_item "${lib_item}md")
+    elseif(${WINDOWS} AND ${STATIC_LIBRARY})
+        set(lib_item "${lib_item}mt")
+    endif()
+endif()
+if(${DYNAMIC_LIBRARY})
+    set(lib_ext "${dll}")
+else()
+    set(lib_ext "${lib}")
+endif()
+# ${lib_file} is real library name
+#  DYNAMIC        STATIC
+# libiomp5.so    libiomp5.a     for Linux
+# libiomp5.dylib libiomp5.a     for Mac
+# libiomp5md.dll libiomp5mt.lib for Windows
+set(lib_file "${lib_item}${lib_ext}")
+
+
+########################################
+# Setting export file names (full paths)
+if(${WINDOWS} AND ${DYNAMIC_LIBRARY})
+    set(imp_file "${lib_item}${lib}")
+    set(def_file "${lib_item}.def")
+    set(res_file "${lib_item}.res")
+    set(rc_file  "${lib_item}.rc")
+    if(${DEBUG_INFO} OR (${NORMAL_LIBRARY} AND "${version}" STREQUAL "5"))
+        set(pdb_file  "${lib_item}.pdb")
+    endif()
+endif()
+if(NOT ${WINDOWS} AND NOT ${MAC})
+    if(${DYNAMIC_LIBRARY})
+        if(NOT ${DEBUG_INFO})
+            set(dbg_file "${lib_item}.dbg")
+        endif()
+    else()
+        set(dbg_strip "on")
+    endif()
+endif()
+set(export_lib_files  "${lib_file}" "${imp_file}" "${pdb_file}" "${dbg_file}")
+set(export_inc_files  "iomp_lib.h")
+set(export_mod_files  "omp_lib.mod" "omp_lib_kinds.mod")
+set(export_cmn_files1 "omp.h" "omp_lib.h" "omp_lib.f" "omp_lib.f90")
+set(export_cmn_files2 "iomp.h")
+add_prefix("${export_lib_dir}/"                export_lib_files)
+add_prefix("${export_ptf_dir}/include_compat/" export_inc_files)
+add_prefix("${export_ptf_dir}/include/"        export_mod_files)
+add_prefix("${export_cmn_dir}/include/"        export_cmn_files1)
+add_prefix("${export_cmn_dir}/include_compat/" export_cmn_files2)
+set(export_cmn_files "${export_cmn_files1}" "${export_cmn_files2}")
+if("${export_lib_fat_dir}")
+    set(export_lib_fat_files "${lib_file}" "${imp_file}")
+    add_prefix("${export_lib_fat_dir}/" export_lib_fat_files)
+endif()
+printv(export_lib_files)
+
+
+#########################
+# Getting legal type/arch
+set_legal_type(legal_type)
+set_legal_arch(legal_arch)
+if(${MAC})
+    # Check the OS X version (we need it to decide which tool use for objects accumulation)
+    set_mac_os_new(mac_os_new)
+endif()
+
+#################################################
+# Preprocessor Definitions (cmake/CppFlags.cmake)
+# Preprocessor Includes 
+# Compiler (C/C++) Flags (cmake/CFlags.cmake)
+# Assembler Flags (cmake/AsmFlags.cmake)
+# Fortran   Flags (cmake/FortranFlags.cmake)
+# Linker    Flags (cmake/LinkerFlags.cmake)
+# Archiver  Flags (cmake/LinkerFlags.cmake)
+# Helper Perl Script Flags (cmake/PerlFlags.cmake)
+set(include_dirs -I ${CMAKE_CURRENT_BINARY_DIR} -I ${src_dir} -I ${src_dir}/i18n -I ${inc_dir} -I ${src_dir}/thirdparty/ittnotify)
+set_cpp_flags(cpp_flags)
+set(cpp_flags "${include_dirs}" "${cpp_flags}")
+set_c_and_cxx_flags(c_flags cxx_flags)
+set_as_flags(as_flags)
+set_fort_flags(fort_flags)
+set_linker_flags(ld_flags ld_flags_libs)
+set_archiver_flags(ar_flags)
+set_ev_flags(ev_flags) # expand-vars.pl flags
+set_gd_flags(gd_flags) # generate-def.pl flags (Windows only)
+set(oa_opts "--os=${real_os}" "--arch=${arch}") # sent to the perl scripts
+
+printv(cpp_flags)
+printv(c_flags)
+printv(cxx_flags)
+printv(as_flags)
+printv(fort_flags)
+printv(ld_flags)
+printv(ld_flags_libs)
+printv(ar_flags)
+printv(ev_flags)
+printv(gd_flags)
+printv(oa_opts)
+
+#########################################################
+# Gettings Correct Source Files (cmake/SourceFiles.cmake)
+set_c_files(lib_c_items)
+set_cpp_files(lib_cxx_items)
+set_asm_files(lib_asm_items)
+set_imp_c_files(imp_c_items)
+printv(lib_c_items)
+printv(lib_cxx_items)
+printv(lib_asm_items)
+printv(imp_c_items)
+
+#########################################################
+# Setting all source and object file names
+# lib_obj_files is used a lot in recipes below
+set(lib_src_files "${lib_c_items}" "${lib_cxx_items}" "${lib_asm_items}")
+set(lib_obj_files "${lib_c_items}" "${lib_cxx_items}" "${lib_asm_items}")
+set(imp_src_files "${imp_c_items}" "${imp_cxx_items}" "${imp_asm_items}")
+set(imp_obj_files "${imp_c_items}" "${imp_cxx_items}" "${imp_asm_items}")
+strip_suffix(lib_obj_files lib_obj_files)
+strip_suffix(imp_obj_files imp_obj_files)
+add_suffix("${obj}" lib_obj_files)
+add_suffix("${obj}" imp_obj_files)
+add_prefix("${src_dir}/" lib_src_files)
+add_prefix("${src_dir}/" imp_src_files)
+printv(lib_src_files)
+printv(imp_src_files)
+printv(lib_obj_files)
+printv(imp_obj_files)
+
+
+############################################################
+# Find libraries to link in statically if compiling with icc
+# If icc has been properly sourced, then either LD_LIBRARY_PATH (linux) 
+# or LIBRARY_PATH (mac) or LIB (windows) will contain the needed libraries
+if(${ICC})
+    # convert the environment variable to a cmake list variable
+    if(${WINDOWS})
+        set(library_search_path "$ENV{LIB}")
+    elseif(${MAC})
+        set(library_search_path "$ENV{LIBRARY_PATH}")
+        string(REPLACE ":" ";" library_search_path "${library_search_path}")
+    else() # true *nix systems
+        set(library_search_path $ENV{LD_LIBRARY_PATH})
+        string(REPLACE ":" ";" library_search_path "${library_search_path}")
+    endif()
+    # find the actual libraries using new cmake list variable based off of 
+    # library path environment variable
+    if(${WINDOWS})
+        find_library(libirc_path  libirc${lib}  PATHS ${library_search_path} DOC "Path to libirc${lib}")
+        find_library(libipgo_path libipgo${lib} PATHS ${library_search_path} DOC "Path to libirc${lib}")
+    else() # if (LINUX , MAC , Intel(R) MIC Architecture)
+        if(${DYNAMIC_LIBRARY})
+            find_library(libirc_path  libirc_pic${lib}  PATHS ${library_search_path} DOC "Path to libirc${lib}")
+            find_library(libipgo_path libipgo_pic${lib} PATHS ${library_search_path} DOC "Path to libipgo${lib}")
+            if(NOT "${libirc}")
+                find_library(libirc_path  libirc${lib}  PATHS ${library_search_path} DOC "Path to libirc${lib}")
+                find_library(libipgo_path libipgo${lib} PATHS ${library_search_path} DOC "Path to libipgo${lib}")
+            endif()
+        else()
+            find_library(libirc_path  libirc${lib}  PATHS ${library_search_path} DOC "Path to libirc${lib}")
+            find_library(libipgo_path libipgo${lib} PATHS ${library_search_path} DOC "Path to libipgo${lib}")
+        endif()
+    endif()
+
+    # determine libraries to link in statically based off of configuration
+    if(NOT ${MIC} AND ${STATIC_LIBRARY})
+        printv(libirc_path)
+        list(APPEND linked_in_libs "libirc")
+        if("${libirc_path}" MATCHES "NOTFOUND")
+            list(REMOVE_ITEM linked_in_libs "libirc")
+            warning_say("Could not find libirc.a.  Will not statically include its objects in libiomp5")
+        endif()
+    endif()
+    if(${MAC} AND ${DYNAMIC_LIBRARY})
+        list(APPEND linked_in_libs "libirc")
+        if("${libirc_path}" MATCHES "NOTFOUND")
+            list(REMOVE_ITEM linked_in_libs "libirc")
+            warning_say("Could not find libirc.a.  Will not statically include its objects in libiomp5")
+        endif()
+    endif()
+    if(${COVERAGE})
+        list(APPEND linked_in_libs "libipgo")
+        if("${libipgo_path}" MATCHES "NOTFOUND")
+            list(REMOVE_ITEM linked_in_libs "libipgo")
+            warning_say("Could not find libipgo.a.  Will not statically include its objects in libiomp5")
+        endif()
+    endif()
+endif()
+# [] - indicates optional
+# linked_in_libs = [libirc] [libipgo] 
+# linked_in_libs_targets = [libirc-objs] [libipgo-objs]
+# lib_obj_flags = [libirc/*.o] [libipgo/*.o]
+set(have_linked_in_libs FALSE)
+if(NOT "${linked_in_libs}" STREQUAL "")
+    set(have_linked_in_libs TRUE)
+endif()
+set(libirc  "${libirc_path}")
+set(libipgo "${libipgo_path}")
+set(linked_in_libs_targets "${linked_in_libs}")
+add_suffix("-objs" linked_in_libs_targets)
+set(lib_obj_flags "${linked_in_libs}")
+add_suffix("/*${obj}" lib_obj_flags)
+printv(linked_in_libs)
+printv(linked_in_libs_targets)
+printv(lib_obj_flags)
+printv(libirc)
+printv(libipgo)
+
+##################################################################
+# Setup exact object dependencies for unstripped/${lib_file} which 
+# is the main library to build. 
+#
+# Some object manipulations might occur
+if(${WINDOWS})
+    if(${have_linked_in_libs})
+        set(lib_dependencies wiped-objs)
+        set(lib_objects      wiped/*${obj})
+    else()
+        set(lib_dependencies needed-headers "${lib_obj_files}")
+        set(lib_objects      "${lib_obj_files}")
+    endif()
+elseif(${MAC})
+    set(lib_dependencies needed-headers "iomp${obj}")
+    set(lib_objects      "iomp${obj}")
+else() # True *nix systems
+    if(${have_linked_in_libs})
+        set(lib_dependencies required-objs)
+        set(lib_objects      required/*${obj})
+    else()
+        set(lib_dependencies needed-headers "${lib_obj_files}")
+        set(lib_objects      "${lib_obj_files}")
+    endif()
+endif()
+
+####################################################################
+#                     ---------------------                        #
+#                     --- Rules/Recipes ---                        #
+#                     ---------------------                        #
+####################################################################
+# Below, ${ldeps} always stands for "local dependencies" for the 
+# next immediate target to be created via add_custom_target() or 
+# add_custom_command()
+
+####################
+# --- Create all ---
+add_custom_target(lib ALL DEPENDS ${export_lib_files})
+add_custom_target(inc ALL DEPENDS ${export_inc_files})
+if(${create_fortran_modules})
+    add_custom_target(mod ALL DEPENDS ${export_mod_files})
+endif()
+# --- Enforce the tests to be completed/skipped before copying to exports directory ---
+if(${WINDOWS})
+    set(test-deps test-touch-mt/.success test-touch-md/.success test-relo/.success test-execstack/.success test-instr/.success test-deps/.success)
+else()
+    set(test-deps test-touch-rt/.success test-relo/.success test-execstack/.success test-instr/.success test-deps/.success)
+endif()
+set_source_files_properties(${export_lib_files} PROPERTIES OBJECT_DEPENDS "${test-deps}")
+
+#############################
+# --- Create Common Files ---
+add_custom_target(common DEPENDS ${export_cmn_files})
+add_custom_target(clean-common 
+    COMMAND ${CMAKE_COMMAND} -E remove -f ${export_cmn_files}
+)
+
+######################################################
+# --- Copy files to export directories ---
+# - just a simple copy recipe which acts as an install step
+# - copies out of the src_dir into the dest_dir
+#
+# dest_dir/target : src_dir/target dest_dir/.dir 
+#    cp src_dir/target dest_dir/target
+macro (simple_copy_recipe target src_dir dest_dir)
+    get_source_file_property(extra_depends ${dest_dir}/${target} OBJECT_DEPENDS)
+    if("${extra_depends}" STREQUAL "NOTFOUND")
+        set(extra_depends)
+    endif()
+    set(ldeps ${src_dir}/${target} "${extra_depends}" ${dest_dir}/.dir)
+    if(NOT "${target}" STREQUAL "")
+        add_custom_command(
+            OUTPUT   ${dest_dir}/${target}
+            COMMAND  ${CMAKE_COMMAND} -E copy ${src_dir}/${target} ${dest_dir}/${target}
+            DEPENDS  ${ldeps}
+        )
+    endif()
+endmacro()
+# copy from build directory to final resting places in exports directory
+simple_copy_recipe("omp.h"             "${build_dir}"  "${export_cmn_dir}/include")
+simple_copy_recipe("omp_lib.h"         "${build_dir}"  "${export_cmn_dir}/include")
+simple_copy_recipe("omp_lib.f"         "${build_dir}"  "${export_cmn_dir}/include")
+simple_copy_recipe("omp_lib.f90"       "${build_dir}"  "${export_cmn_dir}/include")
+simple_copy_recipe("iomp.h"            "${build_dir}"  "${export_cmn_dir}/include_compat")
+simple_copy_recipe("${lib_file}"       "${build_dir}"  "${export_lib_dir}")
+simple_copy_recipe("${imp_file}"       "${build_dir}"  "${export_lib_dir}")
+simple_copy_recipe("${pdb_file}"       "${build_dir}"  "${export_lib_dir}")
+simple_copy_recipe("${dbg_file}"       "${build_dir}"  "${export_lib_dir}")
+simple_copy_recipe("omp_lib.mod"       "${build_dir}"  "${export_ptf_dir}/include")
+simple_copy_recipe("omp_lib_kinds.mod" "${build_dir}"  "${export_ptf_dir}/include")
+simple_copy_recipe("iomp_lib.h"        "${build_dir}"  "${export_ptf_dir}/include_compat")
+
+
+######################################################
+# $(lib_file) : cp recipe
+# $(dbg_file) : objcopy, then cp recipe
+if(NOT "${dbg_file}" STREQUAL "")
+    simple_copy_recipe("${lib_file}"   "${build_dir}/stripped"   "${build_dir}")
+    simple_copy_recipe("${dbg_file}"   "${build_dir}/unstripped" "${build_dir}")
+    add_custom_command(
+        OUTPUT  ${build_dir}/unstripped/${dbg_file}
+        COMMAND ${objcopy} --only-keep-debug ${build_dir}/unstripped/${lib_file} ${build_dir}/unstripped/${dbg_file} 
+        DEPENDS ${build_dir}/unstripped/${lib_file} 
+    )
+else()
+    simple_copy_recipe("${lib_file}"   "${build_dir}/unstripped"  "${build_dir}")
+endif()
+
+######################################################
+# strip debugging info from unstripped/${lib_file}
+# stripped/$(lib_file)
+add_custom_command(
+    OUTPUT  ${build_dir}/stripped/${lib_file}
+    COMMAND ${objcopy} --strip-debug ${build_dir}/unstripped/${lib_file} ${build_dir}/stripped/${lib_file}.tmp
+    COMMAND ${objcopy} --add-gnu-debuglink=${dbg_file} ${build_dir}/stripped/${lib_file}.tmp ${build_dir}/stripped/${lib_file}
+    DEPENDS iomp5 "${build_dir}/${dbg_file}" "${build_dir}/stripped/.dir"
+)
+
+######################################################
+# Build the main library (static/dynamic)
+# unstripped/$(lib_file) <== Main library file to create
+string_to_list("${c_flags}"        c_flags)
+string_to_list("${cpp_flags}"      cpp_flags)
+string_to_list("${cxx_flags}"      cxx_flags)
+string_to_list("${as_flags}"       as_flags)
+
+# objects depend on : .inc files and omp.h
+# This way the *.inc and omp.h are generated before any compilations take place
+add_custom_target(needed-headers DEPENDS ${build_dir}/kmp_i18n_id.inc ${build_dir}/kmp_i18n_default.inc ${build_dir}/omp.h)
+
+# To make the archiver and linker commands generic, the -o flag (output flag) has to be setup correctly beforehand and just called
+# ar_out or linker_out because some linkers/archivers require a space between the flag and output name while
+# others do not care if there is a space or not.  CMake always trys to add a backslash after a space within a variable if it used
+# inside a COMMAND statement.  i.e., if "${output_flag}" == "-o " (NOTE THE SPACE), then it shows up on the command line as "-o\ "
+# which is absolutely not what you want.
+if(${WINDOWS}) 
+    set(ar_out     -out:unstripped/${lib_file})
+    set(ar_out_imp -out:${imp_file})
+    set(linker_out -out:unstripped/${lib_file})
+elseif(${MAC}) # macs require space for archiver
+    set(ar_out     -o unstripped/${lib_file})
+    set(linker_out -o unstripped/${lib_file})
+else()
+    set(ar_out        unstripped/${lib_file})
+    set(linker_out -o unstripped/${lib_file})
+endif()
+
+# Build the static library
+if(${STATIC_LIBRARY})
+    string_to_list("${ar_flags}"   ar_flags)
+    add_custom_target(iomp5 DEPENDS unstripped/${lib_file})
+    set(ldeps "${lib_dependencies}" "unstripped/.dir")
+    if(NOT "${dbg_strip}" STREQUAL "" AND NOT ${DEBUG_INFO})
+        add_custom_command(
+            OUTPUT unstripped/${lib_file}
+            COMMAND ${CMAKE_COMMAND} -E remove -f unstripped/${lib_file}
+            COMMAND ${archiver} ${ar_flags} ${ar_out} ${lib_objects}
+            COMMAND ${objcopy} --strip-debug unstripped/${lib_file}
+            DEPENDS ${ldeps}
+        )
+    else()
+        add_custom_command(
+            OUTPUT unstripped/${lib_file}
+            COMMAND ${CMAKE_COMMAND} -E remove -f unstripped/${lib_file}
+            COMMAND ${archiver} ${ar_flags} ${ar_out} ${lib_objects}
+            DEPENDS ${ldeps}
+        )
+    endif()
+# or build the dynamic library
+elseif(${DYNAMIC_LIBRARY})
+    string_to_list("${ld_flags}"       ld_flags)
+    string_to_list("${ld_flags_libs}" ld_flags_libs)
+
+    add_custom_target(iomp5 DEPENDS unstripped/${lib_file})
+    set(ldeps "${lib_dependencies}" "unstripped/.dir" ${def_file} ${res_file}) # def_file and res_file only defined for Windows
+    if(NOT "${pdb_file}" STREQUAL "" AND NOT ${DEBUG_INFO})
+        add_custom_command(
+            OUTPUT unstripped/${lib_file}
+            COMMAND ${linker} ${ld_flags} ${linker_out} ${lib_objects} ${ld_flags_libs} ${res_file}
+            COMMAND ${CMAKE_COMMAND} -E rename ${pdb_file} ${pdb_file}.nonstripped
+            COMMAND ${CMAKE_COMMAND} -E rename ${pdb_file}.stripped ${pdb_file}
+            DEPENDS ${ldeps}
+        )
+    else()
+        add_custom_command(
+            OUTPUT  unstripped/${lib_file}
+            COMMAND ${linker} ${ld_flags} ${linker_out} ${lib_objects} ${ld_flags_libs} ${res_file}
+            DEPENDS ${ldeps}
+        )
+    endif()
+endif()
+
+
+######################################################
+# --- Source file specific flags ---
+# kmp_version.o : -D _KMP_BUILD_TIME="\"$(date}\""
+set_source_files_properties(kmp_version${obj}  PROPERTIES COMPILE_DEFINITIONS "-D _KMP_BUILD_TIME=\"\\\"${date}\\\"\"")
+
+# z_Linux_asm.o : -D KMP_ARCH_*
+if(${ARM})
+    set_source_files_properties(z_Linux_asm${obj} PROPERTIES COMPILE_DEFINITIONS "-D KMP_ARCH_ARM")
+elseif(${INTEL64})
+    set_source_files_properties(z_Linux_asm${obj} PROPERTIES COMPILE_DEFINITIONS "-D KMP_ARCH_X86_64")
+elseif(${IA32})
+    set_source_files_properties(z_Linux_asm${obj} PROPERTIES COMPILE_DEFINITIONS "-D KMP_ARCH_X86")
+endif()
+
+if(${WINDOWS})
+    set_source_files_properties(ittnotify_static${obj} PROPERTIES COMPILE_DEFINITIONS "-D UNICODE")
+endif()
+
+
+######################################################
+# wiped/.objs (Windows specific)
+add_custom_target(wiped-objs DEPENDS wiped/.objs)
+set(wipe_flag "--wipe-regexp=\"(-|/)(defaultlib|DEFAULTLIB):\\\"(libir|libc|LIBC|OLDN|libmm|libde|svml).*?\\\"\"")
+add_custom_command(
+    OUTPUT wiped/.objs
+    COMMAND ${CMAKE_COMMAND} -E remove -f wiped/*${obj}
+    COMMAND ${PERL_EXECUTABLE} ${tools_dir}/wipe-string.pl --quiet ${wipe_flag} --target-directory=wiped required/*${obj}
+    COMMAND ${CMAKE_COMMAND} -E touch wiped/.objs
+    DEPENDS required-objs ${tools_dir}/wipe-string.pl wiped/.dir
+)
+
+
+######################################################
+# required/.objs : [libirc-objs  libipgo-objs]  *.o  required/.dir
+add_custom_target(required-objs DEPENDS required/.objs) 
+set(ldeps "${linked_in_libs_targets}" "${lib_obj_files}" "required/.dir")
+if(${WINDOWS})
+    list(APPEND ldeps ${objcopy})
+endif()
+add_custom_command(
+    OUTPUT  required/.objs
+    COMMAND ${CMAKE_COMMAND} -E remove -f required/*${obj}
+    COMMAND ${PERL_EXECUTABLE} ${tools_dir}/required-objects.pl --quiet ${oa_opts} --prefix=__kmp_external_ --base ${lib_obj_files} --extra ${lib_obj_flags} --copy-all=required 
+    COMMAND ${CMAKE_COMMAND} -E touch required/.objs
+    DEPENDS ${ldeps}
+)
+# required/.objs : kmp_i18n_id.inc kmp_i18n_default.inc omp.h (needed-headers)
+add_dependencies(required-objs needed-headers)
+
+
+######################################################
+# libirc/.objs : libirc.a  extract-objects.pl  libirc/.dir
+add_custom_target(libirc-objs DEPENDS libirc/.objs)
+add_custom_command(
+    OUTPUT  libirc/.objs
+    COMMAND ${CMAKE_COMMAND} -E remove -f libirc/*${obj}
+    COMMAND ${PERL_EXECUTABLE} ${tools_dir}/extract-objects.pl --quiet ${oa_opts} --output=libirc ${libirc}
+    COMMAND ${CMAKE_COMMAND} -E touch libirc/.objs
+    DEPENDS ${libirc} ${tools_dir}/extract-objects.pl libirc/.dir
+)
+
+
+######################################################
+# libipgo/.objs : libipgo.a  extract-objects.pl  libipgo/.dir
+add_custom_target(libipgo-objs DEPENDS libipgo/.objs)
+add_custom_command(
+    OUTPUT  libipgo/.objs
+    COMMAND ${CMAKE_COMMAND} -E remove -f libipgo/*${obj}
+    COMMAND ${PERL_EXECUTABLE} ${tools_dir}/extract-objects.pl --quiet ${oa_opts} --output=libipgo ${libipgo}
+    COMMAND ${CMAKE_COMMAND} -E touch libipgo/.objs
+    DEPENDS ${libipgo} ${tools_dir}/extract-objects.pl libipgo/.dir
+)
+
+
+######################################################
+# MAC specific build rules
+if(${MAC})
+    # fat library rules
+    if(${INTEL64})
+        _export_lib_fat_dir("mac_32e" export_fat_mac_32e)
+        _export_lib_dir("mac_32"  export_mac_32)
+        _export_lib_dir("mac_32e" export_mac_32e)
+        printv(export_fat_mac_32e)
+        printv(export_mac_32)
+        printv(export_mac_32e)
+        add_custom_target(fat DEPENDS ${export_fat_mac_32e}/${lib_file})
+        add_custom_command(
+            OUTPUT  ${export_fat_mac_32e}/${lib_file}
+            COMMAND ${CMAKE_COMMAND} -E echo Building 32 and 32e fat libraries
+            COMMAND lipo -create -output ${export_fat_mac_32e}/${lib_file} ${export_mac_32}/${lib_file} ${export_mac_32e}/${lib_file}
+            DEPENDS ${export_mac_32}/${lib_file} ${export_mac_32e}/${lib_file} ${export_fat_mac_32e}/.dir
+        )
+    endif()
+
+    # iomp.o
+    set(ldeps "${lib_obj_files}" "external-symbols.lst" "external-objects.lst")
+    if(${mac_os_new})
+        add_custom_command(
+            OUTPUT  iomp${obj}
+            COMMAND ld -r -unexported_symbols_list external-symbols.lst -non_global_symbols_strip_list external-symbols.lst -filelist external-objects.lst -o iomp${obj} ${lib_obj_files}
+            DEPENDS ${ldeps}
+        )
+    else()
+        add_custom_command(
+            OUTPUT  iomp${obj}
+            COMMAND ${CMAKE_C_COMPILER} -r -nostartfiles -static-intel -no-intel-extensions -Wl,-unexported_symbols_list,external-symbols.lst -Wl,-non_global_symbols_strip_list,external-symbols.lst -filelist external-objects.lst -o iomp${obj} ${lib_obj_files}
+            DEPENDS ${ldeps}
+        )
+    endif()
+
+    # external-symbols.lst
+    add_custom_command(
+        OUTPUT  external-symbols.lst
+        COMMAND ${CMAKE_NM} -goj `cat external-objects.lst` > external-symbols.lst.0.tmp
+        COMMAND cut -f2 -d\" \" external-symbols.lst.0.tmp > external-symbols.lst.1.tmp
+        COMMAND ${CMAKE_COMMAND} -E rename external-symbols.lst.1.tmp external-symbols.lst
+        DEPENDS external-objects.lst
+    )
+
+    # external-objects.lst
+    set(ldeps "${lib_obj_files}" "${linked_in_libs_targets}" "kmp_dummy${obj}" ${tools_dir}/required-objects.pl)
+    add_custom_command(
+        OUTPUT  external-objects.lst
+        COMMAND ${PERL_EXECUTABLE} ${tools_dir}/required-objects.pl ${oa_opts} --base ${lib_obj_files} --extra ${lib_obj_flags} --print-extra > external-objects.lst.tmp
+        COMMAND echo "kmp_dummy${obj}" >> external-objects.lst.tmp
+        COMMAND ${CMAKE_COMMAND} -E rename external-objects.lst.tmp external-objects.lst
+        DEPENDS ${ldeps}
+    )
+    # kmp_dummy.c 
+    file(WRITE ${build_dir}/kmp_dummy.c "void __kmp_dummy() {}")
+    # kmp_dummy.o
+    add_custom_command(
+        OUTPUT  kmp_dummy${obj}
+        COMMAND ${CMAKE_C_COMPILER} ${cpp_flags} ${c_flags} -c ${build_dir}/kmp_dummy.c
+        DEPENDS ${build_dir}/kmp_dummy.c
+    )
+endif()
+
+######################################################
+# Windows specific build rules
+if(${WINDOWS})
+
+    # --- Create $(imp_file) ---
+    if(NOT "${imp_file}" STREQUAL "")
+        string_to_list("${ar_flags}"   ar_flags)
+        set(ldeps ${imp_obj_files} ${build_dir}/import${lib})
+        add_custom_command(
+            OUTPUT  ${imp_file}
+            COMMAND ${CMAKE_COMMAND} -E remove -f ${imp_file}
+            COMMAND ${archiver} ${ar_flags} ${ar_out_imp} ${ldeps}
+            DEPENDS ${ldeps}
+        )
+    endif()
+
+    # --- Create $(def_file) ---
+    if(NOT "${def_file}" STREQUAL "")
+        string_to_list("${gd_flags}" gd_flags)
+        add_custom_command(
+            OUTPUT  ${def_file}
+            COMMAND ${PERL_EXECUTABLE} ${tools_dir}/generate-def.pl ${gd_flags} -o ${def_file} ${src_dir}/dllexports
+            DEPENDS ${src_dir}/dllexports ${tools_dir}/generate-def.pl
+        )
+    endif()
+    # --- Creating .res files from .rc files (Windows Only)
+    macro(rc2res rcbase)
+        add_custom_command(
+            OUTPUT ${rcbase}.res
+            COMMAND rc -fo${rcbase}.res ${rcbase}.rc
+            DEPENDS ${rcbase}.rc
+        )
+    endmacro()
+    rc2res(${lib_item})
+
+    # --- Create $(rc_file) ---
+    if(NOT "${rc_file}" STREQUAL "")
+        add_custom_command(
+            OUTPUT  ${rc_file}
+            COMMAND ${CMAKE_COMMAND} -E copy libiomp.rc ${rc_file}
+            DEPENDS libiomp.rc
+        )
+    endif()
+
+    # --- Create objcopy.exe ---
+    add_custom_command(
+        OUTPUT  ${objcopy} 
+        COMMAND ${CMAKE_CXX_COMPILER} -o ${objcopy} ${tools_dir}/objcopy.cpp
+        DEPENDS ${tools_dir}/objcopy.cpp
+    )
+endif()
+
+
+######################################################
+# kmp_i18n_id.inc
+set(perlcmd "${PERL_EXECUTABLE}" "${tools_dir}/message-converter.pl" "${oa_opts}" "--prefix=kmp_i18n" "--enum=kmp_i18n_id.inc" "${src_dir}/i18n/en_US.txt")
+add_custom_command(
+    OUTPUT  ${build_dir}/kmp_i18n_id.inc
+    COMMAND ${perlcmd}
+    DEPENDS ${src_dir}/i18n/en_US.txt ${tools_dir}/message-converter.pl
+)
+
+######################################################
+# kmp_i18n_default.inc
+set(perlcmd "${PERL_EXECUTABLE}" "${tools_dir}/message-converter.pl" "${oa_opts}" "--prefix=kmp_i18n" "--default=kmp_i18n_default.inc" "${src_dir}/i18n/en_US.txt")
+add_custom_command(
+    OUTPUT  ${build_dir}/kmp_i18n_default.inc
+    COMMAND ${perlcmd}
+    DEPENDS ${src_dir}/i18n/en_US.txt ${tools_dir}/message-converter.pl
+)
+
+######################################################
+# Rebuild kmp_version.o on any change to have real build-time-string always updated
+# kmp_version.o depends on all other objects
+set(lib_obj_files_temp "${lib_obj_files}")
+list(REMOVE_ITEM lib_obj_files_temp kmp_version${obj})
+printv(lib_obj_files_temp)
+set_source_files_properties(kmp_version${obj} PROPERTIES OBJECT_DEPENDS "${lib_obj_files_temp}")
+
+
+######################################################
+# TESTS
+# The following micro-tests are small tests to perform on 
+# the library just created in ${build_dir}/, there are currently
+# five micro-tests: 
+# 1) test-touch 
+#    - Compile and run a small program using newly created libiomp5 library
+#    - Fails if test-touch.c does not compile or if test-touch.c does not run after compilation
+#    - Program dependencies: gcc or g++, grep, bourne shell
+#    - Available for all Linux,Mac,Windows builds.  Not availble on Intel(R) MIC Architecture builds.
+# 2) test-relo
+#    - Tests dynamic libraries for position-dependent code (can not have any position dependent code)
+#    - Fails if TEXTREL is in output of readelf -d libiomp5.so command
+#    - Program dependencies: readelf, grep, bourne shell
+#    - Available for Linux, Intel(R) MIC Architecture dynamic library builds. Not available otherwise.
+# 3) test-execstack 
+#    - Tests if stack is executable
+#    - Fails if stack is executable. Should only be readable and writable. Not exectuable.
+#    - Program dependencies: perl, readelf
+#    - Available for Linux dynamic library builds. Not available otherwise.
+# 4) test-instr (Intel(R) MIC Architecutre only) 
+#    - Tests Intel(R) MIC Architecture libraries for valid instruction set
+#    - Fails if finds invalid instruction for Intel(R) MIC Architecture (wasn't compiled with correct flags)
+#    - Program dependencies: perl, objdump 
+#    - Available for Intel(R) MIC Architecture builds. Not available otherwise.
+# 5) test-deps      
+#    - Tests newly created libiomp5 for library dependencies
+#    - Fails if sees a dependence not listed in td_exp variable below
+#    - Program dependencies: perl, (linux)readelf, (mac)otool[64], (windows)link.exe
+#    - Available for Linux,Mac,Windows, Intel(R) MIC Architecture dynamic builds and Windows static builds. Not available otherwise.
+
+# test-touch
+if(NOT ${MIC} AND ${test_touch} AND ${tests})
+    if(${WINDOWS})
+        set(do_test_touch_mt TRUE)
+        if(${DYNAMIC_LIBRARY} AND "${version}" STREQUAL "4" AND ${NORMAL_LIBRARY})
+            set(do_test_touch_mt FALSE)
+        endif()
+        if(${do_test_touch_mt})
+            set(test_touch_items ${test_touch_items} test-touch-md test-touch-mt)
+        else()
+            set(test_touch_items ${test_touch_items} test-touch-md)
+        endif()
+    else()
+        set(test_touch_items ${test_touch_items} test-touch-rt)
+    endif()
+    set(regular_test_touch_items "${test_touch_items}")
+    add_suffix("/.success"  regular_test_touch_items)
+    # test-touch : ${test_touch_items}/.success
+    set(ldeps "${regular_test_touch_items}")
+    add_custom_target( test-touch DEPENDS ${ldeps})
+
+    if(${WINDOWS})
+        # pick test-touch compiler
+        set(tt-c cl)
+        # test-touch compilation flags
+        list(APPEND tt-c-flags -nologo)
+        if(${OPTIMIZATION})
+            list(APPEND tt-c-flags-mt -MT)
+            list(APPEND tt-c-flags-md -MD)
+        else()
+            list(APPEND tt-c-flags-mt -MTd)
+            list(APPEND tt-c-flags-md -MDd)
+        endif()
+        if(${STATIC_LIBRARY})
+            list(APPEND tt-libs ${lib_file})
+        else()
+            list(APPEND tt-libs ${imp_file})
+        endif()
+        list(APPEND tt-ld-flags -link -nodefaultlib:oldnames)
+        if(${IA32})
+            list(APPEND tt-ld-flags -safeseh)
+        endif()
+        list(APPEND tt-ld-flags-v -verbose)
+    else() # (Unix based systems, Intel(R) MIC Architecture, and Mac)
+        # pick test-touch compiler
+        if(${MAC})
+            if(${STD_CPP_LIB})
+                set(tt-c clang++)
+            else()
+                set(tt-c clang)
+            endif()
+        else()
+            if(${STD_CPP_LIB})
+                set(tt-c g++)
+            else()
+                set(tt-c gcc)
+            endif()
+        endif()
+        # test-touch compilation flags
+        if(${LINUX})
+            list(APPEND tt-c-flags -pthread)
+        endif()
+        if(${IA32})
+            list(APPEND tt-c-flags -m32)
+        elseif(${INTEL64})
+            list(APPEND tt-c-flags -m64)
+        endif()
+        list(APPEND tt-libs ${lib_file})
+        if(${LINUX} AND ${COVERAGE} AND ${STATIC_LIBRARY})
+            list(APPEND tt-ld-flags -ldl)
+        endif()
+        if(${MAC})
+            list(APPEND tt-ld-flags-v -Wl,-t)
+            set(tt-env "DYLD_LIBRARY_PATH=.:$ENV{DYLD_LIBRARY_PATH}")
+        else()
+            list(APPEND tt-ld-flags-v -Wl,--verbose)
+            set(tt-env LD_LIBRARY_PATH=".:${build_dir}:$ENV{LD_LIBRARY_PATH}")
+        endif()
+    endif()
+    list(APPEND tt-c-flags "${tt-c-flags-rt}")
+    list(APPEND tt-env "KMP_VERSION=1")
+
+    macro(test_touch_recipe test_touch_dir)
+        set(ldeps ${src_dir}/test-touch.c ${lib_file} ${test_touch_dir}/.dir)
+        set(tt-exe-file ${test_touch_dir}/test-touch${exe})
+        if(${WINDOWS})
+            # ****** list(APPEND tt-c-flags -Fo$(dir $@)test-touch${obj} -Fe$(dir $@)test-touch${exe} *******
+            set(tt-c-flags-out -Fo${test_touch_dir}/test-touch${obj} -Fe${test_touch_dir}/test-touch${exe})
+            list(APPEND ldeps ${imp_file})
+        else()
+            # ****** list(APPEND tt-c-flags -o $(dir $@)test-touch${exe}) ********
+            set(tt-c-flags-out -o ${test_touch_dir}/test-touch${exe})
+        endif()
+        add_custom_command(
+            OUTPUT  ${test_touch_dir}/.success
+            COMMAND ${CMAKE_COMMAND} -E remove -f ${test_touch_dir}/*
+            COMMAND ${tt-c} ${tt-c-flags-out} ${tt-c-flags} ${src_dir}/test-touch.c ${tt-libs} ${tt-ld-flags}
+            COMMAND ${CMAKE_COMMAND} -E remove -f ${tt-exe-file}
+            COMMAND ${tt-c} ${tt-c-flags-out} ${tt-c-flags} ${src_dir}/test-touch.c ${tt-libs} ${tt-ld-flags} ${tt-ld-flags-v} > ${test_touch_dir}/build.log 2>&1
+            COMMAND ${tt-env} ${tt-exe-file}
+            COMMAND grep -i -e \"[^_]libirc\" ${test_touch_dir}/build.log > ${test_touch_dir}/libirc.log \; [ $$? -eq 1 ]
+            COMMAND ${CMAKE_COMMAND} -E touch ${test_touch_dir}/.success
+            DEPENDS ${ldeps}
+        )
+    endmacro()
+    if(${WINDOWS})
+        test_touch_recipe(test-touch-mt)
+        test_touch_recipe(test-touch-md)
+    else()
+        test_touch_recipe(test-touch-rt)
+    endif()
+else()
+    add_custom_target(test-touch DEPENDS test-touch/.success)
+    macro(test_touch_recipe_skip test_touch_dir)
+        if(${tests} AND ${test_touch})
+            set(test_touch_message 'test-touch is not available for the Intel(R) MIC Architecture.  Will not perform it.')
+        else()
+            set(test_touch_message "test-touch is turned off.  Will not perform it.")
+        endif()
+        add_custom_command(
+            OUTPUT ${test_touch_dir}/.success
+            COMMAND ${CMAKE_COMMAND} -E echo ${test_touch_message}
+        )
+    endmacro()
+    test_touch_recipe_skip(test-touch-rt)
+    test_touch_recipe_skip(test-touch-mt)
+    test_touch_recipe_skip(test-touch-md)
+endif()
+
+# test-relo 
+add_custom_target(test-relo DEPENDS test-relo/.success)
+if((${LINUX} OR ${MIC}) AND ${DYNAMIC_LIBRARY} AND ${test_relo} AND ${tests})
+    add_custom_command(
+        OUTPUT  test-relo/.success
+        COMMAND readelf -d ${lib_file} > test-relo/readelf.log
+        COMMAND grep -e TEXTREL test-relo/readelf.log \; [ $$? -eq 1 ]
+        COMMAND ${CMAKE_COMMAND} -E touch test-relo/.success
+        DEPENDS ${lib_file} test-relo/.dir
+    )
+else()
+    if(${tests} AND ${test_relo})
+        set(test_relo_message 'test-relo is only available for dynamic library on Linux or Intel(R) MIC Architecture.  Will not perform it.')
+    else()
+        set(test_relo_message "test-relo is turned off.  Will not perform it.")
+    endif()
+    add_custom_command(
+        OUTPUT  test-relo/.success
+        COMMAND ${CMAKE_COMMAND} -E echo ${test_relo_message}
+    )
+endif()
+
+# test-execstack
+add_custom_target(test-execstack DEPENDS test-execstack/.success)
+if((${LINUX} AND ${DYNAMIC_LIBRARY}) AND ${test_execstack} AND ${tests})
+    add_custom_command(
+        OUTPUT  test-execstack/.success
+        COMMAND ${PERL_EXECUTABLE} ${tools_dir}/check-execstack.pl ${lib_file}
+        COMMAND ${CMAKE_COMMAND} -E touch test-execstack/.success
+        DEPENDS ${lib_file} test-execstack/.dir
+    )
+else()
+    if(${tests} AND ${test_execstack})
+        set(test_execstack_message "test-execstack is only available for dynamic library on Linux.  Will not perform it.")
+    else()
+        set(test_execstack_message "test-execstack is turned off.  Will not perform it.")
+    endif()
+    add_custom_command(
+        OUTPUT  test-execstack/.success
+        COMMAND ${CMAKE_COMMAND} -E echo ${test_execstack_message}
+    )
+endif()
+
+# test-instr
+add_custom_target(test-instr DEPENDS test-instr/.success)
+if(${MIC} AND ${test_instr} AND ${tests})
+    add_custom_command(
+        OUTPUT  test-instr/.success
+        COMMAND ${PERL_EXECUTABLE} ${tools_dir}/check-instruction-set.pl ${oa_opts} --show --mic-arch=${mic_arch} --mic-os=${mic_os} ${lib_file}
+        COMMAND ${CMAKE_COMMAND} -E touch test-instr/.success
+        DEPENDS ${lib_file} ${tools_dir}/check-instruction-set.pl test-instr/.dir
+    )
+else()
+    if(${tests} AND ${test_instr})
+        set(test_instr_message 'test-instr is only available for Intel(R) MIC Architecture libraries.  Will not perform it.')
+    else()
+        set(test_instr_message "test-instr is turned off.  Will not perform it.")
+    endif()
+    add_custom_command(
+        OUTPUT  test-instr/.success
+        COMMAND ${CMAKE_COMMAND} -E echo ${test_instr_message}
+    )
+endif()
+
+# test-deps
+add_custom_target(test-deps DEPENDS test-deps/.success)
+if((${DYNAMIC_LIBRARY} OR ${WINDOWS}) AND ${test_deps} AND ${tests})
+    set(td_exp)
+    if(${FREEBSD})
+        set(td_exp libc.so.7 libthr.so.3 libunwind.so.5)
+    elseif(${LINUX})
+        set(td_exp libdl.so.2,libgcc_s.so.1)
+        if(NOT ${IA32} AND NOT ${INTEL64})
+            set(td_exp ${td_exp},libffi.so.6,libffi.so.5)
+        endif()
+        if(${IA32})
+            set(td_exp ${td_exp},libc.so.6,ld-linux.so.2)  
+        elseif(${INTEL64})
+            set(td_exp ${td_exp},libc.so.6,ld-linux-x86-64.so.2)  
+        elseif(${ARM})
+            set(td_exp ${td_exp},libc.so.6,ld-linux-armhf.so.3)  
+        endif()
+        if(${STD_CPP_LIB})
+            set(td_exp ${td_exp},libstdc++.so.6)
+        endif()
+        if(NOT ${STUBS_LIBRARY})
+            set(td_exp ${td_exp},libpthread.so.0)
+        endif()
+    elseif(${MIC})
+        if("${mic_os}" STREQUAL "lin")
+            set(td_exp libc.so.6,libpthread.so.0,libdl.so.2)
+            if(${STD_CPP_LIB})
+                set(td_exp ${td_exp},libstdc++.so.6)
+            endif()
+            if("${mic_arch}" STREQUAL "knf")
+                set(td_exp ${td_exp},ld-linux-l1om.so.2,libgcc_s.so.1)
+            elseif("${mic_arch}" STREQUAL "knc")
+                set(td_exp ${td_exp},ld-linux-k1om.so.2)
+            endif()
+        elseif("${mic_os}" STREQUAL "bsd")
+            set(td_exp libc.so.7,libthr.so.3,libunwind.so.5)
+        endif()
+    elseif(${MAC})
+        set(td_exp /usr/lib/libSystem.B.dylib)
+    elseif(${WINDOWS})
+        if(${DYNAMIC_LIBRARY})
+            set(td_exp kernel32.dll)
+        else()
+            set(td_exp uuid)
+        endif()
+    endif()
+
+    add_custom_command(
+        OUTPUT  test-deps/.success
+        COMMAND ${PERL_EXECUTABLE} ${tools_dir}/check-depends.pl ${oa_opts} --expected="${td_exp}" ${lib_file}
+        COMMAND ${CMAKE_COMMAND} -E touch test-deps/.success
+        DEPENDS ${lib_file} ${tools_dir}/check-depends.pl test-deps/.dir
+    )
+else()
+    if(${tests} AND ${test_deps})
+        set(test_deps_message 'test-deps is available for dynamic libraries on Linux, Mac, Intel(R) MIC Architecture, Windows and static libraries on Windows.  Will not perform it.')
+    else()
+        set(test_deps_message "test-deps is turned off.  Will not perform it.")
+    endif()
+    add_custom_command(
+        OUTPUT  test-deps/.success
+        COMMAND ${CMAKE_COMMAND} -E echo ${test_deps_message}
+    )
+endif()
+# END OF TESTS
+######################################################
+
+
+
+######################################################
+# --- Create Fortran Files ---
+# omp_lib.mod
+if(${create_fortran_modules})
+    enable_language(Fortran)
+    set(omp_lib_f "omp_lib.f90" )
+    add_custom_command(
+        OUTPUT "omp_lib.mod"
+        COMMAND ${CMAKE_Fortran_COMPILER} -c ${fort_flags} ${omp_lib_f}
+        DEPENDS ${omp_lib_f}
+    )
+    add_custom_command(
+        OUTPUT "omp_lib_kinds.mod"
+        COMMAND ${CMAKE_Fortran_COMPILER} -c ${fort_flags} ${omp_lib_f}
+        DEPENDS ${omp_lib_f}
+    )
+    # clean omp_lib.o from build directory when "make clean" 
+    set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES omp_lib${obj})
+endif()
+
+
+######################################################
+# --- Create directories with .dir recipe ---
+# - Having directory/.dir as a dependency for a recipe will make sure
+#   the directory is created by: mkdir -p directory, then touching directory/.dir
+# directory/.dir : 
+#    mkdir directory
+#    touch directory/.dir
+macro(simple_dir_recipe directory)
+    add_custom_command(
+        OUTPUT  ${directory}/.dir
+        COMMAND ${CMAKE_COMMAND} -E make_directory ${directory}
+        COMMAND ${CMAKE_COMMAND} -E touch ${directory}/.dir
+    )
+endmacro()
+simple_dir_recipe("${build_dir}")
+simple_dir_recipe("${build_dir}/unstripped")
+simple_dir_recipe("${build_dir}/wiped")
+simple_dir_recipe("${build_dir}/required")
+simple_dir_recipe("${build_dir}/libirc")
+simple_dir_recipe("${build_dir}/libipgo")
+simple_dir_recipe("${build_dir}/stripped")
+simple_dir_recipe("${build_dir}/test-touch-rt")
+simple_dir_recipe("${build_dir}/test-touch-mt")
+simple_dir_recipe("${build_dir}/test-touch-md")
+simple_dir_recipe("${build_dir}/test-relo")
+simple_dir_recipe("${build_dir}/test-execstack")
+simple_dir_recipe("${build_dir}/test-instr")
+simple_dir_recipe("${build_dir}/test-deps")
+simple_dir_recipe("${export_cmn_dir}/include")
+simple_dir_recipe("${export_cmn_dir}/include_compat")
+simple_dir_recipe("${export_lib_dir}")
+simple_dir_recipe("${export_ptf_dir}/include")
+simple_dir_recipe("${export_ptf_dir}/include_compat")
+if(${MAC})
+    simple_dir_recipe("${export_fat_mac_32}")
+    simple_dir_recipe("${export_fat_mac_32e}")
+endif()
+
+
+###############################################################
+# --- Using expand-vars.pl to generate files ---
+# - 'file' is generated using expand-vars.pl and 'file'.var
+# - Any .h .f .f90 .rc files should be created with this recipe
+macro(expand_vars_recipe filename)
+    get_source_file_property(extra_ev_flags ${filename} COMPILE_DEFINITIONS)
+    if("${extra_ev_flags}" STREQUAL "NOTFOUND")
+        set(extra_ev_flags)
+    else()
+        string_to_list("${extra_ev_flags}" extra_ev_flags)
+    endif()
+    find_file(${filename}_path ${filename}.var PATHS ${src_dir}/include/${omp_version} ${src_dir})
+    printv(${filename}_path)
+    set(ldeps "${${filename}_path}" "${src_dir}/kmp_version.c" "${tools_dir}/expand-vars.pl")
+    set(expandvarscmd ${PERL_EXECUTABLE} ${tools_dir}/expand-vars.pl --strict ${ev_flags} ${extra_ev_flags} ${${filename}_path} ${filename})
+    if(NOT "${filename}" STREQUAL "")
+        add_custom_command(
+            OUTPUT  ${filename}
+            COMMAND ${expandvarscmd}
+            DEPENDS ${ldeps}
+        )
+    endif()
+endmacro()
+string_to_list("${ev_flags}" ev_flags)
+# omp_lib.h  : ev-flags += -D KMP_INT_PTR_KIND="int_ptr_kind()"
+set_source_files_properties(omp_lib.h PROPERTIES COMPILE_DEFINITIONS "-D KMP_INT_PTR_KIND=\"int_ptr_kind()\"") 
+# iomp_lib.h : ev-flags += -D KMP_INT_PTR_KIND=$(if $(filter 32,$(arch)),4,8)
+if(${IA32}) # 32 bit archs
+    set_source_files_properties(iomp_lib.h PROPERTIES COMPILE_DEFINITIONS "-D KMP_INT_PTR_KIND=4") 
+else()
+    set_source_files_properties(iomp_lib.h PROPERTIES COMPILE_DEFINITIONS "-D KMP_INT_PTR_KIND=8") 
+endif()
+# libiomp.rc : ev-flags += -D KMP_FILE=$(lib_file)
+set_source_files_properties(libiomp.rc PROPERTIES COMPILE_DEFINITIONS "-D KMP_FILE=${lib_file}") 
+expand_vars_recipe(omp.h)
+expand_vars_recipe(omp_lib.h)
+expand_vars_recipe(omp_lib.f)
+expand_vars_recipe(omp_lib.f90)
+expand_vars_recipe(iomp.h)
+expand_vars_recipe(iomp_lib.h)
+expand_vars_recipe(libiomp.rc)
+
+
+###############################################################
+# --- Creating objects from sources
+# --- Create .o from .c ---
+macro(dotc2doto source object)
+    get_source_file_property(extra_c_flags   ${object} COMPILE_FLAGS)
+    get_source_file_property(extra_cpp_flags ${object} COMPILE_DEFINITIONS)
+    get_source_file_property(extra_depends   ${object} OBJECT_DEPENDS)
+    string_to_list("${extra_c_flags}"   extra_c_flags  )
+    string_to_list("${extra_cpp_flags}" extra_cpp_flags)
+    if("${extra_c_flags}" STREQUAL "NOTFOUND") 
+        set(extra_c_flags "")
+    endif()
+    if("${extra_cpp_flags}" STREQUAL "NOTFOUND")
+        set(extra_cpp_flags "")
+    endif()
+    if("${extra_depends}" STREQUAL "NOTFOUND")
+        set(extra_depends "")
+    endif()
+    add_custom_command(
+        OUTPUT ${object}
+        COMMAND ${CMAKE_C_COMPILER} ${cpp_flags} ${extra_cpp_flags} ${c_flags} ${extra_c_flags} -c ${source}
+        IMPLICIT_DEPENDS C ${source}
+        DEPENDS ${source} ${extra_depends}
+    )
+endmacro()
+# --- Create .o from .cpp ---
+macro(dotcpp2doto source object)
+    get_source_file_property(extra_cxx_flags ${object} COMPILE_FLAGS)
+    get_source_file_property(extra_cpp_flags ${object} COMPILE_DEFINITIONS)
+    get_source_file_property(extra_depends   ${object} OBJECT_DEPENDS)
+    string_to_list("${extra_cxx_flags}" extra_cxx_flags)
+    string_to_list("${extra_cpp_flags}" extra_cpp_flags)
+    if("${extra_cxx_flags}" STREQUAL "NOTFOUND") 
+        set(extra_cxx_flags "")
+    endif()
+    if("${extra_cpp_flags}" STREQUAL "NOTFOUND")
+        set(extra_cpp_flags "")
+    endif()
+    if("${extra_depends}" STREQUAL "NOTFOUND")
+        set(extra_depends "")
+    endif()
+    add_custom_command(
+        OUTPUT ${object}
+        COMMAND ${CMAKE_CXX_COMPILER} ${cpp_flags} ${extra_cpp_flags} ${cxx_flags} ${extra_cxx_flags} -c ${source}
+        IMPLICIT_DEPENDS CXX ${source}
+        DEPENDS ${source} ${extra_depends}
+    )
+endmacro()
+# --- Create .o from .s , .asm ---
+macro(dotasm2doto source object)
+    get_source_file_property(extra_as_flags  ${object} COMPILE_FLAGS)
+    get_source_file_property(extra_cpp_flags ${object} COMPILE_DEFINITIONS)
+    get_source_file_property(extra_depends   ${object} OBJECT_DEPENDS)
+    string_to_list("${extra_as_flags}"  extra_as_flags )
+    string_to_list("${extra_cpp_flags}" extra_cpp_flags)
+    if("${extra_as_flags}" STREQUAL "NOTFOUND") 
+        set(extra_as_flags "")
+    endif()
+    if("${extra_cpp_flags}" STREQUAL "NOTFOUND")
+        set(extra_cpp_flags "")
+    endif()
+    if("${extra_depends}" STREQUAL "NOTFOUND")
+        set(extra_depends "")
+    endif()
+    add_custom_command(
+        OUTPUT ${object}
+        COMMAND ${CMAKE_ASM_COMPILER} ${cpp_flags} ${extra_cpp_flags} ${as_flags} ${extra_as_flags} -c ${source}
+        IMPLICIT_DEPENDS C ${source}
+        DEPENDS ${source} ${extra_depends}
+    )
+endmacro()
+set(all_src_files "${lib_src_files}" "${imp_src_files}")
+foreach(source ${all_src_files})
+    get_filename_component(object "${source}" NAME_WE)
+    get_filename_component(filename_extension "${source}" EXT)
+    add_suffix(${obj} object)
+
+    if("${filename_extension}" STREQUAL ".c")
+        dotc2doto(${source} ${object})
+    elseif("${filename_extension}" STREQUAL ".cpp")
+        dotcpp2doto(${source} ${object})
+    elseif("${filename_extension}" STREQUAL ".s" OR "${filename_extension}" STREQUAL ".asm")
+        dotasm2doto(${source} ${object})
+    endif()
+endforeach()
+
+
+
diff -uNr openmp.orig/runtime/CMakeLists.txt.old openmp/runtime/CMakeLists.txt.old
--- openmp.orig/runtime/CMakeLists.txt.old	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/CMakeLists.txt.old	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,8 @@
+project(openmp)
+cmake_minimum_required(VERSION 2.8)
+
+set(VERSION 5)
+set(OMP_VERSION "201107")
+set(OMP_VERSION_NUM "40")
+
+add_subdirectory(src)
diff -uNr openmp.orig/runtime/cmake/AsmFlags.cmake openmp/runtime/cmake/AsmFlags.cmake
--- openmp.orig/runtime/cmake/AsmFlags.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/AsmFlags.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,59 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+# void append_asm_flags(string new_flag);
+# - appends new_flag to input_asflags list
+macro(append_asm_flags new_flag)
+    list(APPEND local_as_flags "${new_flag}")
+endmacro()
+
+function(set_as_flags input_asflags)
+    set(local_as_flags "")
+
+    ########################
+    # Windows assembly flags
+    if(${WINDOWS})
+        append_asm_flags("-nologo") # Turn off tool banner.
+        if(${IA32})
+            append_asm_flags("-safeseh") # Registers exception handlers for safe exception handling.
+            append_asm_flags("-coff") # Generates common object file format (COFF) type of object module. 
+                                      # Generally required for Win32 assembly language development.
+            append_asm_flags("-D _M_IA32")
+        elseif(${INTEL64})
+            append_asm_flags("-D _M_AMD64")
+        endif()
+    else() # if other than Windows... (Unix based systems, Intel(R) Many Integrated Core Architecture (Intel(R) MIC Architecture), and Mac)
+        append_asm_flags("-D USE_ITT_BUILD")
+        if(${OPTIMIZATION})
+            append_asm_flags("-D NDEBUG")
+        else()
+            append_asm_flags("-D _DEBUG")
+            append_asm_flags("-D BUILD_DEBUG")
+        endif()
+        append_asm_flags("-x assembler-with-cpp") # Assembly file that needs to be preprocessed
+    endif()
+
+    ####################
+    # Intel(R) MIC Architecture assembly flags
+    if(${MIC})
+        append_asm_flags("-mmic") # Build Intel(R) MIC Architecture native code
+    endif()
+
+    ######################
+    # Other assembly flags
+    if((${GCC} OR ${CLANG}) AND ${IA32})
+        append_asm_flags("-m32") # Generate 32 bit IA-32 architecture code 
+        append_asm_flags("-msse") # Allow use of Streaming SIMD Instructions
+    endif()
+
+    set(${input_asflags} "${local_as_flags}" PARENT_SCOPE)
+
+endfunction()
diff -uNr openmp.orig/runtime/cmake/CFlags.cmake openmp/runtime/cmake/CFlags.cmake
--- openmp.orig/runtime/cmake/CFlags.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/CFlags.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,167 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+# void append_c_flags(string new_flag);
+# - appends new_flag to input_cflags list
+macro(append_c_flags new_flag)
+    list(APPEND local_c_flags "${new_flag}")
+endmacro()
+
+# void append_cxx_flags(string new_flag);
+# - appends new_flag to cxx_flags list
+macro(append_cxx_flags new_flag)
+    list(APPEND local_cxx_flags "${new_flag}")
+endmacro()
+
+# void append_c_and_cxx_flags(string new_flag);
+# - appends new_flag to both cxx_flags and input_cflags list
+macro(append_c_and_cxx_flags new_flag)
+    append_c_flags("${new_flag}")
+    append_cxx_flags("${new_flag}")
+endmacro()
+
+function(set_c_and_cxx_flags input_cflags input_cxxflags)
+    set(local_c_flags)
+    set(local_cxx_flags)
+
+    #########################
+    # Windows C and C++ flags
+    if(${WINDOWS})
+        #append_c_flags("-Qstd=gnu99")
+        append_c_flags("-TP") # Tells the compiler to process a file as a C++ source file.
+        append_cxx_flags("-EHsc") # Enable C++ exception handling.
+        append_c_and_cxx_flags("-nologo") # Turn off tool banner.
+        append_c_and_cxx_flags("-Qlong_double") # Enable 80-bit "long double".
+        append_c_and_cxx_flags("-W3") # Enables diagnostics for remarks, warnings, and errors. 
+                                      # Additional warnings are also enabled above level 2 warnings.
+        append_c_and_cxx_flags("-Qdiag-disable:177") # Disable warning: "... declared but never referenced"
+        append_c_and_cxx_flags("-WX") # Change all Warnings to Errors
+        append_c_and_cxx_flags("-GS") # Lets you control the threshold at which the stack checking routine is called or not called.
+        append_c_and_cxx_flags("-DynamicBase") # This option modifies the header of an executable to indicate 
+                                               # whether the application should be randomly rebased at load time.
+        if(${IA32})
+            append_c_and_cxx_flags("-arch:ia32") # Tells the compiler which features it may target (ia32)
+        endif()
+        if(${DYNAMIC_LIBRARY})
+            append_c_flags("-EHsc") # Enable C++ exception handling.
+        endif()
+        if(${IA32})
+            append_c_and_cxx_flags("-Oy-") # equivalent to -fno-omit-frame-pointer
+            if(${ICC})
+                append_c_and_cxx_flags("-Qsafeseh") # Registers exception handlers for safe exception handling.
+            endif()
+        endif()
+        if(${DEBUG_INFO})
+            append_c_and_cxx_flags("-Zi") # Tells the compiler to generate full debugging information in a project database (PDB) file.
+        endif()
+        if(${COVERAGE})
+            append_c_and_cxx_flags("-Qprof-gen:srcpos") # Produces an instrumented object file that can be used in profile guided optimization
+        endif()
+        if(${OPTIMIZATION})
+            append_c_and_cxx_flags("-O2") # Level 2 Optimizations
+            if(${ICC})
+                append_c_and_cxx_flags("-Qinline-min-size=1") # Specifies the upper limit for the size of what the inliner considers to be a small routine.
+            endif()
+            append_c_and_cxx_flags("-MT") # Changes the default target rule for dependency generation.
+        else()
+            append_c_and_cxx_flags("-Od") # Disables all optimizations.
+            append_c_and_cxx_flags("-RTC1") # Enables run-time checks of the stack frame, and enables run-time checks for unintialized variables.
+            append_c_and_cxx_flags("-MTd") # Tells the linker to search for unresolved references in a multithreaded, static run-time library.
+        endif()
+        if(${STATIC_LIBRARY})
+            append_c_and_cxx_flags("-Zl") # Causes library names to be omitted from the object file.
+        endif()
+        
+    else() # if other than Windows... (Unix based systems, Intel(R) Many Integrated Core Architecture (Intel(R) MIC Architecture) and Mac)
+        append_c_and_cxx_flags("-fno-exceptions") # Exception handling table generation is disabled.
+        #append_c_flags("-std=gnu99")
+        if(${DYNAMIC_LIBRARY})
+            append_c_and_cxx_flags("-fPIC") # Produce Position Independent Code (PIC)
+        endif()
+        if(${DEBUG_INFO})
+            append_c_and_cxx_flags("-g") # Tells the compiler to generate full debugging information in the object file
+        endif()
+        if(${COVERAGE} AND ${ICC} AND NOT ${MIC})
+            append_c_and_cxx_flags("-prof-gen:srcpos") # Produces an instrumented object file that can be used in profile guided optimization
+        endif()
+        if(${OPTIMIZATION})
+            append_c_and_cxx_flags("-O2") # Level 2 Optimizations
+        else()
+            append_c_and_cxx_flags("-O0") # Disables all optimizations.
+        endif()
+        if(${ICC})
+            append_c_flags("-Kc++") # Compile C files as C++ files
+        endif()
+    endif()
+
+    #####################
+    # MIC C and C++ flags
+    if(${MIC})
+        append_c_and_cxx_flags("-mmic") # Build Intel(R) MIC Architecture native code
+        append_c_and_cxx_flags("-ftls-model=initial-exec") # Changes the thread local storage (TLS) model. Generates a restrictive, optimized TLS code. 
+                                                           # To use this setting, the thread-local variables accessed must be defined in one of the 
+                                                           # modules available to the program.
+        append_c_and_cxx_flags("-opt-streaming-stores never") # Disables generation of streaming stores for optimization.
+    endif()
+
+    #######################
+    # Linux C and C++ flags
+    if(${LINUX})
+        append_c_and_cxx_flags("-Wsign-compare") # Warns when comparing signed and unsigned values
+        if(${ICC})
+            append_c_and_cxx_flags("-Werror") # Changes all warnings to errors.
+            if(${IA32})
+                append_c_and_cxx_flags("-falign-stack=maintain-16-byte") # Tells the compiler the stack alignment to use on entry to routines.
+                append_c_and_cxx_flags("-mia32")  # Tells the compiler which features it may target (ia32)
+            endif()
+        endif()
+        if(${GCC} AND ${ARM})
+            append_c_flags("-marm") # Target the ARM architecture
+        endif()
+    endif()
+
+    ###################################
+    # Other conditional C and C++ flags
+    if(${GCC} OR ${CLANG})
+        append_c_and_cxx_flags("-x c++") # Compile C files as C++ files
+        append_c_and_cxx_flags("-std=c++0x") # Enables support for many C++11 (formerly known as C++0x) features. The following are the most recently added features:
+        if(${IA32})
+            append_c_and_cxx_flags("-m32") # Generate 32 bit IA-32 architecture code
+            append_c_and_cxx_flags("-msse") # Allow use of Streaming SIMD Instructions
+        endif()
+    endif()
+
+    if(${CLANG})
+        append_c_and_cxx_flags("-Wno-unused-value") # Don't warn about unused values
+        append_c_and_cxx_flags("-Wno-switch") # Don't warn about switch statements that don't cover entire range of values
+    endif()
+
+    if(${DYNAMIC_LIBRARY})
+        if(${WINDOWS}) 
+            append_c_and_cxx_flags("-Zi") # The -Zi option (Windows OS) tells the compiler to generate symbolic debugging information in a PDB file 
+        elseif(NOT ${MAC})
+            append_c_and_cxx_flags("-g") # Tells the compiler to generate full debugging information in the object file
+        endif()
+    endif()
+
+    if(${ICC})
+        append_c_and_cxx_flags("-Qoption,cpp,--extended_float_types") # Enabled _Quad type.
+        if(${LINUX} OR ${MIC})
+            append_c_and_cxx_flags("-sox") # Tells the compiler to save the compilation options and version number 
+                                           # in the executable file. It also lets you choose whether to include 
+                                           # lists of certain functions.
+        endif()
+    endif()
+
+    set(${input_cflags} "${local_c_flags}" PARENT_SCOPE)
+    set(${input_cxxflags} "${local_cxx_flags}" PARENT_SCOPE)
+
+endfunction()
diff -uNr openmp.orig/runtime/cmake/CppFlags.cmake openmp/runtime/cmake/CppFlags.cmake
--- openmp.orig/runtime/cmake/CppFlags.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/CppFlags.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,138 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+# void append_definitions(string new_flag);
+# - appends new_flag to cpp_flags list
+macro(append_definitions new_flag)
+    list(APPEND local_cpp_flags "${new_flag}")
+endmacro()
+
+function(set_cpp_flags input_cpp_flags)
+    set(local_cpp_flags)
+
+    append_definitions("-D USE_ITT_BUILD")
+    append_definitions("-D KMP_ARCH_STR=\"\\\\\"${legal_arch}\\\\\"\"")
+    append_definitions("-D BUILD_I8")
+    append_definitions("-D KMP_LIBRARY_FILE=\\\\\"${lib_file}\\\\\"") # yes... you need 5 backslashes...
+    append_definitions("-D KMP_VERSION_MAJOR=${version}")
+    append_definitions("-D CACHE_LINE=64")
+    append_definitions("-D KMP_ADJUST_BLOCKTIME=1")
+    append_definitions("-D BUILD_PARALLEL_ORDERED")
+    append_definitions("-D KMP_ASM_INTRINS")
+    if(${USE_ITT_NOTIFY})
+        append_definitions("-D USE_ITT_NOTIFY=1")
+    else()
+        append_definitions("-D USE_ITT_NOTIFY=0")
+        append_definitions("-D INTEL_NO_ITTNOTIFY_API")
+    endif()
+    append_definitions("-D INTEL_ITTNOTIFY_PREFIX=__kmp_itt_")
+
+    #####################
+    # Windows definitions
+    if(${WINDOWS})
+        append_definitions("-D _CRT_SECURE_NO_WARNINGS")
+        append_definitions("-D _CRT_SECURE_NO_DEPRECATE")
+        append_definitions("-D _WINDOWS")
+        append_definitions("-D _WINNT")
+        append_definitions("-D _WIN32_WINNT=0x0501")
+        append_definitions("-D KMP_WIN_CDECL")
+        if(${DYNAMIC_LIBRARY})
+            append_definitions("-D _USRDLL")
+        endif()
+    else() # Other than windows... (Unix based systems, Intel(R) Many Integrated Core Architecture (Intel(R) MIC Architecture), and Mac)
+        append_definitions("-D _GNU_SOURCE")
+        append_definitions("-D _REENTRANT")
+        append_definitions("-D BUILD_TV")
+        append_definitions("-D USE_CBLKDATA")
+        if(NOT "${version}" STREQUAL "4")
+            append_definitions("-D KMP_GOMP_COMPAT")
+        endif()
+    endif()
+
+    #######################################
+    # Intel(R) MIC Architecture definitions
+    if(${MIC})
+        append_definitions("-D KMP_TDATA_GTID")
+        if(${STATS_GATHERING})
+            append_definitions("-D KMP_STATS_ENABLED=1")
+        else()
+            append_definitions("-D KMP_STATS_ENABLED=0")
+        endif()
+    else() # Other than Intel(R) MIC Architecture...
+        append_definitions("-D USE_LOAD_BALANCE")
+    endif()
+
+    ##################
+    # Unix definitions
+    if(${LINUX})
+        append_definitions("-D KMP_TDATA_GTID")
+        if(${STATS_GATHERING})
+            append_definitions("-D KMP_STATS_ENABLED=1")
+        else()
+            append_definitions("-D KMP_STATS_ENABLED=0")
+        endif()
+    endif()
+
+    ##################################
+    # Other conditional definitions
+    if(${DIAG}) 
+        append_definitions("-D KMP_DEBUG") 
+    endif()
+    if(${COVERAGE}) 
+        append_definitions("-D COVER")
+    else()
+        append_definitions("-D KMP_USE_ASSERT")
+    endif()
+    if(${DYNAMIC_LIBRARY}) 
+        append_definitions("-D GUIDEDLL_EXPORTS") 
+    endif()
+    if(${STUBS_LIBRARY}) 
+        append_definitions("-D KMP_STUB") 
+    endif()
+    if(${OPTIMIZATION})
+        append_definitions("-D NDEBUG")
+    else()
+        append_definitions("-D _DEBUG")
+        append_definitions("-D BUILD_DEBUG")
+        if(${WINDOWS})
+            append_definitions("-D _ITERATOR_DEBUG_LEVEL=0")
+        endif()
+    endif()
+
+    # OpenMP version flags
+    set(have_omp_50 0)
+    set(have_omp_41 0)
+    set(have_omp_40 0)
+    set(have_omp_30 0)
+    if(${omp_version} EQUAL 50 OR ${omp_version} GREATER 50)
+        set(have_omp_50 1)
+    endif()
+    if(${omp_version} EQUAL 41 OR ${omp_version} GREATER 41)
+        set(have_omp_41 1)
+    endif()
+    if(${omp_version} EQUAL 40 OR ${omp_version} GREATER 40)
+        set(have_omp_40 1)
+    endif()
+    if(${omp_version} EQUAL 30 OR ${omp_version} GREATER 30)
+        set(have_omp_30 1)
+    endif()
+    append_definitions("-D OMP_50_ENABLED=${have_omp_50}")
+    append_definitions("-D OMP_41_ENABLED=${have_omp_41}")
+    append_definitions("-D OMP_40_ENABLED=${have_omp_40}")
+    append_definitions("-D OMP_30_ENABLED=${have_omp_30}")
+
+    # Architectural definitions
+    if(${INTEL64} OR ${IA32})
+        append_definitions("-D KMP_USE_ADAPTIVE_LOCKS=1")
+        append_definitions("-D KMP_DEBUG_ADAPTIVE_LOCKS=0")
+    endif()
+    set(${input_cpp_flags} "${local_cpp_flags}" PARENT_SCOPE)
+endfunction()
diff -uNr openmp.orig/runtime/cmake/FortranFlags.cmake openmp/runtime/cmake/FortranFlags.cmake
--- openmp.orig/runtime/cmake/FortranFlags.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/FortranFlags.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,56 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+# void append_fort_flags(string new_flag);
+# - appends new_flag to fort_flags list
+macro(append_fort_flags new_flag)
+    list(APPEND local_fort_flags "${new_flag}")
+endmacro()
+
+function(set_fort_flags input_fort_flags)
+    set(local_fort_flags "")
+
+    #######################
+    # Windows Fortran flags
+    if(${WINDOWS})
+        append_fort_flags("-nologo")
+        append_fort_flags("-Qdiag-disable:177,5082")
+        append_fort_flags("-GS")
+        append_fort_flags("-DynamicBase")
+        if(${DYNAMIC_LIBRARY})
+            append_fort_flags("-Zi")
+        endif()
+        if(${ICC})
+            append_fort_flags("-Qsox")
+        endif()
+    else() # Other than Windows... (Unix based systems, Intel(R) Many Integrated Core Architecture, and Mac)
+        if(${ICC} AND NOT ${MAC})
+            append_fort_flags("-sox")
+        endif()
+    endif()
+
+    #####################
+    # Other Fortran Flags
+    if((${GCC} OR ${CLANG}) AND ${IA32})
+        append_fort_flags("-m32")
+        append_fort_flags("-msse")
+    endif()
+
+    if(NOT ${MAC} AND NOT ${WINDOWS})
+        append_fort_flags("-g")
+    endif()
+
+    if(${MIC})
+        append_fort_flags("-mmic")
+    endif()
+
+    set(${input_fort_flags} "${local_fort_flags}" PARENT_SCOPE)
+endfunction()
diff -uNr openmp.orig/runtime/cmake/HelperFunctions.cmake openmp/runtime/cmake/HelperFunctions.cmake
--- openmp.orig/runtime/cmake/HelperFunctions.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/HelperFunctions.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,249 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+####################################### FUNCTIONS/MACROS ###########################################
+# It should be noted that in cmake, functions can only be used on a single line with the return value
+# stored in a parameter you send to the function.  There isn't a true return value.  So technically, 
+# all functions would have a C/C++ prototype of:
+# void function_name(parameter1, parameter2, ...);
+#  
+# If you want a return value, you have to use a parameter so the function prototype would be:
+# void function_name(input_parameter1, input_parameter2, ...,  return_value)
+# ##################
+
+# void say(string message_to_user);
+# - prints out message_to_user
+macro(say message_to_user)
+    message("${message_to_user}")
+endmacro()
+
+# void warning_say(string message_to_user);
+# - prints out message_to_user with a warning
+macro(warning_say message_to_user)
+    message(WARNING "${message_to_user}")
+endmacro()
+
+# void error_say(string message_to_user);
+# - prints out message_to_user with an error and exits cmake
+macro(error_say message_to_user)
+    message(FATAL_ERROR "${message_to_user}")
+endmacro()
+
+# void debug_say(string message_to_developer);
+# - prints out message when GLOBAL_DEBUG == 1 (for debugging cmake build)
+macro(debug_say message_to_developer)
+    if(${GLOBAL_DEBUG} STREQUAL "1")
+        say("DEBUG: ${message_to_developer}")
+    endif()
+endmacro()
+
+# void printv(var);
+# - prints the variable name and its value (for debugging cmake build)
+macro(printv var)
+    if(${GLOBAL_DEBUG} STREQUAL "1")
+        say("DEBUG: Variable: ${var} = ${${var}} ")
+    endif()
+endmacro()
+
+# void set_legal_arch(string* return_arch_string);
+# - returns (through return_arch_string) the formal architecture 
+#   string or warns user of unknown architecture
+function(set_legal_arch return_arch_string)
+    if(${IA32}) 
+        set(${return_arch_string} "IA-32" PARENT_SCOPE)
+    elseif(${INTEL64})
+        set(${return_arch_string} "Intel(R) 64" PARENT_SCOPE)
+    elseif(${MIC})
+        set(${return_arch_string} "Intel(R) Many Integrated Core Architecture" PARENT_SCOPE)
+    elseif(${arch} STREQUAL "l1")
+        set(${return_arch_string} "L1OM" PARENT_SCOPE)
+    elseif(${ARM})
+        set(${return_arch_string} "ARM" PARENT_SCOPE)
+    else()
+        warning_say("set_legal_arch(): Warning: Unknown architecture...")
+    endif()
+endfunction()
+
+# void check_variable(string var, string var_name, list<string>values_list);
+# - runs through values_list checking if ${var} == values_list[i] for any i.
+# - if the var is found, then just print it out
+# - if the var is not found, then warn user
+function(check_variable var var_name values_list)
+    set(valid_flag 0)
+    foreach(value IN LISTS values_list)
+        if("${var}" STREQUAL "${value}")
+            set(valid_flag 1)
+            set(the_value "${value}")
+        endif()
+    endforeach()
+    if(${valid_flag} EQUAL 0)
+        error_say("check_variable(): ${var_name} = ${var} is unknown")
+    else()
+        say("${var_name} : ${the_value}")
+    endif()
+endfunction()
+
+# void _export_lib_dir(string export_dir, string platform, string suffix, string* return_value);
+# - basically a special case for mac platforms where it adds '.thin' to the output lib directory
+function(_export_lib_dir pltfrm return_value)
+    if(${MAC})
+        set(${return_value} "${export_dir}/${pltfrm}${suffix}/lib.thin" PARENT_SCOPE)
+    else()
+        set(${return_value} "${export_dir}/${pltfrm}${suffix}/lib" PARENT_SCOPE)
+    endif()
+endfunction()
+
+# void _export_lib_fat_dir(string export_dir, string platform, string suffix, string* return_value);
+# - another mac specialty case for fat libraries.
+# - this sets export_lib_fat_dir in the MAIN part of CMakeLists.txt
+function(_export_lib_fat_dir pltfrm return_value)
+    set(${return_value} "${export_dir}/${pltfrm}${suffix}/lib" PARENT_SCOPE)
+endfunction()
+
+# void get_build_number(string src_dir, string* return_build_number);
+# - grab the eight digit build number (or 00000000) from kmp_version.c
+function(get_build_number src_dir return_build_number)
+    # sets file_lines_list to a list of all lines in kmp_version.c
+    file(STRINGS "${src_dir}/src/kmp_version.c" file_lines_list)
+
+    # runs through each line in kmp_version.c
+    foreach(line IN LISTS file_lines_list)
+        # if the line begins with "#define KMP_VERSION_BUILD" then we take not of the build number
+        string(REGEX MATCH "^[ \t]*#define[ \t]+KMP_VERSION_BUILD" valid "${line}")
+        if(NOT "${valid}" STREQUAL "") # if we matched "#define KMP_VERSION_BUILD", then grab the build number
+            string(REGEX REPLACE "^[ \t]*#define[ \t]+KMP_VERSION_BUILD[ \t]+([0-9]+)" "\\1"
+                   build_number "${line}"
+            )
+        endif()
+    endforeach()
+    set(${return_build_number} "${build_number}" PARENT_SCOPE) # return build number
+endfunction()
+
+# void set_legal_type(string* return_legal_type);
+# - set the legal type name Performance/Profiling/Stub
+function(set_legal_type return_legal_type)
+    if(${NORMAL_LIBRARY})
+        set(${return_legal_type} "Performance" PARENT_SCOPE)
+    elseif(${PROFILE_LIBRARY})
+        set(${return_legal_type} "Profiling" PARENT_SCOPE)
+    elseif(${STUBS_LIBRARY})
+        set(${return_legal_type} "Stub" PARENT_SCOPE)
+    endif()
+endfunction()
+
+# void set_mac_os_new(bool* return_mac_os_new);
+# - sets the return_mac_os_new variable to true or false based on macosx version
+# - no real "cmakey" way to do this.  Have to call execute_process()
+function(set_mac_os_new return_mac_os_new)
+    execute_process(COMMAND "sw_vers" "-productVersion" OUTPUT_VARIABLE mac_osx_version)
+    if("${mac_osx_version}" VERSION_GREATER "10.6")
+        set(${return_mac_os_new} TRUE PARENT_SCOPE)
+    else()
+        set(${return_mac_os_new} FALSE PARENT_SCOPE)
+    endif()
+endfunction()
+
+# void add_prefix(string prefix, list<string>* list_of_items);
+# - returns list_of_items with prefix prepended to all items
+# - original list is modified
+function(add_prefix prefix list_of_items)
+    set(local_list "")
+    foreach(item IN LISTS "${list_of_items}")
+        if(NOT "${item}" STREQUAL "")
+            list(APPEND local_list "${prefix}${item}")
+        endif()
+    endforeach()
+    set(${list_of_items} "${local_list}" PARENT_SCOPE)
+endfunction()
+
+# void add_suffix(string suffix, list<string>* list_of_items);
+# - returns list_of_items with suffix appended to all items
+# - original list is modified
+function(add_suffix suffix list_of_items)
+    set(local_list "")
+    foreach(item IN LISTS "${list_of_items}")
+        if(NOT "${item}" STREQUAL "")
+            list(APPEND local_list "${item}${suffix}")
+        endif()
+    endforeach()
+    set(${list_of_items} "${local_list}" PARENT_SCOPE)
+endfunction()
+
+# void strip_suffix(list<string> list_of_items, list<string>* return_list);
+# - returns a new list with suffix stripped (i.e., foo.c => foo)
+# - list_of_items is not modified, return_list is modified
+function(strip_suffix list_of_items return_list)
+    set(local_list "")
+    foreach(item IN LISTS "${list_of_items}")
+        if(NOT "${item}" STREQUAL "")
+            get_filename_component(filename "${item}" NAME_WE)
+            list(APPEND local_list "${filename}")
+        endif()
+    endforeach()
+    set(${return_list} "${local_list}" PARENT_SCOPE)
+endfunction()
+
+# void list_to_string(list<string> list_of_things, string* return_string);
+# - converts a list to a space separated string
+#function(list_to_string list_of_things return_string)
+#    string(REPLACE ";" " " output_variable "${list_of_things}")
+#    set(${return_string} "${output_variable}" PARENT_SCOPE)
+#endfunction()
+
+# void string_to_list(string str, list<string>* return_list);
+# - converts a string to a semicolon separated list
+# - what it really does is just string_replace all running whitespace to a semicolon
+# - in cmake, a list is strings separated by semicolons: i.e., list of four items, list = "item1;item2;item3;item4"
+function(string_to_list str return_list)
+    set(outstr)
+    string(REGEX REPLACE "[ \t]+" ";" outstr "${str}")
+    set(${return_list} "${outstr}" PARENT_SCOPE) 
+endfunction()
+
+# void get_date(string* return_date);
+# - returns the current date "yyyy-mm-dd hh:mm:ss UTC"
+# - this function alone causes the need for CMake v2.8.11 (TIMESTAMP)
+function(get_date return_date)
+    string(TIMESTAMP local_date "%Y-%m-%d %H:%M:%S UTC" UTC)
+    set(${return_date} ${local_date} PARENT_SCOPE)
+endfunction()
+
+# void find_a_program(string program_name, list<string> extra_paths, string return_variable_name);
+# - returns the full path of a program_name
+# - first looks in the list of extra_paths
+# - if not found in extra_paths, then look through system path
+function(find_a_program program_name extra_paths return_variable_name)
+    # first try to find the program in the extra_paths
+    find_program(${return_variable_name} "${program_name}" PATHS "${extra_paths}" DOC "Path to ${program_name}" NO_CMAKE_ENVIRONMENT_PATH NO_CMAKE_PATH NO_SYSTEM_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH)
+    if("${${return_variable_name}}" MATCHES NOTFOUND)
+        # if no extra_paths, or couldn't find it, then look in system $PATH
+        find_program(${return_variable_name} "${program_name}" DOC "Path to ${program_name}")
+        if("${${return_variable_name}}" MATCHES NOTFOUND)
+            error_say("Error: Could not find program: ${program_name}")
+        endif()
+    endif()
+
+    say("Found ${program_name}: ${${return_variable_name}}")
+
+    set(${return_variable_name} ${${return_variable_name}} PARENT_SCOPE)
+endfunction()
+
+# void get_base_libomp_dir(string* return_variable_dir);
+# - returns the base libomp directory
+# - this helps distinguish between llvm and oss
+function(get_base_libomp_dir return_variable_dir)
+    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/runtime)
+        set(${return_variable_dir} ${CMAKE_CURRENT_SOURCE_DIR}/runtime PARENT_SCOPE)
+    else()
+        set(${return_variable_dir} ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE)
+    endif()
+endfunction()
+
diff -uNr openmp.orig/runtime/cmake/LinkerFlags.cmake openmp/runtime/cmake/LinkerFlags.cmake
--- openmp.orig/runtime/cmake/LinkerFlags.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/LinkerFlags.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,176 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+# The difference between linker_flags and linker_flags_libs is linker_flags_libs
+# is put at the end of the linker command where linking libraries should be done.
+macro(append_linker_flags new_flag)
+    list(APPEND local_ld_flags "${new_flag}")
+endmacro()
+
+macro(append_linker_flags_library new_flag)
+    list(APPEND local_ld_flags_libs "${new_flag}")
+endmacro()
+
+macro(append_archiver_flags new_flag)
+    list(APPEND local_ar_flags "${new_flag}")
+endmacro()
+
+################################
+# Creating dynamic library flags
+function(set_linker_flags input_ld_flags input_ld_flags_libs)
+    set(local_ld_flags)
+    set(local_ld_flags_libs)
+
+    ######################
+    # Windows linker flags
+    if(${WINDOWS}) 
+        append_linker_flags("-dll")
+        append_linker_flags("-nologo") # Turn off tool banner.
+        append_linker_flags("-WX:NO")
+        append_linker_flags("-incremental:no")
+        append_linker_flags("-version:${version}.0")
+        append_linker_flags("-NXCompat")
+        append_linker_flags("-GS")
+        append_linker_flags("-DynamicBase")
+        if(${DEBUG_INFO})
+            if(NOT "${pdb_file}" STREQUAL "")
+                append_linker_flags("-debug")
+                append_linker_flags("-pdb:${pdb_file}")
+            endif()
+        else()
+            if(NOT "${pdb_file}" STREQUAL "")
+                append_linker_flags("-debug")
+                append_linker_flags("-pdb:${pdb_file}")
+                append_linker_flags("-pdbstripped:${pdb_file}.stripped")
+            endif()
+        endif()
+        if(NOT "${def_file}" STREQUAL "")
+            append_linker_flags("-def:${def_file}")
+        endif()
+        if(NOT "${imp_file}" STREQUAL "")
+            if(${DYNAMIC_LIBRARY})
+                append_linker_flags("-implib:import${lib}")
+            else()
+                append_linker_flags("-implib:${imp_file}")
+            endif()
+        endif()
+        if(${IA32})
+            append_linker_flags("-machine:i386")
+            append_linker_flags("-safeseh")
+        elseif(${INTEL64})
+            append_linker_flags("-machine:amd64")
+        endif()
+    ##################
+    # MAC linker flags
+    elseif(${MAC})
+        append_linker_flags("-dynamiclib")
+        append_linker_flags("-headerpad_max_install_names")
+        append_linker_flags("-install_name ${lib_file}")
+        if(${ICC})
+            append_linker_flags("-no-intel-extensions")
+        endif()
+        append_linker_flags("-single_module")
+        append_linker_flags("-current_version ${version}.0")
+        append_linker_flags("-compatibility_version ${version}.0")
+    #########################################################
+    # Intel(R) Many Integrated Core Architecture (Intel(R) MIC Architecture) linker flags
+    elseif(${MIC})
+        append_linker_flags("-shared") # Create shared library
+        append_linker_flags("-Wl,-x")
+        append_linker_flags("-Wl,-soname=${lib_file}") # have soname be libiomp5.so
+        append_linker_flags("-mmic") # enable MIC linking
+        append_linker_flags("-Wl,--warn-shared-textrel") #  Warn if the linker adds a DT_TEXTREL to a shared object.
+        append_linker_flags("-Wl,--version-script=${src_dir}/exports_so.txt") # Use exports_so.txt as version script to create versioned symbols for ELF libraries
+        append_linker_flags("-Wl,--as-needed")
+        if(${ICC})
+            append_linker_flags("-static-intel") # Causes Intel-provided libraries to be linked in statically. 
+            append_linker_flags("-no-intel-extensions") # Enables or disables all Intel C and Intel C++ language extensions.
+        endif()
+        if(NOT ${STUBS_LIBRARY})
+            append_linker_flags_library("-pthread") # link in pthread library
+            append_linker_flags_library("-ldl") # link in libdl (dynamic loader library)
+        endif()
+        if(${STATS_GATHERING})
+            append_linker_flags_library("-Wl,-lstdc++") # link in standard c++ library (stats-gathering needs it)
+        endif()
+    #########################
+    # Unix based linker flags
+    else()
+        if(NOT ${FREEBSD})
+            append_linker_flags_library("-Wl,-ldl") # link in libdl (dynamic loader library)
+        endif()
+        append_linker_flags("-shared") # Create shared library
+        append_linker_flags("-Wl,-z,noexecstack") #  Marks the object as not requiring executable stack.
+        append_linker_flags("-Wl,-soname=${lib_file}") # have soname be libiomp5.so
+        append_linker_flags("-Wsign-compare") 
+        append_linker_flags("-fPIC") # Position independent code
+        append_linker_flags("-Wl,--version-script=${src_dir}/exports_so.txt") # Use exports_so.txt as version script to create versioned symbols for ELF libraries
+        append_linker_flags("-Wl,--as-needed")
+        if(NOT ${STUBS_LIBRARY})
+            append_linker_flags("-Wl,--warn-shared-textrel") #  Warn if the linker adds a DT_TEXTREL to a shared object.
+            append_linker_flags("-Wl,-fini=__kmp_internal_end_fini") # When creating an ELF executable or shared object, call NAME when the 
+                                                                     # executable or shared object is unloaded, by setting DT_FINI to the 
+                                                                     # address of the function.  By default, the linker uses "_fini" as the function to call.
+            append_linker_flags_library("-pthread") # link pthread library
+        endif()
+        if(${DEBUG_INFO})
+            append_linker_flags("-g")
+        elseif(NOT ${OPTIMIZATION}) 
+            append_linker_flags("-O0") # No optimizations
+        endif()
+        if(${ICC})
+            append_linker_flags("-static-intel") # Causes Intel-provided libraries to be linked in statically.
+            append_linker_flags("-Werror") # Warnings become errors
+            if(${IA32})
+                append_linker_flags_library("-lirc_pic") # link in libirc_pic
+            endif()
+        endif()
+        if(${GCC})
+            append_linker_flags("-static-libgcc") # Causes libgcc to be linked in statically
+        endif()
+    endif()
+
+    ################################
+    # Other conditional linker flags
+    if(( ${GCC} OR ${CLANG} ) AND ${IA32}) 
+        append_linker_flags("-m32")
+        append_linker_flags("-msse")
+    endif()
+
+    if( ${DYNAMIC_LIBRARY} AND (NOT ${WINDOWS} OR ${MAC}) )
+        append_linker_flags("-g")
+    endif()
+
+    set(${input_ld_flags}      "${local_ld_flags}"       PARENT_SCOPE)
+    set(${input_ld_flags_libs} "${local_ld_flags_libs}"  PARENT_SCOPE)
+endfunction()
+
+###############################
+# Creating static library flags
+function(set_archiver_flags input_arflags)
+    set(local_ar_flags)
+    if(${WINDOWS}) # WINDOWS
+        append_archiver_flags("-lib") 
+        append_archiver_flags("-nologo") 
+        if(${IA32})
+            append_archiver_flags("-machine:i386")
+        elseif(${INTEL64})
+            append_archiver_flags("-machine:amd64")
+        endif()
+    elseif(${MAC}) # MAC
+       append_archiver_flags("-static") 
+    elseif(${MIC}) # Intel(R) MIC Architecture
+       append_archiver_flags("cr") 
+    else()         # Unix based systems
+       append_archiver_flags("cr") 
+    endif()
+    set(${input_arflags} "${local_ar_flags}" PARENT_SCOPE)
+endfunction()
diff -uNr openmp.orig/runtime/cmake/PerlFlags.cmake openmp/runtime/cmake/PerlFlags.cmake
--- openmp.orig/runtime/cmake/PerlFlags.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/PerlFlags.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,90 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+# void append_ev_flags(string new_flag);
+# - appends new_flag to ev_flags list
+macro(append_ev_flags new_flag)
+    list(APPEND local_ev_flags "${new_flag}")
+endmacro()
+
+# void append_gd_flags(string new_flag);
+# - appends new_flag to gd_flags list
+macro(append_gd_flags new_flag)
+    list(APPEND local_gd_flags "${new_flag}")
+endmacro()
+
+include(HelperFunctions) # for set_legal_type(), set_legal_arch()
+
+# Perl expand-vars.pl flags
+function(set_ev_flags input_ev_flags)
+    set(local_ev_flags)
+    set_legal_type("${lib_type}" legal_type)
+    set_legal_arch("${arch}" legal_arch)
+    # need -D Revision="\$Revision" to show up
+    append_ev_flags("-D Revision=\"\\\\$$Revision\"") 
+    append_ev_flags("-D Date=\"\\\\$$Date\"")
+    append_ev_flags("-D KMP_TYPE=\"${legal_type}\"")
+    append_ev_flags("-D KMP_ARCH=\"${legal_arch}\"")
+    append_ev_flags("-D KMP_VERSION_MAJOR=${version}")
+    append_ev_flags("-D KMP_VERSION_MINOR=0")
+    append_ev_flags("-D KMP_VERSION_BUILD=${build_number}")
+    append_ev_flags("-D KMP_BUILD_DATE=\"${date}\"")
+    append_ev_flags("-D KMP_TARGET_COMPILER=12")
+    if(${DIAG})
+        append_ev_flags("-D KMP_DIAG=1")
+    else()
+        append_ev_flags("-D KMP_DIAG=0")
+    endif()
+    if(${DEBUG_INFO})
+        append_ev_flags("-D KMP_DEBUG_INFO=1")
+    else()
+        append_ev_flags("-D KMP_DEBUG_INFO=0")
+    endif()
+    if(${omp_version} EQUAL 40)
+        append_ev_flags("-D OMP_VERSION=201307")
+    elseif(${omp_version} EQUAL 30)
+        append_ev_flags("-D OMP_VERSION=201107")
+    else()
+        append_ev_flags("-D OMP_VERSION=200505")
+    endif()
+    set(${input_ev_flags} "${local_ev_flags}" PARENT_SCOPE)
+endfunction()
+
+function(set_gd_flags input_gd_flags)
+    set(local_gd_flags)
+    if(${IA32})
+        append_gd_flags("-D arch_32")
+    elseif(${INTEL64})
+        append_gd_flags("-D arch_32e")
+    else()
+        append_gd_flags("-D arch_${arch}")
+    endif()
+    if(${NORMAL_LIBRARY})
+        append_gd_flags("-D norm")
+    elseif(${PROFILE_LIBRARY})
+        append_gd_flags("-D prof")
+    elseif(${STUBS_LIBRARY})
+        append_gd_flags("-D stub")
+    endif()
+    if(${omp_version} GREATER 40 OR ${omp_version} EQUAL 40)
+        append_gd_flags("-D OMP_40")
+    endif()
+    if(${omp_version} GREATER 30 OR ${omp_version} EQUAL 30)
+        append_gd_flags("-D OMP_30")
+    endif()
+    if(NOT "${version}" STREQUAL "4")
+        append_gd_flags("-D msvc_compat")
+    endif()
+    if(${DIAG})
+        append_gd_flags("-D KMP_DEBUG")
+    endif()
+    set(${input_gd_flags} "${local_gd_flags}" PARENT_SCOPE)
+endfunction()
diff -uNr openmp.orig/runtime/cmake/SourceFiles.cmake openmp/runtime/cmake/SourceFiles.cmake
--- openmp.orig/runtime/cmake/SourceFiles.cmake	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/cmake/SourceFiles.cmake	2014-06-07 12:07:06.000000000 -0400
@@ -0,0 +1,112 @@
+#
+#//===----------------------------------------------------------------------===//
+#//
+#//                     The LLVM Compiler Infrastructure
+#//
+#// This file is dual licensed under the MIT and the University of Illinois Open
+#// Source Licenses. See LICENSE.txt for details.
+#//
+#//===----------------------------------------------------------------------===//
+#
+
+macro(append_c_source_file new_c_file)
+    list(APPEND local_c_source_files "${new_c_file}")
+endmacro()
+
+macro(append_cpp_source_file new_cpp_file)
+    list(APPEND local_cpp_source_files "${new_cpp_file}")
+endmacro()
+
+macro(append_asm_source_file new_asm_file)
+    list(APPEND local_asm_source_files "${new_asm_file}")
+endmacro()
+
+macro(append_imp_c_source_file new_import_c_file)
+    list(APPEND local_imp_c_files "${new_import_c_file}")
+endmacro()
+
+# files are relative to the src directory
+
+function(set_c_files input_c_source_files) 
+    set(local_c_source_files "")
+    append_c_source_file("kmp_ftn_cdecl.c")
+    append_c_source_file("kmp_ftn_extra.c")
+    append_c_source_file("kmp_version.c")
+    if(${STUBS_LIBRARY})
+        append_c_source_file("kmp_stub.c")
+    else()
+        append_c_source_file("kmp_alloc.c")
+        append_c_source_file("kmp_atomic.c")
+        append_c_source_file("kmp_csupport.c")
+        append_c_source_file("kmp_debug.c")
+        append_c_source_file("kmp_itt.c")
+        append_c_source_file("kmp_environment.c")
+        append_c_source_file("kmp_error.c")
+        append_c_source_file("kmp_global.c")
+        append_c_source_file("kmp_i18n.c")
+        append_c_source_file("kmp_io.c")
+        append_c_source_file("kmp_runtime.c")
+        append_c_source_file("kmp_settings.c")
+        append_c_source_file("kmp_str.c")
+        append_c_source_file("kmp_tasking.c")
+        append_c_source_file("kmp_taskq.c")
+        append_c_source_file("kmp_threadprivate.c")
+        append_c_source_file("kmp_utility.c")
+        if(${USE_ITT_NOTIFY})
+            append_c_source_file("thirdparty/ittnotify/ittnotify_static.c")
+        endif()
+        if(${WINDOWS})
+            append_c_source_file("z_Windows_NT_util.c")
+            append_c_source_file("z_Windows_NT-586_util.c")
+        else()
+            append_c_source_file("z_Linux_util.c")
+            append_c_source_file("kmp_gsupport.c")
+        endif()
+    endif()
+    set(${input_c_source_files} "${local_c_source_files}" PARENT_SCOPE)
+endfunction()
+
+function(set_cpp_files input_cpp_source_files) 
+    set(local_cpp_source_files "")
+    if(NOT ${STUBS_LIBRARY})
+        #append_cpp_source_file("kmp_barrier.cpp")
+        append_cpp_source_file("kmp_affinity.cpp")
+        append_cpp_source_file("kmp_dispatch.cpp")
+        append_cpp_source_file("kmp_lock.cpp")
+        append_cpp_source_file("kmp_sched.cpp")
+        if("${omp_version}" STREQUAL "40")
+            append_cpp_source_file("kmp_taskdeps.cpp")
+            append_cpp_source_file("kmp_cancel.cpp")
+        endif()
+        #if(${STATS_GATHERING})
+        #   append_cpp_source_file("kmp_stats.cpp")
+        #    append_cpp_source_file("kmp_stats_timing.cpp")
+        #endif()
+    endif()
+
+    set(${input_cpp_source_files} "${local_cpp_source_files}" PARENT_SCOPE)
+endfunction()
+
+
+function(set_asm_files input_asm_source_files) 
+    set(local_asm_source_files "")
+    if(NOT ${STUBS_LIBRARY})
+        if(${WINDOWS})
+            append_asm_source_file("z_Windows_NT-586_asm.asm")
+        else()
+            append_asm_source_file("z_Linux_asm.s")
+        endif()
+    endif()
+    set(${input_asm_source_files} "${local_asm_source_files}" PARENT_SCOPE)
+endfunction()
+
+
+function(set_imp_c_files input_imp_c_files)
+    set(local_imp_c_files "")
+    if(${WINDOWS})
+        if(${DYNAMIC_LIBRARY})
+            append_imp_c_source_file("kmp_import.c")
+        endif()
+    endif()
+    set(${input_imp_c_files} "${local_imp_c_files}" PARENT_SCOPE)
+endfunction()
diff -uNr openmp.orig/runtime/src/CMakeLists.txt openmp/runtime/src/CMakeLists.txt
--- openmp.orig/runtime/src/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ openmp/runtime/src/CMakeLists.txt	2014-06-06 21:31:20.000000000 -0400
@@ -0,0 +1,137 @@
+set(OMP_SHLIBEXT "${CMAKE_SHARED_LIBRARY_SUFFIX}")
+
+execute_process(COMMAND "date" "+%Y-%m-%d %H:%M:%S" OUTPUT_VARIABLE BUILD_TIME)
+string(REGEX REPLACE "\n" "" BUILD_TIME ${BUILD_TIME})
+
+include_directories(
+  .
+  include
+  include/${OMP_VERSION}
+  i18n
+  thirdparty/ittnotify
+  ${CMAKE_CURRENT_BINARY_DIR}
+)
+
+if(WIN32)
+  set(OS_GEN "win")
+elseif(APPLE)
+  set(OS_GEN "mac")
+elseif(UNIX)
+  set(OS_GEN "lin")
+else()
+  message(FATAL_ERROR "Unsupported OS")
+endif()
+
+if("${ARCH}" STREQUAL "")
+  set(ARCH "32e")
+endif()
+
+set(ARCH_STR "Intel(R) 64")
+
+set(FEATURE_FLAGS "-D USE_ITT_BUILD")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D NDEBUG")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_ARCH_STR=\"\\\"${ARCH_STR}\\\"\"")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D _GNU_SOURCE")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D _REENTRANT")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_USE_ASSERT")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D BUILD_I8")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D BUILD_TV")
+if(APPLE)
+  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -current_version 5.0")
+  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -compatibility_version 5.0")
+endif()
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_LIBRARY_FILE=\\\"libiomp5.${OMP_SHLIBEXT}\\\"")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_VERSION_MAJOR=${VERSION}")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D CACHE_LINE=64")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_ADJUST_BLOCKTIME=1")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D BUILD_PARALLEL_ORDERED")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_ASM_INTRINS")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D USE_LOAD_BALANCE")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D USE_CBLKDATA")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D GUIDEDLL_EXPORTS")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_GOMP_COMPAT")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_USE_ADAPTIVE_LOCKS=1")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_DEBUG_ADAPTIVE_LOCKS=0")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D OMP_50_ENABLED=0")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D OMP_41_ENABLED=0")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D OMP_40_ENABLED=1")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D OMP_30_ENABLED=1")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D USE_ITT_NOTIFY=1")
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D INTEL_ITTNOTIFY_PREFIX=__kmp_itt_")
+if (NOT APPLE)
+  set(FEATURE_FLAGS "${FEATURE_FLAGS} -D KMP_TDATA_GTID")
+endif()
+set(FEATURE_FLAGS "${FEATURE_FLAGS} -D _KMP_BUILD_TIME=\"\\\"${BUILD_TIME} UTC\\\"\"")
+
+set(COMMON_FLAGS "-fPIC")
+set(COMMON_FLAGS "${COMMON_FLAGS} -Wno-unused-value")
+set(COMMON_FLAGS "${COMMON_FLAGS} -Wno-switch")
+set(COMMON_FLAGS "${COMMON_FLAGS} -Wno-deprecated-register")
+set(COMMON_FLAGS "${COMMON_FLAGS} -fno-exceptions")
+
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FEATURE_FLAGS} ${COMMON_FLAGS}")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FEATURE_FLAGS} ${COMMON_FLAGS}")
+
+set(ASM_SOURCES
+  z_Linux_asm.s
+)
+set(SOURCES
+  thirdparty/ittnotify/ittnotify_static.c
+  kmp_affinity.cpp
+  kmp_alloc.c
+  kmp_atomic.c
+  kmp_cancel.cpp
+  kmp_csupport.c
+  kmp_debug.c
+  kmp_dispatch.cpp
+  kmp_environment.c
+  kmp_error.c
+  kmp_ftn_cdecl.c
+  kmp_ftn_extra.c
+  kmp_global.c
+  kmp_gsupport.c
+  kmp_i18n.c
+  kmp_io.c
+  kmp_itt.c
+  kmp_lock.cpp
+  kmp_runtime.c
+  kmp_sched.cpp
+  kmp_settings.c
+  kmp_str.c
+  kmp_taskdeps.cpp
+  kmp_tasking.c
+  kmp_taskq.c
+  kmp_threadprivate.c
+  kmp_utility.c
+  kmp_version.c
+  z_Linux_util.c
+)
+
+set_source_files_properties(${SOURCES} PROPERTIES LANGUAGE CXX)
+set_source_files_properties(${ASM_SOURCES} PROPERTIES LANGUAGE CXX)
+
+add_custom_command(
+  OUTPUT kmp_i18n_id.inc
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/../tools/message-converter.pl --os=${OS_GEN} --arch=${ARCH} --prefix=kmp_i18n --enum=kmp_i18n_id.inc ${CMAKE_CURRENT_SOURCE_DIR}/i18n/en_US.txt
+)
+add_custom_command(
+  OUTPUT kmp_i18n_default.inc
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/../tools/message-converter.pl --os=${OS_GEN} --arch=${ARCH} --prefix=kmp_i18n --default=kmp_i18n_default.inc ${CMAKE_CURRENT_SOURCE_DIR}/i18n/en_US.txt
+)
+add_custom_command(
+  OUTPUT omp.h
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/../tools/expand-vars.pl --strict -D Revision=\"\\$$Revision\" -D Date=\"\\$$Date\" -D KMP_TYPE=\"Performance\" -D KMP_ARCH=\"\\\"${ARCH_STR}\\\"\" -D KMP_VERSION_MAJOR=${VERSION} -D KMP_VERSION_MINOR=0 -D KMP_VERSION_BUILD=00000000 -D KMP_BUILD_DATE=\"${BUILD_TIME} UTC\" -D KMP_TARGET_COMPILER=12 -D KMP_DIAG=0 -D KMP_DEBUG_INFO=0 -D OMP_VERSION=${OMP_VERSION} ${CMAKE_CURRENT_SOURCE_DIR}/include/${OMP_VERSION_NUM}/omp.h.var omp.h
+)
+add_custom_command(
+  OUTPUT z_Linux_asm.o
+    COMMAND ${CMAKE_CXX_COMPILER} -c -o z_Linux_asm.o -D KMP_ASM_INTRINS -D KMP_GOMP_COMPAT -D KMP_ARCH_X86_64 -x assembler-with-cpp ${CMAKE_CURRENT_SOURCE_DIR}/${ASM_SOURCES}
+)
+
+add_custom_target(gen_kmp_i18n DEPENDS kmp_i18n_id.inc kmp_i18n_default.inc omp.h z_Linux_asm.o)
+
+if(NOT APPLE)
+  set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/exports_so.txt")
+endif()
+
+add_library(iomp5 SHARED ${SOURCES} z_Linux_asm.o)
+add_dependencies(iomp5 gen_kmp_i18n)
