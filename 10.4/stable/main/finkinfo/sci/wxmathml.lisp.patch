--- data/wxmathml.lisp	2012-01-19 03:05:06.000000000 -0700
+++ data/wxmathml.lisp.patched	2012-08-20 11:22:56.000000000 -0700
@@ -38,7 +38,36 @@
   #+clisp `(let ((custom:*suppress-check-redefinition* t)) ,form)
   #-(or sbcl clisp) `(progn ,form))
 
-($put '$wxmaxima `((mlist simp) 0 8 7) '$version)
+($put '$wxmaxima `((mlist simp) 12 4 1) '$version)
+
+(defun $wxbuild_info ()
+  (let ((wxmaxima-version (cdr ($get '$wxmaxima '$version)))
+        (year (sixth cl-user:*maxima-build-time*))
+        (month (fifth cl-user:*maxima-build-time*))
+        (day (fourth cl-user:*maxima-build-time*))
+        (hour (third cl-user:*maxima-build-time*))
+        (minute (second cl-user:*maxima-build-time*))
+        (seconds (first cl-user:*maxima-build-time*)))
+    (format t "wxMaxima version: ~{~d~^.~}~%" wxmaxima-version)
+    (format t "Maxima version: ~a~%" *autoconf-version*)
+    (format t "Maxima build date: ~4,'0d-~2,'0d-~2,'0d ~2,'0d:~2,'0d:~2,'0d~%"
+            year month day hour minute seconds)
+    (format t "Host type: ~a~%" *autoconf-host*)
+    (format t "Lisp implementation type: ~a~%" (lisp-implementation-type))
+    (format t "Lisp implementation version: ~a~%" (lisp-implementation-version)))
+  "")
+
+(defmfun $wxbug_report ()
+  (format t "~%The Maxima bug database is available at~%")
+  (format t "    http://sourceforge.net/tracker/?atid=104933&group_id=4933&func=browse~%")
+  (format t "Submit bug reports by following the 'Add new' link on that page.~%~%")
+  (format t "The wxMaxima bug database is available at~%")
+  (format t "    https://github.com/andrejv/wxmaxima/issues?direction=desc&sort=created&state=open~%")
+  (format t "Submit bug reports by following the 'New issue' link on that page.~%~%")
+  (format t "Please include the following information with your bug report:~%")
+  (format t "-------------------------------------------------------------~%")
+  ($wxbuild_info)
+  (format t "-------------------------------------------------------------~%"))
 
 (setf (get '$inchar 'assign) 'neverset)
 (setf (get '$outchar 'assign) 'neverset)
@@ -65,6 +94,8 @@
          (wxxml-matchfix-dim x l r))
 	((equal (get (caar x) 'dimension) 'dimension-nary)
 	 (wxxml-nary x l r))
+        ((get (caar x) 'defstruct-template)
+         (wxxml-defstruct x l r))
         (t (wxxml-function x l r))))
 
 (defmacro make-tag (val tag)
@@ -187,6 +218,14 @@
               x (cdr x)
               l nil))))
 
+(defun wxxml-defstruct (x l r)
+  (let ((L1 (cdr (get (caar x) 'defstruct-template)))
+        (L2 (cdr x)))
+    (wxxml-function
+     (cons (car x)
+           (mapcar #'(lambda (e1 e2) (if (eq e1 e2) e1 `((mequal) ,e1 ,e2))) L1 L2))
+     l r)))
+
 ;; we could patch this so sin x rather than sin(x), but instead we made
 ;; sin a prefix operator
 (defun wxxml-function (x l r)
@@ -821,7 +860,9 @@
 (defprop %derivative 119. wxxml-rbp)
 
 (defun wxxml-derivative (x l r)
-  (if (and $derivabbrev (every #'integerp (odds (cddr x) 0)))
+  (if (and $derivabbrev
+           (every #'integerp (odds (cddr x) 0))
+           (every #'atom (odds (cddr x) 1)))
       (append l (wxxml-d-abbrev x) r)
       (wxxml (wxxml-d x) (append l '("<d>"))
 	     (append '("</d>") r) 'mparen 'mparen)))
