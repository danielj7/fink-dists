diff -ruN zsh-templates-2.0.5-orig/Library/LaunchAgents.disabled/zsh.fink.completion.plist zsh-templates-2.0.5/Library/LaunchAgents.disabled/zsh.fink.completion.plist
--- zsh-templates-2.0.5-orig/Library/LaunchAgents.disabled/zsh.fink.completion.plist	1969-12-31 16:00:00.000000000 -0800
+++ zsh-templates-2.0.5/Library/LaunchAgents.disabled/zsh.fink.completion.plist	2014-08-28 10:48:12.000000000 -0700
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>Disabled</key>
+	<true/>
+	<key>Label</key>
+	<string>zsh.fink.completion</string>
+	<key>OnDemand</key>
+	<true/>
+	<key>ProgramArguments</key>
+	<array>
+		<string>/Library/init/zsh/zshrc.d/local-functions/darwin/_FinkMakeListCache</string>
+	</array>
+	<key>RunAtLoad</key>
+	<true/>
+	<key>ServiceDescription</key>
+	<string>Update the fink completion cache whenever it needs to be changed</string>
+	<key>WatchPaths</key>
+	<array>
+		<string>@FINKPREFIX@/var/lib/dpkg/status</string>
+	</array>
+</dict>
+</plist>
diff -ruN zsh-templates-2.0.5-orig/Library/LaunchAgents.disabled/zsh.open.completion.plist zsh-templates-2.0.5/Library/LaunchAgents.disabled/zsh.open.completion.plist
--- zsh-templates-2.0.5-orig/Library/LaunchAgents.disabled/zsh.open.completion.plist	1969-12-31 16:00:00.000000000 -0800
+++ zsh-templates-2.0.5/Library/LaunchAgents.disabled/zsh.open.completion.plist	2014-08-28 10:48:12.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>Disabled</key>
+	<true/>
+	<key>Label</key>
+	<string>zsh.open.completion</string>
+	<key>OnDemand</key>
+	<true/>
+	<key>ProgramArguments</key>
+	<array>
+		<string>/Library/init/zsh/zshrc.d/local-functions/etc/faster_open.zsh</string>
+	</array>
+	<key>RunAtLoad</key>
+	<true/>
+    <key>WorkingDirectory</key>
+        <string></string>
+	<key>ServiceDescription</key>
+	<string>Run mdfind to prep faster open -a completions in zsh</string>
+	<key>WatchPaths</key>
+	<array>
+		<string>.zrefresh</string>
+	</array>
+</dict>
+</plist>
diff -ruN zsh-templates-2.0.5-orig/Library/LaunchAgents.disabled/zsh.refresh.completion.plist zsh-templates-2.0.5/Library/LaunchAgents.disabled/zsh.refresh.completion.plist
--- zsh-templates-2.0.5-orig/Library/LaunchAgents.disabled/zsh.refresh.completion.plist	1969-12-31 16:00:00.000000000 -0800
+++ zsh-templates-2.0.5/Library/LaunchAgents.disabled/zsh.refresh.completion.plist	2014-08-28 10:48:12.000000000 -0700
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>Disabled</key>
+	<true/>
+	<key>Label</key>
+	    <string>zsh.refresh.completion</string>
+	<key>OnDemand</key>
+	    <true/>
+	<key>RunAtLoad</key>
+	    <true/>
+    <key>WorkingDirectory</key>
+        <string></string>
+	<key>ProgramArguments</key>
+	<array>
+        <string>/usr/bin/touch</string>
+		<string>.zrefresh</string>
+	</array>
+	<key>ServiceDescription</key>
+	    <string>Create the empty file ~/.zrefresh</string>
+</dict>
+</plist>
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/man/html/customize_x11.html zsh-templates-2.0.5/Library/init/zsh/man/html/customize_x11.html
--- zsh-templates-2.0.5-orig/Library/init/zsh/man/html/customize_x11.html	2013-12-27 12:01:06.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/man/html/customize_x11.html	1969-12-31 16:00:00.000000000 -0800
@@ -1,69 +0,0 @@
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
-    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta name="generator" content=
-"HTML Tidy for Mac OS X (vers 1st December 2004), see www.w3.org" />
-<meta http-equiv="Content-Type" content=
-"text/html; charset=us-ascii" />
-<title>Manual Page for customize_x11</title>
-
-<style type="text/css">
-/*<![CDATA[*/
-<!--.red {color: #CC0000}-->
-/*]]>*/
-</style>
-
-<style type="text/css">
-/*<![CDATA[*/
-<!--.hed {color: #000000; font-weight: bold; font-size: larger;}-->
-/*]]>*/
-</style>
-</head>
-<body>
-<pre>
- <a href=
-"http://sage.ucsc.edu/Library/init/zsh/man/html/customize_x11.html">customize_x11(7)</a>       Mac OS X Darwin ZSH customization      <a href="http://sage.ucsc.edu/Library/init/zsh/man/html/customize_x11.html">customize_x11(7)</a>
-
-
-
-<span class="hed">NAME</span>
-       <span class=
-"red">customize_x11</span> - Assist the user in changing (improving) the behavior of
-       Apple's X11.app
-
-
-<span class="hed">SYNOPSIS</span>
-       customize_x11
-
-
-<span class="hed">DESCRIPTION</span>
-       <span class=
-"red">customize_x11</span> is an interactive shell script that assists the  user  in
-       changing settings that govern the behavior of X11.  It prompts the user
-       before making any change, and explains the options carefully.
-
-       <span class=
-"red">customize_x11</span> will ask the user if X11 should be added  to  the  user's
-       startup  items, whether focus follows mouse behavior (emulating canoni-
-       cal X11 unix systems) should be set, whether the user should be  warned
-       on  logout  if  X11 is running, whether X11 should be run as a dockless
-       and menuless application in the background, as  so  forth.   Re-running
-       the function will permit the user to restore default behaviors.
-
-
-
-<span class="hed">AUTHOR</span>
-       William Scott
-
-
-<span class="hed">MAINTAINER</span>
-       W. G. Scott <a href=
-"mailto:wgscott@users.sourceforge.net">wgscott@users.sourceforge.net</a>
-
-
-
-Mac OS X                        March 19, 2005                <a href="http://sage.ucsc.edu/Library/init/zsh/man/html/customize_x11.html">customize_x11(7)</a>
-</pre>
-</body>
-</html>
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/man/html/customize_x11_gui.html zsh-templates-2.0.5/Library/init/zsh/man/html/customize_x11_gui.html
--- zsh-templates-2.0.5-orig/Library/init/zsh/man/html/customize_x11_gui.html	2013-12-27 12:01:06.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/man/html/customize_x11_gui.html	1969-12-31 16:00:00.000000000 -0800
@@ -1,82 +0,0 @@
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
-    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta name="generator" content=
-"HTML Tidy for Mac OS X (vers 1st December 2004), see www.w3.org" />
-<meta http-equiv="Content-Type" content=
-"text/html; charset=us-ascii" />
-<title>Manual Page for customize_x11_gui</title>
-
-<style type="text/css">
-/*<![CDATA[*/
-<!--.red {color: #CC0000}-->
-/*]]>*/
-</style>
-
-<style type="text/css">
-/*<![CDATA[*/
-<!--.hed {color: #000000; font-weight: bold; font-size: larger;}-->
-/*]]>*/
-</style>
-</head>
-<body>
-<pre>
- <a href=
-"http://sage.ucsc.edu/Library/init/zsh/man/html/customize_x11_gui.html">customize_x11_gui(7)</a>   Mac OS X Darwin ZSH customization  <a href="http://sage.ucsc.edu/Library/init/zsh/man/html/customize_x11_gui.html">customize_x11_gui(7)</a>
-
-
-
-<span class="hed">NAME</span>
-       <span class=
-"red">customize_x11_gui</span>  - Assist the user in changing (improving) the behav-
-       ior of Apple's X11.app -- GUI version
-
-
-<span class="hed">SYNOPSIS</span>
-       customize_x11_gui
-
-
-<span class="hed">DESCRIPTION</span>
-       <span class=
-"red">customize_x11_gui</span> is GUI-wrapped shell script that assists the user  in
-       changing settings that govern the behavior of X11.  It prompts the user
-       before making any change, and explains the options carefully.
-
-       <span class=
-"red">customize_x11_gui</span> will ask the user if  X11  should  be  added  to  the
-       user's  startup  items, whether focus follows mouse behavior (emulating
-       canonical X11 unix systems) should be set, whether the user  should  be
-       warned  on  logout  if  X11  is running, whether X11 should be run as a
-       dockless and menuless application in the background, as so forth.   Re-
-       running the function will permit the user to restore default behaviors.
-
-       The gui version will create entries in .cshrc, .bashrc,  .bash_profile,
-       and  .zshrc  to  set  the <span class=
-"red">DISPLAY</span> variable correctly for multiple users
-       when simultanously logged in using Fast User Switching and X11.app.
-
-
-<span class="hed">URL</span>
-       There is a web page that explains this in more detail  and  provides  a
-       screen shot of the gui.
-
-       http://www.chemistry.ucsc.edu/~wgscott/xtal/Xterminator/
-
-
-
-<span class="hed">AUTHOR</span>
-       William Scott
-
-
-<span class="hed">MAINTAINER</span>
-       W. G. Scott <a href=
-"mailto:wgscott@users.sourceforge.net">wgscott@users.sourceforge.net</a>
-
-
-
-Mac OS X                        August 10, 2005           <a href=
-"http://sage.ucsc.edu/Library/init/zsh/man/html/customize_x11_gui.html">customize_x11_gui(7)</a>
-</pre>
-</body>
-</html>
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/man/man7/customize_x11.7 zsh-templates-2.0.5/Library/init/zsh/man/man7/customize_x11.7
--- zsh-templates-2.0.5-orig/Library/init/zsh/man/man7/customize_x11.7	2013-12-27 12:01:05.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/man/man7/customize_x11.7	1969-12-31 16:00:00.000000000 -0800
@@ -1,30 +0,0 @@
-.\"
-.TH "customize_x11" 7 "March 19, 2005" "Mac OS X" "Mac OS X Darwin ZSH customization" 
-.SH NAME
-.B customize_x11
-\- Assist the user in changing (improving) the behavior of Apple's X11.app
-
-.SH SYNOPSIS
-
-customize_x11
-
-.SH DESCRIPTION
-
-.B customize_x11
-is an interactive shell script that assists the user in changing settings that
-govern the behavior of X11.  It prompts the user before making any change, and
-explains the options carefully.
-
-.B customize_x11
-will ask the user if X11 should be added to the user's startup items, whether focus follows
-mouse behavior (emulating canonical X11 unix systems) should be set, whether the user should
-be warned on logout if X11 is running, whether X11 should be run as a dockless and menuless
-application in the background, as so forth.  Re-running the function will permit the user to
-restore default behaviors.
-
-
-.SH AUTHOR
-William Scott  
-
-.SH MAINTAINER
-W. G. Scott <wgscott@users.sourceforge.net>
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/man/man7/customize_x11_gui.7 zsh-templates-2.0.5/Library/init/zsh/man/man7/customize_x11_gui.7
--- zsh-templates-2.0.5-orig/Library/init/zsh/man/man7/customize_x11_gui.7	2013-12-27 12:01:05.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/man/man7/customize_x11_gui.7	1969-12-31 16:00:00.000000000 -0800
@@ -1,41 +0,0 @@
-.\"
-.TH "customize_x11_gui" 7 "August 10, 2005" "Mac OS X" "Mac OS X Darwin ZSH customization" 
-.SH NAME
-.B customize_x11_gui
-\- Assist the user in changing (improving) the behavior of Apple's X11.app -- GUI version
-
-.SH SYNOPSIS
-
-customize_x11_gui
-
-.SH DESCRIPTION
-
-.B customize_x11_gui
-is GUI-wrapped shell script that assists the user in changing settings that
-govern the behavior of X11.  It prompts the user before making any change, and
-explains the options carefully.
-
-.B customize_x11_gui
-will ask the user if X11 should be added to the user's startup items, whether focus follows
-mouse behavior (emulating canonical X11 unix systems) should be set, whether the user should
-be warned on logout if X11 is running, whether X11 should be run as a dockless and menuless
-application in the background, as so forth.  Re-running the function will permit the user to
-restore default behaviors.
-
-The gui version will create entries in .cshrc, .bashrc, .bash_profile, and .zshrc to set
-the 
-.B DISPLAY
-variable correctly for multiple users when simultanously logged in using Fast User Switching
-and X11.app.
-
-.SH URL
-There is a web page that explains this in more detail and provides a screen shot of the gui.
-
-http://www.chemistry.ucsc.edu/~wgscott/xtal/Xterminator/
-
-
-.SH AUTHOR
-William Scott  
-
-.SH MAINTAINER
-W. G. Scott <wgscott@users.sourceforge.net>
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/031_functions.additional.zsh zsh-templates-2.0.5/Library/init/zsh/zshrc.d/031_functions.additional.zsh
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/031_functions.additional.zsh	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/031_functions.additional.zsh	2014-08-28 10:48:14.000000000 -0700
@@ -305,11 +305,9 @@
 
             # Toggle SPACES on and off
             
-            if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-                /usr/bin/true
-            else
+             
                 autoload -U toggle_spaces switcher
-            fi
+             
 
             # These need to be invoked by an admin user.
             if [[ -n $(/usr/bin/id -p $USER | grep -w admin ) ]]; then
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/190_environment.sysmaintenance.zsh zsh-templates-2.0.5/Library/init/zsh/zshrc.d/190_environment.sysmaintenance.zsh
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/190_environment.sysmaintenance.zsh	2013-12-27 12:01:03.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/190_environment.sysmaintenance.zsh	2014-08-28 10:48:12.000000000 -0700
@@ -7,55 +7,55 @@
  		###################################################################
 
 
-
-if [[ -o interactive && $( id -Gn ) == *admin* ]]; then
-
-	# Check to see if locate_database exists, and if it is younger that two weeks old.   
-	# If not, prompt user to run the periodic maintenance scripts. These get run
-	# automatically if your computer is on at 3 am. Otherwise, you have to do it somehow:
-
-	if [[  $(uname) == Darwin &&  $(sw_vers -productVersion) < 10.6    ]];then
-		if [[ /var/db/locate.database == $( ls /var/db/locate.database(.mw-2) ) ]];then
-			:  # Do nothing, database is younger than two weeks old
-		else 
-			print ""
-			if [[ ! -f /var/db/locate.database ]];then
-				print "\e[1m  No locate.database found"
-				print ""
-			else
-				print "\e[1m  System maintenance scripts haven't been run for two weeks."
-				print ""
-			fi
-			print ""
-			print "  Please run the system periodic maintenance scripts as soon as possible."
-			print ""
-			print -n "  Shall I do this for you? \e[0m [y/N] "
-			print ""
-
-			user_task_yes=( sudo periodic monthly daily weekly  )
-			user_task_no=(   )
-
-			timeout=15 # second until default answer takes effect
-
-			        answer=""
-			        read -t $timeout -A answer
-
-			        if [[ $answer[1] == (y|Y) ]]; then
-						print ""
-						print "Issuing \e[1m sudo periodic monthly daily weekly \e[0m now"
-			            $user_task_yes
-						print ""
-			            answer=""
-			        else
-			            $user_task_no
-						print ""
-						print "Issue \e[1m sudo periodic monthly daily weekly \e[0m at your convenience"
-						print ""
-			            answer=""
-			        fi
-		fi
-	fi
-fi # [[ -o interactive ]]     
+#  
+#  if [[ -o interactive && $( id -Gn ) == *admin* ]]; then
+#  
+#  	# Check to see if locate_database exists, and if it is younger that two weeks old.   
+#  	# If not, prompt user to run the periodic maintenance scripts. These get run
+#  	# automatically if your computer is on at 3 am. Otherwise, you have to do it somehow:
+#  
+#  	if [[  $(uname) == Darwin &&  $(sw_vers -productVersion) < 10.6    ]];then
+#  		if [[ /var/db/locate.database == $( ls /var/db/locate.database(.mw-2) ) ]];then
+#  			:  # Do nothing, database is younger than two weeks old
+#  		else 
+#  			print ""
+#  			if [[ ! -f /var/db/locate.database ]];then
+#  				print "\e[1m  No locate.database found"
+#  				print ""
+#  			else
+#  				print "\e[1m  System maintenance scripts haven't been run for two weeks."
+#  				print ""
+#  			fi
+#  			print ""
+#  			print "  Please run the system periodic maintenance scripts as soon as possible."
+#  			print ""
+#  			print -n "  Shall I do this for you? \e[0m [y/N] "
+#  			print ""
+#  
+#  			user_task_yes=( sudo periodic monthly daily weekly  )
+#  			user_task_no=(   )
+#  
+#  			timeout=15 # second until default answer takes effect
+#  
+#  			        answer=""
+#  			        read -t $timeout -A answer
+#  
+#  			        if [[ $answer[1] == (y|Y) ]]; then
+#  						print ""
+#  						print "Issuing \e[1m sudo periodic monthly daily weekly \e[0m now"
+#  			            $user_task_yes
+#  						print ""
+#  			            answer=""
+#  			        else
+#  			            $user_task_no
+#  						print ""
+#  						print "Issue \e[1m sudo periodic monthly daily weekly \e[0m at your convenience"
+#  						print ""
+#  			            answer=""
+#  			        fi
+#  		fi
+#  	fi
+#  fi # [[ -o interactive ]]     
    
     
  
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/environment.x11.oldsetup.zsh zsh-templates-2.0.5/Library/init/zsh/zshrc.d/environment.x11.oldsetup.zsh
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/environment.x11.oldsetup.zsh	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/environment.x11.oldsetup.zsh	2014-08-28 10:48:14.000000000 -0700
@@ -8,92 +8,92 @@
 			#################################################
 
 
-#  This is used only on Darwin OS X prior to 10.5 in interactive sessions.
-#  It is all done automatically > 10.5 and on other operating systems, so the
-#  first test will disable it automatically for >= 10.5.  
-
-
-###############################################################################
-
-if [[  $(uname) == Darwin && $(sw_vers -productVersion) < 10.5  && -z $SSH_CONNECTION && -o interactive ]]; then
-	
-	###########################################
-	#    Optional Startup of X11.app          #
-	###########################################
-
-	#  If you want Apple's X11 to be started up with "open -a X11" if it is 
-	#  notalready running, then comment out the line following the arrow:
-	
-	# {====>} 
-		export open_apple_x11='skip'
-		
-		# Allow a user to over-ride the default behavior by creating a file
-		# with either "export open_apple_x11='skip'" or
-		# export open_apple_x11='use'
-		if [[ -f ~/.zsh/skipxrc ]];then
-        	source ~/.zsh/skipxrc  
-    	fi
-
-		# Now open X11.app only if told to do so and it is not already running:
-		if [[ $open_apple_x11 != 'skip'  ]];then
-			already_running_x11=$(ps -wwx | grep -F X11.app | grep -v grep | head -n 1 | awk '{print $1}')
-			if [[  $already_running_x11 -gt 1 ]];then
-				:
-			else
-				command open -a X11
-				if [[ $? != 0 ]];then
-					print ""
-					print "Unable to open Apple's X11.  Is it installed?"
-				fi
-			fi
-		fi
-		
-	# End of X11.app startup part
-	#---------------------------------------------------
-
-    # Do not do this in 10.5 and above. cf: 
-    #  http://lists.apple.com/archives/X11-users/2007/Oct/msg00065.html
-
-	if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-
-	
-		###########################################
-		#    X11 and $DISPLAY control             #
-		###########################################	
-		
-		# Now set the DISPLAY variable, if needed.  If X11.app is running,
-		# we deduce and construct the DISPLAY value from the process. If
-		# this doesn't work (no X11.app running), we give up and dumbly set the
-		# value to :0.0. Users who want to avoid the small ps overhead can 
-		# comment out the "disp_no" line.  This will simply set DISPLAY=:0.0  
-		
-	 	if [[ -z $DISPLAY && -z $SSH_CONNECTION ]]; then
-	
-		    disp_no=($( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-	
-		    if [[ -n $disp_no ]];then
-		        export DISPLAY=${disp_no}.0
-				# Colorful output tells us that the smart method has worked
-				print "\e[1mDISPLAY\e[0m \e[36mhas been set to\e[0m \e[1m$DISPLAY \e[0m"
-		    else
-				# FAILSAFE: dumb setting of DISPLAY gives a monochromatic message
-		        export DISPLAY=:0.0
-				print "DISPLAY has been set to $DISPLAY" 
-		    fi
-	
-		elif [[ -n $DISPLAY && -z $SSH_CONNECTION ]]; then
-		
-				# Inform that we have inherited the DISPLAY (as with an xterm)
-				print "\e[36minheriting\e[0m \e[1mDISPLAY\e[0m set to \e[1m$DISPLAY\e[0m"
-		fi
-	fi
-
-fi # [[  $(uname) == Darwin  && -z $SSH_CONNECTION ]]
-
-
-
-###############################################################################
-
+#  #  This is used only on Darwin OS X prior to 10.5 in interactive sessions.
+#  #  It is all done automatically > 10.5 and on other operating systems, so the
+#  #  first test will disable it automatically for >= 10.5.  
+#  
+#  
+#  ###############################################################################
+#  
+#  if [[  $(uname) == Darwin && $(sw_vers -productVersion) < 10.5  && -z $SSH_CONNECTION && -o interactive ]]; then
+#  	
+#  	###########################################
+#  	#    Optional Startup of X11.app          #
+#  	###########################################
+#  
+#  	#  If you want Apple's X11 to be started up with "open -a X11" if it is 
+#  	#  notalready running, then comment out the line following the arrow:
+#  	
+#  	# {====>} 
+#  		export open_apple_x11='skip'
+#  		
+#  		# Allow a user to over-ride the default behavior by creating a file
+#  		# with either "export open_apple_x11='skip'" or
+#  		# export open_apple_x11='use'
+#  		if [[ -f ~/.zsh/skipxrc ]];then
+#          	source ~/.zsh/skipxrc  
+#      	fi
+#  
+#  		# Now open X11.app only if told to do so and it is not already running:
+#  		if [[ $open_apple_x11 != 'skip'  ]];then
+#  			already_running_x11=$(ps -wwx | grep -F X11.app | grep -v grep | head -n 1 | awk '{print $1}')
+#  			if [[  $already_running_x11 -gt 1 ]];then
+#  				:
+#  			else
+#  				command open -a X11
+#  				if [[ $? != 0 ]];then
+#  					print ""
+#  					print "Unable to open Apple's X11.  Is it installed?"
+#  				fi
+#  			fi
+#  		fi
+#  		
+#  	# End of X11.app startup part
+#  	#---------------------------------------------------
+#  
+#      # Do not do this in 10.5 and above. cf: 
+#      #  http://lists.apple.com/archives/X11-users/2007/Oct/msg00065.html
+#  
+#  	if [[ $(sw_vers -productVersion) < 10.5 ]]; then
+#  
+#  	
+#  		###########################################
+#  		#    X11 and $DISPLAY control             #
+#  		###########################################	
+#  		
+#  		# Now set the DISPLAY variable, if needed.  If X11.app is running,
+#  		# we deduce and construct the DISPLAY value from the process. If
+#  		# this doesn't work (no X11.app running), we give up and dumbly set the
+#  		# value to :0.0. Users who want to avoid the small ps overhead can 
+#  		# comment out the "disp_no" line.  This will simply set DISPLAY=:0.0  
+#  		
+#  	 	if [[ -z $DISPLAY && -z $SSH_CONNECTION ]]; then
+#  	
+#  		    disp_no=($( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
+#  	
+#  		    if [[ -n $disp_no ]];then
+#  		        export DISPLAY=${disp_no}.0
+#  				# Colorful output tells us that the smart method has worked
+#  				print "\e[1mDISPLAY\e[0m \e[36mhas been set to\e[0m \e[1m$DISPLAY \e[0m"
+#  		    else
+#  				# FAILSAFE: dumb setting of DISPLAY gives a monochromatic message
+#  		        export DISPLAY=:0.0
+#  				print "DISPLAY has been set to $DISPLAY" 
+#  		    fi
+#  	
+#  		elif [[ -n $DISPLAY && -z $SSH_CONNECTION ]]; then
+#  		
+#  				# Inform that we have inherited the DISPLAY (as with an xterm)
+#  				print "\e[36minheriting\e[0m \e[1mDISPLAY\e[0m set to \e[1m$DISPLAY\e[0m"
+#  		fi
+#  	fi
+#  
+#  fi # [[  $(uname) == Darwin  && -z $SSH_CONNECTION ]]
+#  
+#  
+#  
+#  ###############################################################################
+#  
 
 
 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_comp_appgetter zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_comp_appgetter
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_comp_appgetter	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_comp_appgetter	2014-08-28 19:44:51.000000000 -0700
@@ -31,20 +31,20 @@
         function FindCarbonApps {
         cd /Applications
         # This is the slow part.  There must be a better way.
-        file * | grep header | perl -pi -e 's;header for PowerPC PEF executable;;g' \
-         | perl -pi -e 's;:;.app;g' 
-        file */* | grep header | perl -pi -e 's;header for PowerPC PEF executable;;g' \
-         | perl -pi -e 's;:;.app;g'
-        file */*/* | grep header | perl -pi -e 's;header for PowerPC PEF executable;;g' \
-         | perl -pi -e 's;:;.app;g'
+        file * | grep header | perl -p -e 's;header for PowerPC PEF executable;;g' \
+         | perl -p -e 's;:;.app;g' 
+        file */* | grep header | perl -p -e 's;header for PowerPC PEF executable;;g' \
+         | perl -p -e 's;:;.app;g'
+        file */*/* | grep header | perl -p -e 's;header for PowerPC PEF executable;;g' \
+         | perl -p -e 's;:;.app;g'
         # This one causes some people problems, but if applications are missing from your list
         #  try using it...
-        # file */*/*/* | grep header | perl -pi -e 's;header for PowerPC PEF executable;;g' \
-        # | perl -pi -e 's;:;.app;g'
+        # file */*/*/* | grep header | perl -p -e 's;header for PowerPC PEF executable;;g' \
+        # | perl -p -e 's;:;.app;g'
         # This finds the adobe apps:
         /usr/bin/locate "/Applications**/Contents" | grep -v .app | grep -v Plug-Ins\
          | grep -v plugin | grep -v Support | grep -v Documentation | grep -v bundle\
-          | grep -v service | grep -v help | perl -pi -e 's;/Contents;.app;g'
+          | grep -v service | grep -v help | perl -p -e 's;/Contents;.app;g'
         }
         
         
@@ -67,10 +67,10 @@
         
         (FindCarbonApps; FindCocoaApps) \
         | sed 's|^.*/\([^/]*\)\.app.*|\1|' \
-        | perl -pi -e "s/([ ')(])/\\\\\$1/g" \
-        | perl -pi -e 's;EndNote\\\ 7.0;EndNote\\\ 7.0.app.app;g' \
-        | perl -pi -e 's;Adobe\\\ Reader\\\ 6.0;Adobe\\\ Reader\\\ 6.0.app.app;g' \
-        | perl -pi -e 's;Adobe\\\ Reader\\\ 7.0;Adobe\\\ Reader\\\ 7.0.app.app;g' \
+        | perl -p -e "s/([ ')(])/\\\\\$1/g" \
+        | perl -p -e 's;EndNote\\\ 7.0;EndNote\\\ 7.0.app.app;g' \
+        | perl -p -e 's;Adobe\\\ Reader\\\ 6.0;Adobe\\\ Reader\\\ 6.0.app.app;g' \
+        | perl -p -e 's;Adobe\\\ Reader\\\ 7.0;Adobe\\\ Reader\\\ 7.0.app.app;g' \
         | sort -u 
       
 #    }  ### function _comp_appgetter -- end of definition
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_guidirs zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_guidirs
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_guidirs	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_guidirs	2014-08-28 19:45:21.000000000 -0700
@@ -27,7 +27,7 @@
 # =========>
 #
 
-	filelist=($(print $global_dirs | perl -pi -e 's| |\n|g' | perl -pi -e 's|_SPACE_|\*|g' ) )
+	filelist=($(print $global_dirs | perl -p -e 's| |\n|g' | perl -p -e 's|_SPACE_|\*|g' ) )
 
 	item_list="" 
 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_init_open zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_init_open
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_init_open	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_init_open	2014-08-28 19:46:10.000000000 -0700
@@ -80,8 +80,8 @@
     #
     myapps=$(cat ~/.zsh/zshapplist | grep -v  \' )
     mkdir -p ~/.zsh/cache/$HOST
-    print _mac_apps\=\(\'"$myapps[@]"\'\) | perl -pi -e "s|\)\n|\)|g" | \
-           perl -pi -e "s|\n|' '|g" >| ~/.zsh/cache/$HOST/Mac_applications
+    print _mac_apps\=\(\'"$myapps[@]"\'\) | perl -p -e "s|\)\n|\)|g" | \
+           perl -p -e "s|\n|' '|g" >| ~/.zsh/cache/$HOST/Mac_applications
   } 
  
 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_mdfind zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_mdfind
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_mdfind	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_mdfind	2014-08-28 10:48:13.000000000 -0700
@@ -9,152 +9,6 @@
  
 # set -x
 
-#  Use a new version for 10.5 and above:
-
-if [[  $(uname) == Darwin && $(sw_vers -productVersion) < 10.5  ]]; then
-
-
-
-#  Old version of completion function for OS X 10.4:
-_mdfind () { 
-    
-    ########################################################################################################
-    # These have to be put in the environment file to work the first time
-    #
-    zmodload zsh/complist  2>/dev/null
-    zstyle ':completion:*' menu select=10  
-    zstyle ':completion:*' list-prompt '%S -- more -- %s' 
-    zstyle ':completion:*' group-name '' 
-    
-    #########################################################################################################
-    # SYNOPSIS  mdfind [-0] [-live] [-onlyin directory] query  
-    #
-    #    -0          Prints an ASCII NUL character after each result path.  This
-    #                is useful when used in conjunction with xargs -0.
-    #
-    #     -live       Causes the mdfind command to provide live-updates to the num-
-    #                 ber of files matching the query.  When an update causes the
-    #                 query results to change the number of matches is updated.
-    #                 The find can be cancelled by typing ctrl-C.            
-    #
-    #     -onlyin dir
-    #                 Limit the scope of the search to the directory specified.
-    #
-    # example:
-    # mdfind -onlyin /Applications -onlyin /Developer "kMDItemContentType == 'com.apple.application-*'"
-    
-    ########################################################################################################
-        
-       _arguments -C \
-        '-gui[use GUI menu of completions]: :->usethegui'\
-        '-0[used in conjunction with xargs -0]'\
-        '-live[live updates in search]'\
-        '-onlyin[specify the Directory]: :->mdsearchpath'\
-        '*: :->mdsearchstring'
-       
-    ####################################################################################     
-    # These functions are for "mdsearchstring"
-                
-                # This function corresponds to simply entering any unrestricted string. 
-                # There isn't anything to complete, but we need to add a space to get it to 
-                # work right.  (The _nothing fuction I would think should work, but it doesn't.)
-                
-                function _stringquery { 
-                    compadd -X %B'          i.e., type in your search string at the prompt,     %b' " " 
-                    #_message "Now type in your search string,"  
-                }
-                
-                ########################################################################################
-            
-                # This function generates a template for a search that is to be confined to a specified
-                # metadata attribute.  It uses mdimport -A to find the list of possibilities, and then
-                # generates a template as the completion.  It terminates with a single and double quote.
-                # The quoting structure is important.
-                
-                function _querycomp {
-                   compadd  -X %B'          or select one of the metadata attributes for searching from the menu below %b' \
-                   -Q -P \" -p kMDItem -S " == '*YourSearchStringGoesHere*'\"" $(/usr/bin/mdimport -A | awk '{print $1}' | \
-                   perl -p -e "s;('|kMDItem);;g"    ) 
-                }
-                
-                ########################################################################################
-                
-                # If we want to add a second metadata search template, we have to first remove the
-                # trailing double quote that follows the single quote generated by _querycomp
-                
-                function _chomp { BUFFER=${BUFFER/\'\"/\'}  }                          #'
-                
-                ########################################################################################
-                
-                # This function first calls _chomp to chomp off the double quote, and then it appends the
-                # Boolean AND operator (&&) and then the second template, which closes with a single and
-                # then double quote.  Any number of these can be added recursively, thanks to putting the
-                # _chomp function at the beginning.
-                
-                function _queryandcomp {   
-                    # Boolean and to append a second query   
-                    compadd -R _chomp -X %B'The metadata attributes, below, alternate Boolian AND and OR %b' \
-                   -Q -P \&\&\  -p kMDItem -S \
-                   " == '*YourSearchStringGoesHere*'\"" $(/usr/bin/mdimport -A | awk '{print $1}' | \
-                   perl -p -e "s;('|kMDItem);;g"    )  
-                }
-                
-                ########################################################################################
-                
-                # Same as _queryand, except uses the Boolean OR operator (||).
-                
-                function _queryorcomp {
-                    # Boolean or appends a second query     
-                    compadd -R _chomp -X %B'The metadata attributes, below, alternate Boolian AND and OR  %b' \
-                   -Q -P \|\|\  -p kMDItem -S \
-                   " == '*YourSearchStringGoesHere*'\"" $(/usr/bin/mdimport -A | awk '{print $1}' | \
-                   perl -p -e "s;('|kMDItem);;g"    )  
-                }   
-                
-                ########################################################################################
-                                                                            
- 
-    
-    ####################################################################################
-    ####################################################################################
-
-    
-    
-      case "$state" in
-      
-          (usethegui)
-              _message 'Using Pashua GUI menu: please select a completion category'
-              _mdfind_pashua
-              
-        ;;
-      
-          (mdsearchstring)
-                if [[ $words == *kMDItem* && $words != *gui* ]];then
-                    _message "Adding another searching criterion ..."
-                    _alternative _queryandcomp _queryorcomp
-                elif [[ $words == *kMDItem* ]];then
-                    _message "Adding another searching criterion ..."
-                    _message 'Using Pashua GUI menu: please select a completion category'
-                    _mdfind_pashua                
-                else
-                    _message "Enter any string either by itself or by replacing \"YourStringGoesHere\" in the metadata search template."
-                    _alternative  _stringquery  _querycomp 
-                fi      
-          ;;
-          
-          (mdsearchpath)
-                _directories  
-                _message 'possible search paths: prepend / for root-level directories'
-          ;;
-      
-      esac
-    
-    
-    
-}
-
-else
-
 #  New version of completion function for OS X 10.5 and above:
 
 _mdfind () { 
@@ -354,8 +208,6 @@
 
 }
 
-fi # Test OS X 10.5 or above
-
 _mdfind "$@" 
 
 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_open zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_open
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/_open	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/_open	2014-08-28 10:48:13.000000000 -0700
@@ -33,17 +33,10 @@
 
   case "$state" in
     open_mac_applications)
-      if [[ $(sw_vers -productVersion)  < 10.5 ]];then
-	      _init_open
-	      _alternative \
-	          "commands: :_mac_applications" \
-	          "files:: _open_absolute_application_path"
-      else
         _init_open_tiger
         _alternative \
             "commands: :_mac_applications" \
             "files:: _open_absolute_application_path"
-      fi
       ;;
     open_files)
       local app
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/bitrot zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/bitrot
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/bitrot	1969-12-31 16:00:00.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/bitrot	2014-08-28 10:48:13.000000000 -0700
@@ -0,0 +1,241 @@
+#!/bin/zsh -f
+
+#  bitrot  
+
+   version="0.1.5"
+   # Revision history:
+
+   #  0.1.5         Provide example launchd plist file in comments section.
+   #                If a discrepency is logged, have Console.app open it.
+   #  0.1.4         add logging option
+   #  0.1.3         add options to list and delete checksums for sanity checks
+   #  0.1.2         add check so we don't waste time on non-alac files.
+   #	            Fixed false negative bug due to lack of realtime feedback
+   #  0.1.1         add ability to recursively transverse directories
+   #  0.1.0         proof of concept
+                            
+   
+
+	#################################################################################################
+	#  bitrot is a zsh shell script/function that uses OS X built-in utilities to associate a       #
+	#  SHA-1 checksum (or hash) of the audio data in an m4a file and writes the hash code into      #
+	#  the resource fork associated with that file, using afhash and xattr. This has the            #
+	#  advantage of not altering the audio file itself. This assumes you have stored your           #
+	#  music on an HFS+ formatted (default OS X) hard drive, or some other resource-fork            #
+	#  friendly filesystem (like zfs). To preserve resource forks, you need to use OS X copy        #
+	#  utilities that are resource-fork aware.  Please note that checksum will only be              #
+	#  computed for integer linear PCM or losslessly encoded data whose sample frequency is         #
+	#  greater than or equal to 44100 Hz and bit depth is greater than or equal to 16, which        #
+	#  are limitations imposed by the afhash utility in OS X.  man afhash for more info.            #
+	#                                                                                               #
+	#                                                                                               #
+	#     How to use it:                                                                            #
+	#                                                                                               #
+	#  (a) To generate the checksums:     bitrot -w                                                 #
+	#                                                                                               #
+	#  Run bitrot from the top-level directory containing all your m4a music files. If you          #
+	#  allow iTunes to organize your music, this will most likely be the directory                  #
+	#   ~/Music/iTunes/iTunes\ Media/Music                                                          #
+	#  Invoke bitrot with the -w flag to generate the checksums for each of the                     #
+	#  audio files and to write these values into the associated resource fork.                     #
+	#                                                                                               #
+	#                                                                                               #
+	#  (b) To check the integrity of files at a later time:     bitrot -c                           #
+	#                                                                                               #
+	#  Run bitrot from the top-level directory or the directory containing the music files          #
+	#  in question. Invoke bitrot with the -c flag to compare the current checksum with             #
+	#  what is stored in the resource fork.  If they don't match, this indicates the audio          #
+	#  portion of the file has somehow changed.  The checksum should not change if you have         #
+	#  only manipulated the tags or so-called metadata in iTunes or other tag-editing software.     #
+	#  Mismatches are logged to dated logfiles in $bitrotlog                                        #
+	#                                                                                               #
+	#                                                                                               #
+	#  (c) To view checksums added to the resource forks:     bitrot -l                             #
+	#                                                                                               #
+	#  Run bitrot from the top-level directory or the directory containing the music files          #
+	#  in question using the -l flag to view checksums added to the resource forks.                 #
+	#                                                                                               #
+	#                                                                                               #
+	#  (d) To delete the checksums from resource forks:     bitrot -d                               #
+	#                                                                                               #
+	#  Run bitrot from the top-level directory or the directory containing the music files          #
+	#  in question. Invoke bitrot with the -d flag to remove the current checksum. Plese            #
+	#  note that you never should have to do this. Re-running bitrot with -w will update the        #
+	#  checksums.                                                                                   #
+	#                                                                                               #
+	#  An example launchd plist file is given below. You need to copy it and remove the # comments  #
+	#  in the left margin. You can name this local.bitrot.checker.plist and put it into             #
+	#  your user's ~/Library/LaunchAgents directory. Make sure you edit the WorkingDirectory        #
+	#  string entry first, providing your own username, and the actual path to where your music     #
+	#  files reside. This will check your files every sunday at 1 am. You may wish to adjust        #
+	#  this according to your listening habits and degree of paranoia.                              #
+	#                                                                                               #
+	#################################################################################################
+	
+	
+#  <?xml version="1.0" encoding="UTF-8"?>
+#  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+#  <plist version="1.0">
+#  <dict>
+#  	<key>Label</key>
+#  	<string>local.bitrot.checker</string>
+#  	<key>WorkingDirectory</key>
+#  	    <string>/Users/yourusername/Music/iTunes/iTunes Media/Music</string>
+#  	<key>ProgramArguments</key>
+#  	<array>
+#  		<string>/usr/local/bin/bitrot</string>
+#  		<string>-c</string>
+#  	</array>
+#  	<key>StartCalendarInterval</key>
+#  	<dict>
+#  		<key>Hour</key>
+#  		<integer>1</integer>
+#  		<key>Minute</key>
+#  		<integer>3</integer>
+#  		<key>Weekday</key>
+#  		<integer>0</integer>
+#  	</dict>
+#  </dict>
+#  </plist>
+
+  
+
+ 
+		##################################################################################
+		#                                                                                #
+		#  Created by William G. Scott on January 21st, 2014                             #
+		#  Copyright (c) . All rights reserved.                                          #
+		#                                                                                #
+		#                                                                                #
+		#    This program is free software; you can redistribute it and/or modify        #
+		#    it under the terms of the GNU General Public License as published by        #
+		#    the Free Software Foundation; either version 2 of the License, or           #
+		#    (at your option) any later version.                                         #
+		#                                                                                #
+		#    This program is distributed in the hope that it will be useful,             #
+		#    but WITHOUT ANY WARRANTY; without even the implied warranty of              #
+		#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
+		#    GNU General Public License for more details.                                #
+		#                                                                                #
+		#    You should have received a copy of the GNU General Public License           #
+		#    along with this program; if not, write to the Free Software                 #
+		#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301   #
+		#    USA                                                                         #
+		#                                                                                #
+		#    cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                   #
+		#                                                                                #
+		##################################################################################
+
+
+
+flag="$@"
+
+
+# Edit this for where you want the bitrot log file to appear
+bitrotlog=~/Library/Logs/bitrot
+
+
+
+function GetHashAttr {
+    foreach m4afile in **/*.m4a 
+	  isALAC=($(afinfo -i "$m4afile" | grep format | grep alac))
+	  if [[ -n "$isALAC" ]]; then
+		 mdls -name kMDItemFSName -name kMDItemHash "$m4afile" | cut -d \= -f 2 | perl -p -e 's|"||g'
+	  fi
+    end
+}
+
+function AddHashAttr {
+  foreach m4afile in **/*.m4a 
+    isALAC=($(afinfo -i "$m4afile" | grep format | grep alac))
+    if [[ -n "$isALAC" ]]; then
+       xattr -w com.apple.metadata:kMDItemHash $( afhash "$m4afile" | grep "Hash of audio data" | awk '{print $NF}') "$m4afile"
+	   # GetHashAttr  # doesn't update in realtime.
+	fi
+  end
+}
+
+
+
+function CheckHash {
+  mkdir -p $bitrotlog
+  function datestamp { date +%b_%d_%Y }
+  foreach m4afile in **/*.m4a
+	 isALAC=($(afinfo -i "$m4afile" | grep format | grep alac))
+	 if [[ -n "$isALAC" ]]; then
+	    mdlsHash=($(mdls -name kMDItemHash "$m4afile" | cut -d \= -f 2 | perl -p -e 's|"||g'))
+	    afhashHash=($(afhash "$m4afile" | grep "Hash of audio data" | awk '{print $NF}' | perl -p -e 's|"||g'))
+		if [[ "$mdlsHash" != "$afhashHash"  ]]; then
+		    print "\e[1m Warning\:\e[0m" \\\n "$m4afile"  has an checksum of "\e[1m $afhashHash \e[0m" but should have a checksum of "\e[1m $mdlsHash \e[0m"
+			print ""
+			print "$m4afile"  has an checksum of $afhashHash but should have a checksum of $mdlsHash >>|  $bitrotlog/$(datestamp).log
+		else
+		    print "\e[1m Looks OK\:\e[0m"  \\\n "$m4afile" has an checksum of "\e[1m $afhashHash \e[0m" which agrees with a checksum of "\e[1m $mdlsHash \e[0m"
+			print ""
+		fi
+	fi
+  end
+  if [[ -f "$bitrotlog/$(datestamp).log" ]]; then
+  	        open -a Console "$bitrotlog/$(datestamp).log"
+  fi
+}
+
+
+
+
+function DeleteHashAttr {
+    foreach m4afile in **/*.m4a 
+	  isALAC=($(afinfo -i "$m4afile" | grep format | grep alac))
+	  if [[ -n "$isALAC" ]]; then
+		 xattr -d com.apple.metadata:kMDItemHash "$m4afile"  
+		 #GetHashAttr
+	  fi
+    end
+}
+
+
+if [[ "$flag" == "--check"  || "$flag" == "-c"  ]]; then
+	CheckHash
+elif [[ "$flag" == "--write"  || "$flag" == "-w"  ]]; then
+    AddHashAttr
+elif [[ "$flag" == "--list"  || "$flag" == "-l"   ]];then
+    GetHashAttr
+elif [[ "$flag" == "--delete"  || "$flag" == "-d"   ]];then
+    DeleteHashAttr
+else
+	print "\e[1m Usage\:\e[0m  bitrot [ -w | --write | -c | --check | -l | --list | -d | --delete | -h | --help ]	"
+	print ""
+	print ""
+	print "\e[1m  (a) To generate the checksums:     bitrot -w         \e[0m                           "
+	print "                                                                                            "
+	print "  Run bitrot from the top-level directory containing all your m4a music files. If you       "
+	print "  allow iTunes to organize your music, this will most likely be the directory               "
+	print "   ~/Music/iTunes/iTunes\ Media/Music                                                       "
+	print "  Invoke bitrot with the -w flag to generate the checksums for each of the                  "
+	print "  audio files and to write these values into the associated resource fork.                  "
+	print "                                                                                            "
+	print "                                                                                            "
+	print "\e[1m  (b) To view checksums added to the resource forks:     bitrot -l        \e[0m        "
+	print "                                                                                            "
+	print "  Run bitrot from the top-level directory or the directory containing the music files       "
+	print "  in question using the -l flag to view checksums added to the resource forks.              "
+	print "                                                                                            "
+	print "                                                                                            "
+	print "\e[1m  (c) To check the integrity of files at a later time:     bitrot -c        \e[0m      "
+	print "                                                                                            "
+	print "  Run bitrot from the top-level directory or the directory containing the music files       "
+	print "  in question. Invoke bitrot with the -c flag to compare the current checksum with          "
+	print "  what is stored in the resource fork.  If they don't match, this indicates the audio       "
+	print "  portion of the file has somehow changed.  The checksum should not change if you have      "
+	print "  only manipulated the tags or so-called metadata in iTunes or other tag-editing software.  "
+	print "  Mismatches are logged to dated logfiles in $bitrotlog                                     "
+	print "                                                                                            "
+	print "                                                                                            "
+	print "\e[1m  (d) To delete the checksums from resource forks:     bitrot -d        \e[0m          "
+	print "                                                                                            "
+	print "  Run bitrot from the top-level directory or the directory containing the music files       "
+	print "  in question. Invoke bitrot with the -d flag to remove the current checksum. Plese         "
+	print "  note that you never should have to do this. Re-running bitrot with -w will update the     "
+	print "  checksums."
+fi
+
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/cpath zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/cpath
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/cpath	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/cpath	2014-08-28 19:47:26.000000000 -0700
@@ -1,3 +1,3 @@
 #!/bin/zsh -f
-echo -n "$PWD" |perl -pi -e 's; ;\\\ ;g'  | pbcopy
+echo -n "$PWD" |perl -p -e 's; ;\\\ ;g'  | pbcopy
 print "\e[7m$PWD\e[0m copied to clipboard"
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/cpos zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/cpos
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/cpos	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/cpos	2014-08-28 19:47:38.000000000 -0700
@@ -1,3 +1,3 @@
 #!/bin/zsh -f
 
-echo -n "$(posd)" |perl -pi -e 's; ;\\\ ;g' | pbcopy
+echo -n "$(posd)" |perl -p -e 's; ;\\\ ;g' | pbcopy
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11 zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-#!/bin/zsh -f
-
-# Apple's X11 underwent a major change between OS X v. 10.4 and v. 10.5
-# This is a wrapper script that will attempt to call the correct version of the customization function
-
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	autoload -U customize_x11_10.4
-	customize_x11_10.4
-else
-	autoload customize_x11_10.5
-	customize_x11_10.5
-fi
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.4 zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.4
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.4	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.4	1969-12-31 16:00:00.000000000 -0800
@@ -1,559 +0,0 @@
-#!/bin/zsh -f
-
-# customize_x11_10.4
-
-#  Created by  on Dec 30 2007
-#  (Originally this was the customize_x11 function)
-#  Copyright (c) . All rights reserved.
-
-#    This program is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    This program is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with this program; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
-#    http://www.fsf.org/licensing/licenses/gpl.txt
-
-version="0.2.0"
-
-# Function to customize the behavior of Apple's X11
-
-
-#  Check to see if we are running 10.5
-
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	:
-	# Good to go
-else
-	print "\e[1m $0 is incompatable with the X11 on >10.5"
-	print " Try invoking \"customize_x11_10.5\" \e[0m "
-	return 420
-fi
-
-
-########################################################
-#########     Check for Apple's X11.app      ###########
-########################################################
-
-# Make sure we are not running 10.5 or greater
-
-# Find out if we have Apple's X11.  If we don't, quit now.
-
-if [[ -d /Applications/Utilities/X11.app ]];then
-    PATH_TO_X11='/Applications/Utilities/X11.app'
-elif [[ -d /Applications/X11.app ]];then
-    PATH_TO_X11='/Applications/X11.app'
-elif [[ -x /usr/bin/mdfind && -d $(mdfind X11  | grep X11.app | head -n 1) ]];then
-    PATH_TO_X11=$(mdfind X11  | grep X11.app | head -n 1)
-elif [[ -d $(locate X11.app | head -n 1) ]];then
-    PATH_TO_X11=$(locate X11.app | head -n 1)
-else
-    print "Can't locate Apple's X11.app"
-    print "If you have it, put it in /Applications/Utilities or in"
-    print "/Applications, or else run /usr/libexec/locate.updatedb "
-    return 1
-fi
-
-# Check to see if X11 is intact.
-
-if [[ ( ! -d /usr/X11R6/bin || ! -d /etc/X11 ) && ( ! -d /usr/X11/bin ) ]]; then
-    print "It appears X11.app is not properly installed."
-    print "You can download it by issuing the following command:"
-    print "open http://www.apple.com/macosx/features/x11/download/ "
-    return 2
-fi
-
-if [[ ! -d /usr/X11R6/include/X11  || ! -d /usr/X11R6/include/DPS  || ! -d /usr/X11R6/include/GL ]];then
-    print "It appears X11.SDK is not properly installed."
-    print "You can download it by issuing the following command:"
-    print "cd ~/Desktop; curl -O http://www.chemistry.ucsc.edu/%7Ewgscott/temp/x11sdk_10.3.dmg.gz "
-    return 3
-fi 
-
-########################################################
-### Define a querry function for general use ###########
-########################################################
-
-function querry_user {
-        answer=""
-        read -t 30 -A answer
-
-        if [[ $answer[1] == (y|Y) ]]; then
-            $user_task_yes
-            answer=""
-        else
-            $user_task_no
-            answer=""
-        fi
- }    
- 
- 
-
-
-########################################################
-#######  Is X11.app in Login Startup Items?   ##########
-########################################################
-
-# Check to see if X11.app is among the User's login items.  If not, ask if it should be
-# added.
-
-AlreadyThere=$(command grep X11 ~/Library/Preferences/loginwindow.plist | command awk '{print $1}')
-
-if [[ -z $AlreadyThere ]]; then
-    
-    # Ask user if Apple X11 should be added to the startup items in the 
-    # Accounts preference pane so that it will be started upon login.
-    
-    print "##########################################################################"
-    print "Do you want to add Apple's X11.app to the collection of Applications"
-    print "that get started automatically upon login?  Only issue yes (y) if you"
-    print -n "have not already done this. [y/N]: "
-    
-    function AddX11StartupItems {
-        defaults write loginwindow AutoLaunchedApplicationDictionary -array-add "<dict><key>Path</key><string>$PATH_TO_X11</string></dict>"
-        print "X11.app has been added to the startup list."
-    }
-    
-    function NoThanks { print "This will not be added to the startup items list." }
-    
-    
-    user_task_yes='AddX11StartupItems'
-    user_task_no='NoThanks'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-    sleep 2
-    print ""
-
-fi  # [[ -z $AlreadyThere ]]
-
-########################################################
-#######  Is X11.app NOW in Login Startup Items?      ###
-#######  If not, start it upon shell initialization? ###
-########################################################
-
-AlreadyThere=$(command grep X11 ~/Library/Preferences/loginwindow.plist | command awk '{print $1}')
-
-if [[ -z $AlreadyThere ]]; then
-    
-    # Ask user if the shell initialization scripts should start Apple X11
-    # if it has not already been started.
-    
-    print "##########################################################################"
-    print "The shell initialization scripts associated with this function will check "
-    print "to see if Apple's X11.app is already running, and if it is not, will start "
-    print "it for you.  If you do not want that to happen automatically, you can change"
-    print "that preference here." 
-    print " "
-    
-    print "Shall I prevent X11.app from opening automatically (if not already started) "
-    print -n "when a new shell is initialized? [y/N]: "
-    
-    user_task_yes=''  user_task_no=''
-    function skip_openx { echo "export open_apple_x11='skip' " >| ~/.zsh/skipxrc }
-    function noskip { print ""; print "Leaving default behavior intact."  }
-    
-    user_task_yes='skip_openx'
-    user_task_no='noskip'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-    sleep 2
-
-fi  # [[ -z $AlreadyThere ]]
-
-
-########################################################
-### Nix the start up of an xterm on login?   ###########
-########################################################
- 
-# Get rid of the command that opens xterm upon login?
-
-if [[ -d ~/.xinitrc ]];then
-print "##########################################################################"
-    print "You have a DIRECTORY called ~/.xinitrc.  This will prevent"
-    print "Apple's X11.app from working. " 
-    print " "
-    
-    print -n "Shall I move it to ~/.xinitrc_dir ?"
-
-    function movexinitdir { command mv ~/.xinitrc  ~/.xinitrc_dir }
-    function nope1 { print ""; print "Leaving directory ~/.xinitrc alone."  }
-    
-    user_task_yes='movexinitdir'
-    user_task_no='nope1'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-    sleep 2
-fi
-
-
-print ""
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app starts an xterm every time X11.app starts up."
-print "If you find this behavior annoying, just copy the file "
-print "/etc/X11/xinit/xinitrc to ~/.xinitrc and comment out the call to xterm."
-print "If you already have ~/.xinitrc, just comment out the call to xterm."
-print " "
-
-print -n "Shall I do this for you now? [y/N]: "
-
-function Change_xinitrc {
-if [[ ! -f ~/.xinitrc ]];then
-    sed -e 's/xterm/# xterm/g' /etc/X11/xinit/xinitrc >| ~/.xinitrc
-else
-    print " "
-    print " "
-    print "You already have a ~/.xinitrc file in your home directory, so I will"
-    print "just comment out the call to xterm without clobbering this file."
-    perl -pi -e 's/xterm/# xterm/g' ~/.xinitrc
-fi
-}
-
-function nope2 { print ""; print "Leaving file xinitrc alone."  }
-
-    user_task_yes='Change_xinitrc'
-    user_task_no='nope2'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-# Change some annoying behaviors
-
-########################################################
-###  Nix the Quit Alert warning on logout?   ###########
-########################################################
-
-sleep 2
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app has a 'quit alert' warning that pops up, preventing"
-print "a clean logout.  This can be turned off by issuing the command"
-print "\t defaults write com.apple.x11 no_quit_alert true"
-print " "
-
-print -n "Shall I do this for you now? [y/N]: "
-
-function changequitalert { defaults write com.apple.x11 no_quit_alert true }
-function nope2 { print ""; print "Leaving file com.apple.x11 alone."  }
-
-    user_task_yes='changequitalert'
-    user_task_no='nope2'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-sleep 2
-
-
-########################################################
-###  Restore canonical window focus behavior?   ########
-########################################################
-
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app can be set to focus-follows-mouse and click-through"
-print "behavior that is typical of standard X11 behavior.  This can be obtained"
-print "by issuing the following commands" 
-print "\t defaults write com.apple.x11 wm_ffm true "
-print "\t defaults write com.apple.x11 wm_click_through -bool true "
-print " "
-
-print -n "Shall I do this for you now? [y/N]: "
-
-function change_ffm {
-    defaults write com.apple.x11 wm_ffm true 
-    defaults write com.apple.x11 wm_click_through -bool true
-}
-
-function nope2 { print ""; print "Leaving file com.apple.x11 alone."  }
-
-    user_task_yes='change_ffm'
-    user_task_no='nope2'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-    
-
-print " "
-print " "
-print "Issue 'man Xquartz' and 'man quartz-wm' for more information."
-
-print "##########################################################################"
-print " "
- 
-########################################################
-###  Get rix of X11.app's Dock Icon and menu bar?  #####
-########################################################
-
-sleep 2
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app can be launched silently and without any trace in"
-print "the dock or menu bar.  If you do this you will lose the ability to use"
-print "the X11 menu and will have to launch X11 apps from the command line only."
-print " "
-print "Please save any work in running X11 applications prior to answering yes, as"
-print "we need to kill the X-server before starting. No need to do this if you anser No."
-print ""
-print -n "Shall I get rid of the X11 dock icon? [y/N]: "
-
-function RemoveDockIcon { 
-    
-    killall X11
-    # Find the lenght of the file Info.plist
-    lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-    # Subtract two from this result
-    twofewerlines=$((lines - 2))
-    # Get all but the last two lines of the file
-    command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-    # Back up the original file
-    command gzip -f $PATH_TO_X11/Contents/Info.plist
-    # Append new lines to the end of the trunctated file
-    command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-    command echo "        <string>1</string>  "  >> /tmp/X11_Info.plist
-    command echo "</dict>  "  >> /tmp/X11_Info.plist
-    command echo "</plist>  "  >> /tmp/X11_Info.plist
-    # copy it back
-    command cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-    #
-    # Now issue the following command so that the change is made to take effect:
-    
-    /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -f $PATH_TO_X11
-    
-    open -a X11
-}
-
-function nope3 { print ""; print "Leaving X11 alone."  }
-
-    user_task_yes='RemoveDockIcon'
-    user_task_no='nope3'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-sleep 2
-
-
-########################################################
-###  Restore X11.app's Dock Icon and menu bar?  #####
-########################################################
-
-sleep 2
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "If you removed the X11 dock icon, you can restore it now or by running"
-print "this function again in the future.  This will restore the X11 application"
-print "to the Dock, i.e., the original state."
-print " "
-print "Please save any work in running X11 applications prior to answering yes, as"
-print "we need to kill the X-server before starting. No need to do this if you anser No."
-print ""
-print -n "Shall I restore the X11 dock icon? [y/N]: "
-
-function RestoreDockIcon { 
-    
-    killall X11
-    # Find the lenght of the file Info.plist
-    lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-    # Subtract two from this result
-    twofewerlines=$((lines - 2))
-    # Get all but the last two lines of the file
-    command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-    # Back up the original file
-    command gzip -f $PATH_TO_X11/Contents/Info.plist
-    # Append new lines to the end of the trunctated file
-    command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-    command echo "        <string>0</string>  "  >> /tmp/X11_Info.plist
-    command echo "</dict>  "  >> /tmp/X11_Info.plist
-    command echo "</plist>  "  >> /tmp/X11_Info.plist
-    # copy it back
-    command cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-    #
-    # Now issue the following command so that the change is made to take effect:
-    
-    /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -f $PATH_TO_X11
-    
-    open -a X11
-}
-
-function nope4 { print ""; print "Leaving X11 alone."  }
-
-    user_task_yes='RestoreDockIcon'
-    user_task_no='nope4'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-sleep 2
-
-
-
-
-
-###############################################################################
-#
-#    DISPLAY variable in startup scripts for bash, zsh and tcsh
-#
-###############################################################################
-
-
-
-
-
- 
-
-
-
-# Ask user if startup scripts should be configured to set DISPLAY
-
-	print ""
-	print "##########################################################################"
-	print ""
-	print "Do you want to check and set DISPLAY from your shell startup scripts"
-	print "that get run automatically upon shell login?  Answering yes will put"
-	print "entries into the bottoms of the following files: ~/.cshrc ~/.zshrc ~/.bashrc"
-	print "~/.bash_profile, and also ~/.tshrc but only if it already exists."
-	print "You don't need to do this if you are using my set of ZSH template files and"
-	print "only plan to use zsh.  To undo this, you must manually edit each of the above-"
-	print "listed files. Therefore, you should only issue yes (y) if you have read and"
-	print "understand the above."
-	print ""
-	print -n "Shall I make these modifications? [y/N]: "
-
-	function AddX11shrc {
-			print ""
-			print "Appending commands to ~/.cshrc ~/.zshrc ~/.bashrc ~/.bash_profile, and also ~/.tshrc if it already exists."
-			print "To undo this operation, you must edit each of these files manually."
-			print "Hit control-C within the next 10 seconds to prevent this modification."
-			print ""
-			sleep 12
-			# bash:
-			touch ~/.bashrc
-			cat >>| ~/.bashrc   << eof-1
-
-			if [[ -z \$DISPLAY && -z \$SSH_CONNECTION ]]; then
-				disp_no=(\$( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-			    if [[ -n \$disp_no ]];then
-			        export DISPLAY=\${disp_no}.0
-			    else
-			        export DISPLAY=:0.0
-			    fi
-			    echo "DISPLAY has been set to \$DISPLAY"
-			fi
-eof-1
-
-			touch ~/.bash_profile
-			cat >>| ~/.bash_profile   << eof-11
-
-			if [[ -z \$DISPLAY && -z \$SSH_CONNECTION ]]; then
-				disp_no=(\$( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-			    if [[ -n \$disp_no ]];then
-			        export DISPLAY=\${disp_no}.0
-			    else
-			        export DISPLAY=:0.0
-			    fi
-			    echo "DISPLAY has been set to \$DISPLAY"
-			fi
-eof-11
-
-
-			# zsh:
-			touch ~/.zshrc
-			cat >>| ~/.zshrc   << eof-2
-
-			if [[ -z \$DISPLAY && -z \$SSH_CONNECTION ]]; then
-				disp_no=(\$( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-			    if [[ -n \$disp_no ]];then
-			        export DISPLAY=\${disp_no}.0
-			    else
-			        export DISPLAY=:0.0
-			    fi
-			    echo "DISPLAY has been set to \$DISPLAY"
-			fi
-eof-2
-
-			# Do this only if the .tcshrc file already exists, or else it will mess people up
-			   if [[ -f ~/.tcshrc ]];then
-
-			touch  ~/.tcshrc
-			cat >>| ~/.tcshrc   << eof-3
-			if (! \$?DISPLAY && ! \$?SSH_CONNECTION ) then
-			  setenv DISPLAY \`ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  \`.0 
-			    if ( \$DISPLAY == '.0' )then
-			       setenv DISPLAY :0.0
-			    endif
-			  echo "DISPLAY has been set to \$DISPLAY"
-			endif   
-eof-3
-
-			   else
-
-			touch  ~/.cshrc
-			cat >>| ~/.cshrc   << eof-4
-			if (! \$?DISPLAY && ! \$?SSH_CONNECTION ) then
-			  setenv DISPLAY \`ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  \`.0 
-			    if ( \$DISPLAY == '.0' )then
-			       setenv DISPLAY :0.0
-			    endif
-			  echo "DISPLAY has been set to \$DISPLAY"
-			endif   
-eof-4
-
-
-			    fi
-}
-
-	function NoThanks2 { 
-	print ""
-	print "Leaving ~/.cshrc ~/.zshrc ~/.bashrc ~/.bash_profile, and ~/.tshrc alone."
-	print "Remember to set the DISPLAY environment variable if you have not already done so." 
-	}
-
-
-	user_task_yes='AddX11shrc'
-	user_task_no='NoThanks2'
-
-	querry_user
-
-	user_task_yes=''  user_task_no=''
-	sleep 2
-	print ""
-
-
-   
-############ END #############################
-
-
-
-
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.5 zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.5
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.5	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_10.5	1969-12-31 16:00:00.000000000 -0800
@@ -1,365 +0,0 @@
-#!/bin/zsh -f
-
-# customize_x11_10.5
-
-#  Created by  on Dec 30 2007
-#  (Originally this was the customize_x11 function)
-#  Copyright (c) . All rights reserved.
-
-#    This program is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    This program is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with this program; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
-#    http://www.fsf.org/licensing/licenses/gpl.txt
-
-version="0.2.0"
-
-# Function to customize the behavior of Apple's X11
-
-
-#  Check to see if we are running 10.5
-
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	print "\e[1m $0 is incompatable with the X11 on < 10.5"
-	print " Try invoking \"customize_x11_10.4\" \e[0m "
-	return 420
-else
-	:
-	# Good to go
-fi
-
-
-
-
-# Function to customize the behavior of Apple's X11
-
-
-########################################################
-#########     Check for Apple's X11.app      ###########
-########################################################
-
-# Find out if we have Apple's X11.  If we don't, quit now.
-
-if [[ -d /usr/X11/X11.app ]];then
-    PATH_TO_X11='/usr/X11/X11.app'
-elif [[ -d /usr/X11 && -d /Applications/Utilities/X11.app ]];then
-    PATH_TO_X11='/Applications/Utilities/X11.app'
-else
-    print "Can't locate Apple's X11.app"
-	print "This should be a default install on 10.5"
-    return 1
-fi
-
-# Check to see if X11 is intact.
-
-if [[ ( ! -d /usr/X11/bin ) ]]; then
-    print "It appears X11.app is not properly installed."
-    print "You can (re)install it from your OS X install disk"
-    return 2
-fi
-
-if [[ ! -d /usr/X11/include/X11  || ! -d /usr/X11/include/GL ]];then
-    print "It appears X11.SDK is not properly installed."
-    print "You can (re)install it with Xcode "
-    return 3
-fi 
-
-########################################################
-### Define a querry function for general use ###########
-########################################################
-
-function querry_user {
-        answer=""
-        read -t 30 -A answer
-
-        if [[ $answer[1] == (y|Y) ]]; then
-            $user_task_yes
-            answer=""
-        else
-            $user_task_no
-            answer=""
-        fi
- }    
- 
- 
-# X11.app should NOT be started automatically on login in 10.5+
-
-########################################################
-### Nix the start up of an xterm on login?   ###########
-########################################################
- 
-# Get rid of the command that opens xterm upon login?
-
-if [[ -d ~/.xinitrc ]];then
-    print "##########################################################################"
-    print "You have a DIRECTORY called ~/.xinitrc.  This will prevent"
-    print "Apple's X11.app from working. " 
-    print " "
-    
-    print -n "Shall I move it to ~/.xinitrc_dir ?"
-
-    function movexinitdir { command mv ~/.xinitrc  ~/.xinitrc_dir }
-    function nope1 { print ""; print "Leaving directory ~/.xinitrc alone."  }
-    
-    user_task_yes='movexinitdir'
-    user_task_no='nope1'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-    sleep 2
-fi
-
-
-print ""
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app starts an \e[1m xterm \e[0m every time X11.app starts up."
-print "If you find this behavior annoying, you can issue the command"
-print "\e[1m  defaults write org.x.X11_launcher app_to_run /usr/X11/bin/xlsclients \e[0m "
-print " or "
-print "\e[1m  defaults write org.x.X11  app_to_run /usr/X11/bin/xlsclients \e[0m "
-
-print -n "Shall I do this for you now? [y/N]: "
-
-function Change_xinitrc {
-	defaults write org.x.X11_launcher app_to_run /usr/X11/bin/xlsclients
-	defaults write org.x.X11          app_to_run /usr/X11/bin/xlsclients
-	print "To get the xterm back, issue"
-	print "\e[1m defaults write org.x.X11_launcher app_to_run /usr/X11/bin/xterm \e[0m "
-    print " or "
-	print "\e[1m defaults write org.x.X11  app_to_run /usr/X11/bin/xterm \e[0m "
-}
-
-function nope2 { print ""; print "Leaving the current behavior alone."  }
-
-    user_task_yes='Change_xinitrc'
-    user_task_no='nope2'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-# Change some annoying behaviors
-
-########################################################
-###  Nix the Quit Alert warning on logout?   ###########
-########################################################
-
-sleep 2
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app has a \e[1m quit alert \e[0m  warning that pops up, preventing"
-print "a clean logout.  This can be \e[1m turned off \e[0m by issuing the command"
-print "\t defaults write com.apple.x11 no_quit_alert true"
-print " "
-
-print -n "Shall I do this for you now? [y/N]: "
-
-function changequitalert { 
-             defaults write com.apple.x11 no_quit_alert true
-             defaults write org.x.X11 no_quit_alert true
-             defaults write org.x.X11_launcher no_quit_alert true
-         }
-function nope2 { print ""; print "Leaving file com.apple.x11 alone."  }
-
-    user_task_yes='changequitalert'
-    user_task_no='nope2'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-sleep 2
-
-
-########################################################
-###  Restore canonical window focus behavior?   ########
-########################################################
-
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app can be set to \e[1m focus-follows-mouse \e[0m  and click-through"
-print "behavior that is typical of standard X11 behavior.  This can be obtained"
-print "by issuing the following commands" 
-print "\t defaults write com.apple.x11 wm_ffm true "
-print "\t defaults write com.apple.x11 wm_click_through -bool true "
-print " "
-
-print -n "Shall I do this for you now? [y/N]: "
-
-function change_ffm {
-    defaults write com.apple.x11 wm_ffm true 
-    defaults write org.x.X11_launcher  wm_ffm true 
-    defaults write org.x.X11  wm_ffm true 
-
-    defaults write com.apple.x11 wm_click_through -bool true
-    defaults write org.x.X11_launcher  wm_click_through -bool true
-    defaults write org.x.X11  wm_click_through -bool true
-}
-
-function nope2 { print ""; print "Leaving file com.apple.x11 alone."  }
-
-    user_task_yes='change_ffm'
-    user_task_no='nope2'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-    
-
-print " "
-print " "
-print "Issue 'man Xquartz' and 'man quartz-wm' for more information."
-
-print "##########################################################################"
-print " "
- 
-########################################################
-###  Get rix of X11.app's Dock Icon and menu bar?  #####
-########################################################
-
-sleep 2
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "Apple's X11.app can be launched silently and without any trace in"
-print "the dock or menu bar.  If you do this you will lose the ability to use"
-print "the X11 menu and will have to launch X11 apps from the command line only."
-print " "
-print "Please save any work in running X11 applications prior to answering yes, as"
-print "we need to kill the X-server before starting. No need to do this if you anser No."
-print ""
-print -n "Shall I \e[1m get rid of the X11 dock icon \e[0m? [y/N]: "
-
-function RemoveDockIcon { 
-    
-    killall X11
-    # Find the lenght of the file Info.plist
-    lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-    # Subtract two from this result
-    twofewerlines=$((lines - 2))
-    # Get all but the last two lines of the file
-    command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-    # Back up the original file
-    sudo gzip -f $PATH_TO_X11/Contents/Info.plist
-    # Append new lines to the end of the trunctated file
-    command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-    command echo "        <string>1</string>  "  >> /tmp/X11_Info.plist
-    command echo "</dict>  "  >> /tmp/X11_Info.plist
-    command echo "</plist>  "  >> /tmp/X11_Info.plist
-    # copy it back
-    sudo cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-    #
-    # Now issue the following command so that the change is made to take effect:
-    
-    # /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -f $PATH_TO_X11
-    
-    # open -a X11
-}
-
-function nope3 { print ""; print "Leaving X11 alone."  }
-
-    user_task_yes='RemoveDockIcon'
-    user_task_no='nope3'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-sleep 2
-
-
-########################################################
-###  Restore X11.app's Dock Icon and menu bar?  #####
-########################################################
-
-sleep 2
-print " "
-print " "
-print "##########################################################################"
-print " "
-print "If you removed the X11 dock icon, you can restore it now or by running"
-print "this function again in the future.  This will restore the X11 application"
-print "to the Dock, i.e., the original state."
-print " "
-print "Please save any work in running X11 applications prior to answering yes, as"
-print "we need to kill the X-server before starting. No need to do this if you anser No."
-print ""
-print -n "Shall I \e[1m restore the X11 dock icon \e[0m? [y/N]: "
-
-function RestoreDockIcon { 
-    
-    killall X11
-    # Find the lenght of the file Info.plist
-    lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-    # Subtract two from this result
-    twofewerlines=$((lines - 2))
-    # Get all but the last two lines of the file
-    command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-    # Back up the original file
-    sudo gzip -f $PATH_TO_X11/Contents/Info.plist
-    # Append new lines to the end of the trunctated file
-    command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-    command echo "        <string>0</string>  "  >> /tmp/X11_Info.plist
-    command echo "</dict>  "  >> /tmp/X11_Info.plist
-    command echo "</plist>  "  >> /tmp/X11_Info.plist
-    # copy it back
-    sudo cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-    #
-    # Now issue the following command so that the change is made to take effect:
-    
-    # /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -f $PATH_TO_X11
-    
-    # open -a X11
-}
-
-function nope4 { print ""; print "Leaving X11 alone."  }
-
-    user_task_yes='RestoreDockIcon'
-    user_task_no='nope4'
-    
-    querry_user
-    
-    user_task_yes=''  user_task_no=''
-
-
-sleep 2
-
-
-
-
-
-###############################################################################
-#
-#    DO NOT set DISPLAY variable in startup scripts for bash, zsh and tcsh
-#
-###############################################################################
-
-
- 
-
-   
-############ END #############################
-
-
-
-
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui	1969-12-31 16:00:00.000000000 -0800
@@ -1,23 +0,0 @@
-#!/bin/zsh -f
-
-VERSION='0.3.0'
-
-# Created Feb 18 2005
-# Modified Dec 30 2007
-
-
-# Apple's X11 underwent a major change between OS X v. 10.4 and v. 10.5
-# This is a wrapper script that will attempt to call the correct version of the customization function
-
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	autoload -U customize_x11_gui_10.4
-	customize_x11_gui_10.4
-else
-	autoload customize_x11_gui_10.5
-	customize_x11_gui_10.5
- 
-fi
-
- 
-        
-############ END #############################
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.4 zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.4
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.4	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.4	1969-12-31 16:00:00.000000000 -0800
@@ -1,456 +0,0 @@
-#!/bin/zsh -f
-
-VERSION='0.2.1'
-
-# Feb 18 2005
-
-
-
-# Figure out where we are running this from:
-
-WeAreHere=$(dirname $0)
-
-# Define what the dialog should be like
-# Take a look at Pashua's Readme file for more info on the syntax
-
-#############################################################
-##########       Interface      #############################
-#############################################################
-
-# All of this gets put into a single variable called conf:
-conf="
-        # Set transparency: 0 is transparent, 1 is opaque
-        tx.transparency=0.95
-        
-        # Heavy metal overdose:
-        # appearance=metal
-        
-        # Set window title
-        tx.windowtitle = X11.app Customizations
-        
-        #img.type = image
-        #img.path = "$(dirname $WeAreHere)"/Resources/zsh_on_osx.png
-        #img.maxheight = 100
-        
-        ####################
-        # Introductory text:
-        ####################
-        tx.type=text
-        tx.width = 1050
-        tx.text = X11.app Customization Assistant.[return][return]This interface assists the  user  in changing settings that govern the behavior of X11.  The individual user can specify whether X11 should be added  to  the  user's startup  items, whether focus follows mouse behavior (emulating canonical X11 unix systems) should be set, whether the user should be  warned on  logout  if  X11 is running, whether X11 should be run as a dockless and menuless application in the background, as so forth.  An option to restore all default behaviors is included.[return]
-        
-        
-        ###############################################################
-        # Ask if X11.app should be included in the Login startup items:
-        ###############################################################
-        # Define radiobuttons
-        rb.type = popup
-        rb.width = 300
-        rb.label = Add X11.app to my Login startup items?
-        rb.option = Start X11 when I log in.
-        rb.option = Do not start X11 when I log in.
-        rb.option = Leave everything the way it is now.
-        rb.default = Leave everything the way it is now.
-        
-        ###############################################################
-        # Ask if xterm should be started automatically:
-        ###############################################################
-        tx2.type=text
-        tx2.width = 1050
-        tx2.text = X11.app starts an xterm every time X11.app starts up. If you find this behavior to be annoying, you can prevent xterm from starting automatically.
-        
-        # Define radiobuttons
-        rb2.type = popup
-        rb2.width = 300
-        rb2.label = Should xterm be started automatically?
-        rb2.option = Prevent xterm from starting automatically.
-        rb2.option = Restore xterm to starting automatically.
-        rb2.option = Leave everything the way it is now.
-        rb2.default = Leave everything the way it is now.
-           
-
-        ###############################################################
-        # Ask if Warning for Quitting X11.app should be turned off:
-        ###############################################################
-        tx3.type=text
-        tx3.width = 1050
-        tx3.text = X11.app has a 'quit alert' warning that pops up, preventing a clean logout.  This can be turned off.        
-        
-        
-        # Define radiobuttons
-        rb3.type = popup
-        rb3.width = 300
-        rb3.label = Get rid of the popup Quit Alert for X11?
-        rb3.option = Get rid of it.
-        rb3.option = Restore it.
-        rb3.option = Leave everything the way it is now.
-        rb3.default = Leave everything the way it is now.   
-        
-        
-        ###############################################################
-        # Ask if Focus Follows Mouse in X11.app should be turned on:
-        ###############################################################
-        tx4.type=text
-        tx4.width = 1050
-        tx4.text = X11.app can be set to focus-follows-mouse and click-through behavior that is typical of standard X11 behavior.  
-        
-        
-        # Define radiobuttons
-        rb4.type = popup
-        rb4.width = 300
-        rb4.label = Use Focus Follows Mouse in X11?
-        rb4.option = Turn on Focus Follows Mouse.
-        rb4.option = Turn off Focus Follows Mouse.
-        rb4.option = Leave everything the way it is now.
-        rb4.default = Leave everything the way it is now.   
-         
-        ###############################################################
-        # Ask if X11.app should go Dockless:
-        ###############################################################
-        tx5.type=text
-        tx5.width = 1050
-        tx5.text = X11.app can be launched silently and without any trace in the dock or menu bar. (If you do this you will lose the ability to use the X11 menu and will have to launch X11 apps from the command line only.) PLEASE SAVE any work in running X11 applications prior to answering yes, as we need to kill the X-server before starting. No need to do this if you anser Leave It Alone.  
- 
-        # Define radiobuttons
-        rb5.type = popup
-        rb5.width = 300
-        rb5.label = Shall we make X11 Dockless (and Menuless)?
-        rb5.option = Yes, make X11 Dockless.
-        rb5.option = No, restore X11 to the Dock.
-        rb5.option = Leave everything the way it is now.
-        rb5.default = Leave everything the way it is now.
-        
-
-        ###############################################################
-        # Ask if DISPLAY should be programmed to accommodate multiple
-        # simultaneous X11.app users:
-        ###############################################################
-        tx6.type=text
-        tx6.width = 1050
-        tx6.text = Set DISPLAY variable to allow X-windows programs to run from Terminal.app and iTerm.app. Fast User Switching creates the problem of multiple simultaneous instances of X11.app running and how to find the appropriate DISPLAY value to assign to each. Choosing "Yes" solves this problem. 
-
- 
-        # Define radiobuttons
-        rb6.type = popup
-        rb6.width = 300
-        rb6.label = Set up DISPLAY for single or multiple users of X11.app?
-        rb6.option = Yes, create the appropriate files.
-        rb6.option = No, leave everything the way it is now.
-        rb6.default = No, leave everything the way it is now.
-        
-    cn.type=cancelbutton
-    cn.label=Cancel
-
-               
-"; # end of conf
-
-pashua_run "$conf"        
-        
-
-#############################################################
-##########   Begin Actual Program ###########################
-#############################################################
-
-    
-    
-    ########################################################
-    #########     Check for Apple's X11.app      ###########
-    ########################################################
-    
-    # Find out if we have Apple's X11.  If we don't, quit now.
-    
-    if [[ -d /Applications/Utilities/X11.app ]];then
-        PATH_TO_X11='/Applications/Utilities/X11.app'
-    elif [[ -d /Applications/X11.app ]];then
-        PATH_TO_X11='/Applications/X11.app'
-    elif [[ -x /usr/bin/mdfind && -d $(mdfind X11  | grep X11.app | head -n 1) ]];then
-        PATH_TO_X11=$(mdfind X11  | grep X11.app | head -n 1)
-    elif [[ -d $(locate X11.app | head -n 1) ]];then
-        PATH_TO_X11=$(locate X11.app | head -n 1)
-    else
-        print "Can't locate Apple's X11.app"
-        print "If you have it, put it in /Applications/Utilities or in"
-        print "/Applications, or else run /usr/libexec/locate.updatedb "
-        return 100
-    fi
-
-
-
-    ########################################################
-    #######  Is X11.app in Login Startup Items?   ##########
-    ########################################################
-
-    
-    # Check to see if X11.app is already among the Userlogin items.  If not, add it if the user
-    # requested it.  (The check avoids having it in there twice.)
-
-        
-    
-    AlreadyThere=$(command grep X11 ~/Library/Preferences/loginwindow.plist | command awk '{print $1}')
-    
-    if [[  -z $AlreadyThere ]]; then
-        if [[ $rb == 'Start X11 when I log in.' ]];then
-            cp /Users/$USER/Library/Preferences/loginwindow.plist \
-                /Users/$USER/Library/Preferences/loginwindow.plist.backup
-            defaults write loginwindow AutoLaunchedApplicationDictionary \
-                  -array-add "<dict><key>Path</key><string>$PATH_TO_X11</string></dict>"
-            print ""
-            print "X11.app has now been added to the Users Accounts Login startup items."
-            print ""
-        elif [[ $rb == 'Do not start X11 when I log in.' ]];then
-            open /System/Library/PreferencePanes/Accounts.prefPane
-            # Maybe this can be gui scripted someday.
-            print ""
-            print "The user must manually remove X11.app from the Accounts preference pane."
-            print ""            
-        else  
-            print ""
-            print "Nothing has been added to the Users Accounts Login startup items."
-            print ""            
-        fi
-    else
-            print ""
-            print "The X11.app has previously been added to the Users Accounts Login startup items."
-            print "" 
-    fi
-
-    
-    ########################################################
-    ### Nix the start up of an xterm on login?   ###########
-    ########################################################
-     
-    if [[ $rb2 == 'Prevent xterm from starting automatically.' ]];then
-
-        if [[ ! -f ~/.xinitrc ]];then
-            sed -e 's/xterm/# xterm/g' /etc/X11/xinit/xinitrc >| ~/.xinitrc
-        else
-            print " "
-            print " "
-            print "You already have a ~/.xinitrc file in your home directory, so I will"
-            print "just comment out the call to xterm without clobbering this file."
-            cp ~/.xinitrc ~/.xinitrc-backup
-            chmod u+w ~/.xinitrc
-            perl -pi -e 's/xterm/# xterm/g' ~/.xinitrc
-        fi
-     
-    elif [[ $rb2 == 'Restore xterm to starting automatically.' ]];then
-    
-        if [[ ! -f ~/.xinitrc ]];then
-            cp /etc/X11/xinit/xinitrc ~/.xinitrc
-            chmod u+w ~/.xinitrc
-            perl -pi -e 's/# xterm/ xterm/g' ~/.xinitrc
-            perl -pi -e 's/#  xterm/ xterm/g' ~/.xinitrc
-        else
-            print " "
-            print " "
-            print "You already have a ~/.xinitrc file in your home directory, so I will"
-            print "just add the call to xterm without clobbering this file."
-            chmod u+w ~/.xinitrc
-            cp ~/.xinitrc ~/.xinitrc-backup
-            perl -pi -e 's/# xterm/ xterm/g' ~/.xinitrc
-            perl -pi -e 's/#  xterm/ xterm/g' ~/.xinitrc
-        fi
-    
-    else
-        print "I will not create nor alter ~/.xinitrc" 
-    fi
-
-
-    ########################################################
-    ###  Nix the Quit Alert warning on logout?   ###########
-    ########################################################
-     
-        
-    if [[ $rb3 == 'Get rid of it.' ]];then
-        defaults write com.apple.x11 no_quit_alert true  
-        print ""; print "writing 'no_quit_alert true' to com.apple.x11.plist"   
-    elif [[ $rb3 == 'Restore it.' ]];then 
-        defaults write com.apple.x11 no_quit_alert false  
-        print ""; print "writing 'no_quit_alert false' to com.apple.x11.plist"   
-    else
-        print ""; print "leaving com.apple.x11.plist alone"
-    fi
-
-
-    ########################################################
-    ###  Restore canonical window focus behavior?   ########
-    ########################################################
-  
-    function change_ffm {
-        defaults write com.apple.x11 wm_ffm $BOOL 
-        defaults write com.apple.x11 wm_click_through -bool $BOOL 
-        }
-        
-    if [[ $rb4 == 'Turn on Focus Follows Mouse.' ]];then
-        BOOL='true'
-        change_ffm
-        BOOL=''
-    
-    elif [[ $rb4 == 'Turn off Focus Follows Mouse.' ]];then
-        BOOL='false'
-        change_ffm         
-        BOOL=''   
-    else
-        BOOL=''
-        print ""; print "leaving com.apple.x11.plist alone" 
-    fi
-    
- 
-    
-            
-    ########################################################
-    ###  Get rix of X11.app's Dock Icon and menu bar?  #####
-    ########################################################       
-         
-    function RemoveDockIcon { 
-        
-        killall X11
-        # Find the lenght of the file Info.plist
-        lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-        # Subtract two from this result
-        twofewerlines=$((lines - 2))
-        # Get all but the last two lines of the file
-        command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-        # Back up the original file
-        command gzip -f $PATH_TO_X11/Contents/Info.plist
-        # Append new lines to the end of the trunctated file
-        command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-        command echo "        <string>1</string>  "  >> /tmp/X11_Info.plist
-        command echo "</dict>  "  >> /tmp/X11_Info.plist
-        command echo "</plist>  "  >> /tmp/X11_Info.plist
-        # copy it back
-        command cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-        #
-        # Now issue the following command so that the change is made to take effect:
-        
-        /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -f $PATH_TO_X11
-        
-        open -a X11
-    }
-    
-    
-    function RestoreDockIcon { 
-        
-        killall X11
-        # Find the lenght of the file Info.plist
-        lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-        # Subtract two from this result
-        twofewerlines=$((lines - 4))
-        # Get all but the last two lines of the file
-        command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-        # Back up the original file
-        command gzip -f $PATH_TO_X11/Contents/Info.plist
-        # Append new lines to the end of the trunctated file
-        command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-        command echo "        <string>0</string>  "  >> /tmp/X11_Info.plist
-        command echo "</dict>  "  >> /tmp/X11_Info.plist
-        command echo "</plist>  "  >> /tmp/X11_Info.plist
-        # copy it back
-        command cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-        #
-        # Now issue the following command so that the change is made to take effect:
-        
-        /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -f $PATH_TO_X11
-        
-        open -a X11
-    }
-
-
-        if [[ $rb5 == 'Yes, make X11 Dockless.' ]];then
-            RemoveDockIcon
-            print "X11 removed from the Dock."
-        elif [[ $rb5 == 'No, restore X11 to the Dock.' ]]; then
-            RestoreDockIcon
-            print "X11 restored to the Dock."
-        else
-            print "Not changing X11's dock behavior."
-        fi
-        
-###############################################################################
-#
-#    DISPLAY variable in startup scripts for bash, zsh and tcsh
-#
-###############################################################################
-
-if [[ $rb6 == 'Yes, create the appropriate files.' ]];then
-
-# bash:
-touch ~/.bashrc
-cat >>| ~/.bashrc   << eof-1
-
-if [[ -z \$DISPLAY && -z \$SSH_CONNECTION ]]; then
-	disp_no=(\$( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-    if [[ -n \$disp_no ]];then
-        export DISPLAY=\${disp_no}.0
-    else
-        export DISPLAY=:0.0
-    fi
-    echo "DISPLAY has been set to \$DISPLAY"
-fi
-eof-1
-
-touch ~/.bash_profile
-cat >>| ~/.bash_profile   << eof-11
-
-if [[ -z \$DISPLAY && -z \$SSH_CONNECTION ]]; then
-	disp_no=(\$( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-    if [[ -n \$disp_no ]];then
-        export DISPLAY=\${disp_no}.0
-    else
-        export DISPLAY=:0.0
-    fi
-    echo "DISPLAY has been set to \$DISPLAY"
-fi
-eof-11
-
-
-# zsh:
-touch ~/.zshrc
-cat >>| ~/.zshrc   << eof-2
-
-if [[ -z \$DISPLAY && -z \$SSH_CONNECTION ]]; then
-	disp_no=(\$( ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  ))
-    if [[ -n \$disp_no ]];then
-        export DISPLAY=\${disp_no}.0
-    else
-        export DISPLAY=:0.0
-    fi
-    echo "DISPLAY has been set to \$DISPLAY"
-fi
-eof-2
-
-# Do this only if the .tcshrc file already exists, or else it will mess people up
-   if [[ -f ~/.tcshrc ]];then
-
-touch  ~/.tcshrc
-cat >>| ~/.tcshrc   << eof-3
-if (! \$?DISPLAY && ! \$?SSH_CONNECTION ) then
-  setenv DISPLAY \`ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  \`.0 
-    if ( \$DISPLAY == '.0' )then
-       setenv DISPLAY :0.0
-    endif
-  echo "DISPLAY has been set to \$DISPLAY"
-endif   
-eof-3
-
-   else
-    
-touch  ~/.cshrc
-cat >>| ~/.cshrc   << eof-4
-if (! \$?DISPLAY && ! \$?SSH_CONNECTION ) then
-  setenv DISPLAY \`ps -wwx | grep -F X11.app | awk '{print $NF}' | grep -e ":[0-9]"  \`.0 
-    if ( \$DISPLAY == '.0' )then
-       setenv DISPLAY :0.0
-    endif
-  echo "DISPLAY has been set to \$DISPLAY"
-endif   
-eof-4
-    
-    
-    fi
-
-else
-    print "Remember to set the DISPLAY environment variable if you have not already done so."
-fi
-        
-############ END #############################
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.5 zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.5
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.5	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/customize_x11_gui_10.5	1969-12-31 16:00:00.000000000 -0800
@@ -1,325 +0,0 @@
-#!/bin/zsh -f
-
-VERSION='0.3.0'
-
-# Feb 18 2005
-# Revised for 10.5 on December 30 2007
-
-
-# Figure out where we are running this from:
-
-WeAreHere=$(dirname $0)
-
-# Define what the dialog should be like
-# Take a look at Pashua's Readme file for more info on the syntax
-
-#############################################################
-##########       Interface      #############################
-#############################################################
-
-# All of this gets put into a single variable called conf:
-conf="
-        # Set transparency: 0 is transparent, 1 is opaque
-        tx.transparency=0.95
-        
-        # Heavy metal overdose:
-        # appearance=metal
-        
-        # Set window title
-        tx.windowtitle = X11.app Customizations
-        
-        #img.type = image
-        #img.path = "$(dirname $WeAreHere)"/Resources/zsh_on_osx.png
-        #img.maxheight = 100
-        
-        ####################
-        # Introductory text:
-        ####################
-        tx.type=text
-        tx.width = 1050
-        tx.text = X11.app Customization Assistant.[return][return]This interface assists the  user  in changing settings that govern the behavior of X11.  The individual user can specify whether focus follows mouse behavior (emulating canonical X11 unix systems) should be set, whether the user should be  warned on  logout  if  X11 is running, whether X11 should be run as a dockless and menuless application in the background, as so forth.  An option to restore all default behaviors is included.[return]
-        
-        
-     #   ###############################################################
-     #   # Ask if X11.app should be included in the Login startup items:
-     #   ###############################################################
-     #   # Define radiobuttons
-     #   rb.type = popup
-     #   rb.width = 300
-     #   rb.label = Add X11.app to my Login startup items?
-     #   rb.option = Start X11 when I log in.
-     #   rb.option = Do not start X11 when I log in.
-     #   rb.option = Leave everything the way it is now.
-     #   rb.default = Leave everything the way it is now.
-        
-        ###############################################################
-        # Ask if xterm should be started automatically:
-        ###############################################################
-        tx2.type=text
-        tx2.width = 1050
-        tx2.text = X11.app starts an xterm every time X11.app starts up. If you find this behavior to be annoying, you can prevent xterm from starting automatically.
-        
-        # Define radiobuttons
-        rb2.type = popup
-        rb2.width = 300
-        rb2.label = Should xterm be started automatically?
-        rb2.option = Prevent xterm from starting automatically.
-        rb2.option = Restore xterm to starting automatically.
-        rb2.option = Leave everything the way it is now.
-        rb2.default = Leave everything the way it is now.
-           
-
-        ###############################################################
-        # Ask if Warning for Quitting X11.app should be turned off:
-        ###############################################################
-        tx3.type=text
-        tx3.width = 1050
-        tx3.text = X11.app has a 'quit alert' warning that pops up, preventing a clean logout.  This can be turned off.        
-        
-        
-        # Define radiobuttons
-        rb3.type = popup
-        rb3.width = 300
-        rb3.label = Get rid of the popup Quit Alert for X11?
-        rb3.option = Get rid of it.
-        rb3.option = Restore it.
-        rb3.option = Leave everything the way it is now.
-        rb3.default = Leave everything the way it is now.   
-        
-        
-        ###############################################################
-        # Ask if Focus Follows Mouse in X11.app should be turned on:
-        ###############################################################
-        tx4.type=text
-        tx4.width = 1050
-        tx4.text = X11.app can be set to focus-follows-mouse and click-through behavior that is typical of standard X11 behavior.  
-        
-        
-        # Define radiobuttons
-        rb4.type = popup
-        rb4.width = 300
-        rb4.label = Use Focus Follows Mouse in X11?
-        rb4.option = Turn on Focus Follows Mouse.
-        rb4.option = Turn off Focus Follows Mouse.
-        rb4.option = Leave everything the way it is now.
-        rb4.default = Leave everything the way it is now.   
-         
-        ###############################################################
-        # Ask if X11.app should go Dockless:
-        ###############################################################
-        tx5.type=text
-        tx5.width = 1050
-        tx5.text = X11.app can be launched silently and without any trace in the dock or menu bar. (If you do this you will lose the ability to use the X11 menu and will have to launch X11 apps from the command line only.) PLEASE SAVE any work in running X11 applications prior to answering yes, as we need to kill the X-server before starting. No need to do this if you anser Leave It Alone.  
- 
-        # Define radiobuttons
-        rb5.type = popup
-        rb5.width = 300
-        rb5.label = Shall we make X11 Dockless (and Menuless)?
-        rb5.option = Yes, make X11 Dockless.
-        rb5.option = No, restore X11 to the Dock.
-        rb5.option = Leave everything the way it is now.
-        rb5.default = Leave everything the way it is now.
-        
-
-#       ###############################################################
-#       # Ask if DISPLAY should be programmed to accommodate multiple
-#       # simultaneous X11.app users:
-#       ###############################################################
-#       tx6.type=text
-#       tx6.width = 1050
-#       tx6.text = Set DISPLAY variable to allow X-windows programs to run from Terminal.app and iTerm.app. Fast User Switching creates the problem of multiple simultaneous instances of X11.app running and how to find the appropriate DISPLAY value to assign to each. Choosing "Yes" solves this problem. 
-#
-#
-#       # Define radiobuttons
-#       rb6.type = popup
-#       rb6.width = 300
-#       rb6.label = Set up DISPLAY for single or multiple users of X11.app?
-#       rb6.option = Yes, create the appropriate files.
-#       rb6.option = No, leave everything the way it is now.
-#       rb6.default = No, leave everything the way it is now.
-        
-    cn.type=cancelbutton
-    cn.label=Cancel
-
-               
-"; # end of conf
-
-pashua_run "$conf"        
-        
-
-#############################################################
-##########   Begin Actual Program ###########################
-#############################################################
-	
-	
-	#  Check to see if we are running 10.5
-
-	if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-		print "\e[1m $0 is incompatable with the X11 on < 10.5"
-		print " Try invoking \"customize_x11_10.4\" \e[0m "
-		return 420
-	else
-		:
-		# Good to go
-	fi
-
-
-    
-    
-    ########################################################
-    #########     Check for Apple's X11.app      ###########
-    ########################################################
-    
-    # Find out if we have Apple's X11.  If we don't, quit now.
-    
-    if [[ -d /usr/X11/X11.app ]];then
-        PATH_TO_X11='/usr/X11/X11.app'
-    elif [[ -d /usr/X11 && -d /Applications/Utilities/X11.app ]];then
-        PATH_TO_X11='/Applications/Utilities/X11.app'
-    else
-        print "Can't locate Apple's X11.app"
-        return 100
-    fi
-
-    
-    ########################################################
-    ### Nix the start up of an xterm on login?   ###########
-    ########################################################
-     
-    if [[ $rb2 == 'Prevent xterm from starting automatically.' ]];then
-
-		defaults write org.x.X11_launcher app_to_run /usr/X11/bin/xlsclients
-		defaults write org.x.X11          app_to_run /usr/X11/bin/xlsclients
-
-		print "To get the xterm back, issue"
-		print "\e[1m defaults write org.x.X11_launcher app_to_run /usr/X11/bin/xterm \e[0m "
-        print " and "
-		print "\e[1m defaults write org.x.X11  app_to_run /usr/X11/bin/xterm \e[0m "
-
-     
-    elif [[ $rb2 == 'Restore xterm to starting automatically.' ]];then
-
-		defaults write org.x.X11_launcher app_to_run /usr/X11/bin/xterm
-		defaults write org.x.X11          app_to_run /usr/X11/bin/xterm
-		
-    fi
-
-
-    ########################################################
-    ###  Nix the Quit Alert warning on logout?   ###########
-    ########################################################
-     
-        
-    if [[ $rb3 == 'Get rid of it.' ]];then
-        defaults write com.apple.x11 no_quit_alert true  
-        defaults write org.x.X11 no_quit_alert true
-        defaults write org.x.X11_launcher no_quit_alert true
-        print ""; print "writing 'no_quit_alert true' to com.apple.x11.plist"   
-    elif [[ $rb3 == 'Restore it.' ]];then 
-        defaults write com.apple.x11 no_quit_alert false  
-        defaults write org.x.X11 no_quit_alert false
-        defaults write org.x.X11_launcher no_quit_alert false
-        print ""; print "writing 'no_quit_alert false' to com.apple.x11.plist"   
-    else
-        print ""; print "leaving com.apple.x11.plist alone"
-    fi
-
-
-    ########################################################
-    ###  Restore canonical window focus behavior?   ########
-    ########################################################
-  
-    function change_ffm {
-        defaults write com.apple.x11       wm_ffm $BOOL 
-        defaults write org.x.X11_launcher  wm_ffm $BOOL 
-        defaults write org.x.X11           wm_ffm $BOOL 
-        defaults write com.apple.x11       wm_click_through -bool $BOOL 
-        defaults write org.x.X11_launcher  wm_click_through -bool $BOOL 
-        defaults write org.x.X11           wm_click_through -bool $BOOL 
-        }
-        
-    if [[ $rb4 == 'Turn on Focus Follows Mouse.' ]];then
-        BOOL='true'
-        change_ffm
-        BOOL=''
-    
-    elif [[ $rb4 == 'Turn off Focus Follows Mouse.' ]];then
-        BOOL='false'
-        change_ffm         
-        BOOL=''   
-    else
-        BOOL=''
-        print ""; print "leaving com.apple.x11.plist alone" 
-    fi
-    
- 
-    
-            
-    ########################################################
-    ###  Get rix of X11.app's Dock Icon and menu bar?  #####
-    ########################################################       
-     
-
-	function RemoveDockIcon { 
-
-	    killall X11
-	    # Find the lenght of the file Info.plist
-	    lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-	    # Subtract two from this result
-	    twofewerlines=$((lines - 2))
-	    # Get all but the last two lines of the file
-	    command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-	    # Back up the original file
-	    sudo gzip -f $PATH_TO_X11/Contents/Info.plist
-	    # Append new lines to the end of the trunctated file
-	    command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-	    command echo "        <string>1</string>  "  >> /tmp/X11_Info.plist
-	    command echo "</dict>  "  >> /tmp/X11_Info.plist
-	    command echo "</plist>  "  >> /tmp/X11_Info.plist
-	    # copy it back
-	    sudo cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-	}
-    
-    
-	function RestoreDockIcon { 
-
-	    killall X11
-	    # Find the lenght of the file Info.plist
-	    lines=$( wc -l $PATH_TO_X11/Contents/Info.plist | awk '{ print $1 }' )
-	    # Subtract two from this result
-	    twofewerlines=$((lines - 2))
-	    # Get all but the last two lines of the file
-	    command head -n $twofewerlines $PATH_TO_X11/Contents/Info.plist >| /tmp/X11_Info.plist
-	    # Back up the original file
-	    sudo gzip -f $PATH_TO_X11/Contents/Info.plist
-	    # Append new lines to the end of the trunctated file
-	    command echo "        <key>LSUIElement</key>"  >> /tmp/X11_Info.plist
-	    command echo "        <string>0</string>  "  >> /tmp/X11_Info.plist
-	    command echo "</dict>  "  >> /tmp/X11_Info.plist
-	    command echo "</plist>  "  >> /tmp/X11_Info.plist
-	    # copy it back
-	    sudo cp /tmp/X11_Info.plist $PATH_TO_X11/Contents/Info.plist
-	}
-
-
-        if [[ $rb5 == 'Yes, make X11 Dockless.' ]];then
-            RemoveDockIcon
-            print "X11 removed from the Dock."
-        elif [[ $rb5 == 'No, restore X11 to the Dock.' ]]; then
-            RestoreDockIcon
-            print "X11 restored to the Dock."
-        else
-            print "Not changing X11's dock behavior."
-        fi
-        
-###############################################################################
-#
-#    DISPLAY variable in startup scripts for bash, zsh and tcsh
-#
-###############################################################################
-
-
-    print "\e[1m DO NOT set the DISPLAY environment variable for OS 10.5+ \e[0m ."
- 
-        
-############ END #############################
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/enable_faster_open zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/enable_faster_open
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/enable_faster_open	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/enable_faster_open	2014-08-28 19:48:31.000000000 -0700
@@ -107,8 +107,8 @@
             #
             myapps=$(cat ~/.zsh/zshapplist | grep -v  \'  )
             mkdir -p ~/.zsh/cache/$HOST
-            print _mac_apps\=\(\'"$myapps[@]"\'\) | perl -pi -e "s|\)\n|\)|g" | \
-                        perl -pi -e "s|\n|' '|g" >| ~/.zsh/cache/$HOST/Mac_applications
+            print _mac_apps\=\(\'"$myapps[@]"\'\) | perl -p -e "s|\)\n|\)|g" | \
+                        perl -p -e "s|\n|' '|g" >| ~/.zsh/cache/$HOST/Mac_applications
           } 
          
         
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/exportfs zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/exportfs
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/exportfs	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/exportfs	2014-08-28 10:48:13.000000000 -0700
@@ -34,129 +34,7 @@
 
 
 
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
 
-		# Specific to 10.4 or earlier
-
-		if ! ps -axwwo command | grep 'nfs\iod' &>/dev/null; then
-			sudo nfsiod -n 4
-		fi
-		
-		# gather list of NFS exports into a variable we
-		# will call "exports"
-
-		print " Gathering a list of NFS exports ...."
-		print ""
-
-		exports_ni=$(niutil -list . /exports 2> /dev/null | wc -w)
-
-		# Look for exports in /etc/exports, ignoring comments and blank lines.
-		exports_etc=$(grep -v '^[[:space:]]*\(#\|$\)' /etc/exports 2> /dev/null | wc -l)
-		exports=$(($exports_ni + $exports_etc))
-
-		# If exportfs finds something to export (either using /etc/exports or the
-		# exports NetInfo directory), then start the NFS daemons (which service
-		# NFS requests) and the mount server (which services NFS mount requests).
-
-		# Clear the table of exported filesystems.
-
-		print " Removing /var/db/mountdtab "
-		print ""
-
-		sudo rm -f /var/db/mountdtab
-
-		if [[ "${exports}" -gt 0 ]]; then
-			if ! ps -axwwo command | grep "rpc\.statd" &>/dev/null; then
-				sudo rpc.statd
-			fi
-			# if ps -axwwo command | grep "rpc\.lockd" &>/dev/null; then
-			#	for LOCKPID in $( ps -axwwo pid,command | awk '/rpc\.lockd/{ print $1 }' )
-			#	do
-			#		kill $LOCKPID
-			#	done
-			# fi
-			if ps -axwwo command | grep "rpc\.lockd -w" &>/dev/null; then
-				LOCKPID=$( ps -axwwo pid,command | awk '/rpc\.lockd -w/{ print $1 }' )
-				sudo kill $LOCKPID
-			fi
-			if ! ps -axwwo command | grep "rpc\.lockd" &>/dev/null; then
-				sudo rpc.lockd
-			fi
-			echo " Starting Network File System server"
-			if ps -axwwo command | grep "mount\d" &>/dev/null; then
-				MOUNTPID=$( ps -axwwo pid,command | awk '/mount\d/{ print $1 }' )
-				sudo kill -HUP $MOUNTPID
-			else
-				sudo mountd
-			fi
-
-			# If the NetInfo config/nfsd directory contains startup args for nfsd, use those.
-			arguments=$(niutil -readprop . /config/nfsd arguments 2>/dev/null )
-			if [[ "${arguments}" = "" ]]; then
-				arguments=( -t -u -n 6 )
-			fi
-			print ""
-			print " Starting nfs daemon"
-			print ""
-			if ! ps -axwwo command | grep 'nf\sd' &>/dev/null; then
-				sudo nfsd ${arguments}
-			fi
-		else
-			print " NFS server (mountd and nfsd) has not been started"
-			print " because no /etc/exports or netinfodb exports were found."
-			print " Please check /etc/exports to make sure the file exists and the syntax is correct."
-			print ""
-			if ps -axwwo command | grep "mount\d" &>/dev/null; then
-				MOUNTPID=$( ps -axwwo pid,command | awk '/mount\d/{ print $1 }' )
-				sudo kill $MOUNTPID
-			fi
-
-			print ""
-			print " Stopping nfs daemon"
-			print ""
-			if ps -axwwo command | grep 'nf\sd' &>/dev/null; then
-				for NFSPID in $( ps -axwwo pid,command | awk '/nf\sd/{ print $1 }' ); do
-					sudo kill -9 $NFSPID
-				done
-			fi
-			if [ "${NFSLOCKS:=-AUTOMATIC-}" = "-YES-" ]; then
-				# we definitely want locks on, so turn them on now
-				if ! ps -axwwo command | grep "rpc\.statd" &>/dev/null; then
-					sudo rpc.statd
-				fi
-				if ps -axwwo command | grep "rpc\.lockd -w" &>/dev/null; then
-					LOCKPID=$( ps -axwwo pid,command | awk '/rpc\.lockd -w/{ print $1 }' )
-					sudo kill $LOCKPID
-				fi
-				if ! ps -axwwo command | grep "rpc\.lockd" &>/dev/null; then
-					sudo rpc.lockd
-				fi
-			fi
-			if [ "${NFSLOCKS:=-AUTOMATIC-}" = "-AUTOMATIC-" ]; then
-				# delay starting daemons until we know we need them
-
-				# invoke rpc.statd to send any SM_NOTIFY messages and quit.
-				if ps -axwwo command | grep "rpc\.statd" &>/dev/null; then
-					STATPID=$( ps -axwwo pid,command | awk '/rpc\.statd/{ print $1 }' )
-					sudo kill $STATPID
-				fi
-				
-				sudo rpc.statd -n
-
-				# -w says to wait for signal from kernel, then start daemons
-				if ps -axwwo command | grep "rpc\.lockd$" &>/dev/null; then
-					for LOCKPID in $( ps -axwwo pid,command | awk '/rpc\.lockd/{ print $1 }' )
-					do
-						sudo kill $LOCKPID
-					done
-				fi
-				if ! ps -axwwo command | grep "rpc\.lockd" &>/dev/null; then
-					sudo rpc.lockd -w
-				fi
-			fi
-		fi
-
-else
 		# For 10.5 and later
 
 		if [[ -f /etc/exports ]];then
@@ -188,4 +66,4 @@
 
 
 
-fi
\ No newline at end of file
+ 
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/full_path_in_finder zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/full_path_in_finder
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/full_path_in_finder	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/full_path_in_finder	2014-08-28 10:48:13.000000000 -0700
@@ -2,7 +2,7 @@
 
 # Put full path in finder
 
-version="0.0.1"
+version="0.0.2"
 
 
 ###############################################################################
@@ -30,13 +30,10 @@
 #
 ###############################################################################
 
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	print "Works on 10.5.X and above only."
-	return 10
-else
+ 
 	print "Adds the full path in the Finder title bar"
 	print "To remove, issue \e[1m $0 NO \e[0m "
-fi
+ 
 
 if [[ $1 == NO || $1 == no || $1 == No ]]; then
     defaults write com.apple.finder _FXShowPosixPathInTitle -bool NO
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/my_prefs_edit zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/my_prefs_edit
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/my_prefs_edit	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/my_prefs_edit	2014-08-28 19:53:23.000000000 -0700
@@ -162,7 +162,7 @@
 
 print ""
 
-perl -pi -e 's|Adobe Photoshop 7|Adobe Photoshop 7.0|g' ~/.zsh/my_edit_rc
-perl -pi -e 's|Adobe Reader 6.0|Adobe Reader 6.0.app|g' ~/.zsh/my_edit_rc
+perl -p -e 's|Adobe Photoshop 7|Adobe Photoshop 7.0|g' ~/.zsh/my_edit_rc
+perl -p -e 's|Adobe Reader 6.0|Adobe Reader 6.0.app|g' ~/.zsh/my_edit_rc
 
  
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/nfs_niloader zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/nfs_niloader
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/nfs_niloader	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/nfs_niloader	2014-08-28 10:48:13.000000000 -0700
@@ -1,44 +1,44 @@
 #!/bin/zsh -f
-
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
- 
-	sudo niload -m -v fstab . < /etc/fstab 
-	
-else
-
-	print "niload does not exist on 10.5"
-	print "There is no longer a need for this function (command)"
-	print "Simply use the \e[1m automount \e[0m command instead"
-	print "Issue \e[1m man automount \e[0m for more details"
-	print ""
-	print ""
-	print "Issuing \e[1m sudo automount -vc \e[0m "
-	sudo automount -vc
-fi
-
-
-
-print "Here are the currently mounted filesystems: "
-print ""
-            df -h
-print ""
-print ""
-
-if [[ -f /etc/fstab ]];then
-		print "Here are the nfs mountable filesystems listed in /etc/fstab :"
-		print ""
-		            grep " nfs " /etc/fstab | awk '{print $2}' 
-		print ""
-		print "To mount additional filesystems manually, type the command"
-		print "sudo mount /filesystem  or sudo mount -a"
-		print ""
-fi
-
-if [[ -f /etc/auto_master ]];then
-	print "Here are the nfs mountable filesystems listed in /etc/auto_\* :"
-	print ""
-	            less /etc/auto_* | grep -va "\#"
-	print ""	
-	sleep 2
-fi
+#  
+#  if [[ $(sw_vers -productVersion) < 10.5 ]]; then
+#   
+#  	sudo niload -m -v fstab . < /etc/fstab 
+#  	
+#  else
+#  
+#  	print "niload does not exist on 10.5"
+#  	print "There is no longer a need for this function (command)"
+#  	print "Simply use the \e[1m automount \e[0m command instead"
+#  	print "Issue \e[1m man automount \e[0m for more details"
+#  	print ""
+#  	print ""
+#  	print "Issuing \e[1m sudo automount -vc \e[0m "
+#  	sudo automount -vc
+#  fi
+#  
+#  
+#  
+#  print "Here are the currently mounted filesystems: "
+#  print ""
+#              df -h
+#  print ""
+#  print ""
+#  
+#  if [[ -f /etc/fstab ]];then
+#  		print "Here are the nfs mountable filesystems listed in /etc/fstab :"
+#  		print ""
+#  		            grep " nfs " /etc/fstab | awk '{print $2}' 
+#  		print ""
+#  		print "To mount additional filesystems manually, type the command"
+#  		print "sudo mount /filesystem  or sudo mount -a"
+#  		print ""
+#  fi
+#  
+#  if [[ -f /etc/auto_master ]];then
+#  	print "Here are the nfs mountable filesystems listed in /etc/auto_\* :"
+#  	print ""
+#  	            less /etc/auto_* | grep -va "\#"
+#  	print ""	
+#  	sleep 2
+#  fi
  
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/pashua_run zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/pashua_run
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/pashua_run	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/pashua_run	2014-08-28 19:53:57.000000000 -0700
@@ -101,8 +101,8 @@
 	#-----------
 
 	result=( $( "$pashuapath" $pashua_configfile \
-	 | command perl -pi -e "s| |_SPACE_|g" \
-	 | command perl -pi -e "s|\[return\]|_RETURN_|g" \
+	 | command perl -p -e "s| |_SPACE_|g" \
+	 | command perl -p -e "s|\[return\]|_RETURN_|g" \
 	) )
 
 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/spath zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/spath
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/spath	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/spath	2014-08-28 19:54:24.000000000 -0700
@@ -139,7 +139,7 @@
 
 SPATH=$reldir
 export SPATH
-echo -n "$SPATH" |perl -pi -e 's; ;\\\ ;g'  | pbcopy
+echo -n "$SPATH" |perl -p -e 's; ;\\\ ;g'  | pbcopy
  
 return_focus
 print "\$SPATH has been set to $SPATH and has been copied to the clipboard."
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/switch_users zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/switch_users
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/switch_users	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/switch_users	2014-08-28 10:48:13.000000000 -0700
@@ -1,10 +1,6 @@
 #!/bin/zsh -f
 
- 
-if [[ $(sw_vers -productVersion) < 10.4 ]];then
-     print "Fast User Switching is not available in OSX version $(sw_vers -productVersion) "
-     return 1
-fi
+
 
 
 if [[ -z $1 ]]; then
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/switcher zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/switcher
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/switcher	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/switcher	2014-08-28 10:48:13.000000000 -0700
@@ -6,10 +6,7 @@
 	return 1
 fi
 
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	print "Spaces requires OS X v. 10.5 or newer"
-   
-else
+ 
 	if [[ $( defaults read  com.apple.dock workspaces ) = 1 ]]; then
 		open -a Spaces
 	else
@@ -19,4 +16,4 @@
 		sleep 1
 		open -a Spaces
     fi
-fi
+ 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/toggle_spaces zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/toggle_spaces
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/darwin/toggle_spaces	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/darwin/toggle_spaces	2014-08-28 10:48:13.000000000 -0700
@@ -5,10 +5,7 @@
 	return 1
 fi
 
-if [[ $(sw_vers -productVersion) < 10.5 ]]; then
-	print "Spaces requires OS X v. 10.5 or newer"
-
-else
+ 
 
 	if [[ $( defaults read  com.apple.dock workspaces ) = 1 ]]; then
 	        defaults write com.apple.dock workspaces -bool false
@@ -20,4 +17,4 @@
 			print "\e[1m Turning \"Spaces\" on. \e[0m "
 	fi
 
-fi
\ No newline at end of file
+ 
\ No newline at end of file
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/general/dirstack zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/general/dirstack
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/general/dirstack	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/general/dirstack	2014-08-28 19:56:01.000000000 -0700
@@ -41,13 +41,13 @@
 
 for ((i = 1; i <= $GLOBALDIRSIZE; i++ )) do         
 	if [[ -n $global_dirs[i] ]];then 
-		print $i $global_dirs[i] | perl -pi -e 's|_SPACE_|\\\ |g'
-                dir_index=$(print $global_dirs[i] | perl -pi -e 's|_SPACE_|\\\ |g' )
+		print $i $global_dirs[i] | perl -p -e 's|_SPACE_|\\\ |g'
+                dir_index=$(print $global_dirs[i] | perl -p -e 's|_SPACE_|\\\ |g' )
                 alias cd$i="cd $dir_index ; command pwd " 
-                dir_index_chomp=$(print -n $global_dirs[i] | perl -pi -e 's|_SPACE_|\\\ |g' )
+                dir_index_chomp=$(print -n $global_dirs[i] | perl -p -e 's|_SPACE_|\\\ |g' )
 
-		alias cp$i="echo -n $dir_index_chomp |perl -pi -e 's; ;\\\ ;g' | pbcopy "
-		alias cpath$i="echo -n $dir_index_chomp |perl -pi -e 's; ;\\\ ;g' | pbcopy "
+		alias cp$i="echo -n $dir_index_chomp |perl -p -e 's; ;\\\ ;g' | pbcopy "
+		alias cpath$i="echo -n $dir_index_chomp |perl -p -e 's; ;\\\ ;g' | pbcopy "
 
 	else 
 		return 0
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/xtal/getpdb zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/xtal/getpdb
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/xtal/getpdb	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/xtal/getpdb	2014-08-28 10:48:13.000000000 -0700
@@ -37,8 +37,9 @@
 }
 
 
-PDBCODE=$(GetPDBcode | cut -d: -f2 | cut -d, -f1)
+        PDBCODE=$(GetPDBcode | cut -d: -f3)
  
+
 fi
 
 # Find a directory in which to download the pdb file. Store the previous
@@ -64,7 +65,11 @@
 eof-1
 }
 
-PDBDIRECTORY=$(GetPDBdir | cut -d: -f2 | cut -d, -f1)
+
+
+ 
+    PDBDIRECTORY=$(GetPDBdir | cut -d: -f3)
+ 
 
 
 
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/xtal/mos2fobs zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/xtal/mos2fobs
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/xtal/mos2fobs	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/xtal/mos2fobs	2014-08-28 10:48:13.000000000 -0700
@@ -265,7 +265,11 @@
 
 # Get the Project Name
 
-PROJECTNAME=$(GetProjectName | cut -d: -f2 | cut -d, -f1)
+# PROJECTNAME=$(GetProjectName | cut -d: -f2 | cut -d, -f1)
+ 
+    PROJECTNAME=$(GetProjectName | cut -d: -f3)
+
+
 
    	if [[ $PROJECTNAME == "Cancelled." ]]; then
   	   print "Selection has been cancelled."
@@ -278,7 +282,10 @@
 
 # Get the estimated asymmetric unit content.
 
-nresidue=$(GetNumAA | cut -d: -f2 | cut -d, -f1)
+# nresidue=$(GetNumAA | cut -d: -f2 | cut -d, -f1)
+ 
+    nresidue=$(GetNumAA | cut -d: -f3)
+ 
 
 
    	if [[ $nresidue == "Cancelled." ]]; then
@@ -290,7 +297,10 @@
  
 # Get the estimated asymmetric unit content.
 
-nresidueNT=$(GetNumNT | cut -d: -f2 | cut -d, -f1)
+# nresidueNT=$(GetNumNT | cut -d: -f2 | cut -d, -f1)
+ 
+    nresidueNT=$(GetNumNT | cut -d: -f3)
+ 
 
 
    	if [[ $nresidueNT == "Cancelled." ]]; then
@@ -300,7 +310,10 @@
 
 # Get the estimated asymmetric unit content.
 
-nASU=$(GetNumASU | cut -d: -f2 | cut -d, -f1)
+# nASU=$(GetNumASU | cut -d: -f2 | cut -d, -f1)
+
+    nASU=$(GetNumASU | cut -d: -f3)
+ 
 
 
    	if [[ $nASU == "Cancelled." ]]; then
@@ -325,7 +338,10 @@
 
 # Assign the labels for the data used in truncate
 
-fobslabel=$(GetLabel | cut -d: -f2 | cut -d, -f1)
+# fobslabel=$(GetLabel | cut -d: -f2 | cut -d, -f1)
+ 
+    fobslabel=$(GetLabel | cut -d: -f3)
+ 
 
    	if [[ $fobslabel == "Cancelled." ]]; then
 	   print "Selection has been cancelled."
diff -ruN zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/xtal/sca2mtz zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/xtal/sca2mtz
--- zsh-templates-2.0.5-orig/Library/init/zsh/zshrc.d/local-functions/xtal/sca2mtz	2013-12-27 12:01:04.000000000 -0800
+++ zsh-templates-2.0.5/Library/init/zsh/zshrc.d/local-functions/xtal/sca2mtz	2014-08-28 10:48:13.000000000 -0700
@@ -1,6 +1,6 @@
 #!/bin/zsh -f
 # 
-version="0.3"
+version="0.5"
 
 ##  sca2mtz.zsh
 
@@ -191,7 +191,9 @@
 
 # Get the Project Name
 
-PROJECTNAME=$(GetProjectName | cut -d: -f2 | cut -d, -f1)
+ 
+    PROJECTNAME=$(GetProjectName | cut -d: -f3)
+ 
 
 print "You have chosen $PROJECTNAME as the project name"
  
@@ -199,7 +201,10 @@
 
 # Get the estimated asymmetric unit content.
 
-nresidue=$(GetNumAA | cut -d: -f2 | cut -d, -f1)
+
+    nresidue=$(GetNumAA | cut -d: -f3)
+
+
 
 print "Estimate asymmetric unit content as $nresidue amino acids."
  
@@ -211,7 +216,8 @@
 
 # Assign the labels for the data used in truncate
 
-fobslabel=$(GetLabel | cut -d: -f2 | cut -d, -f1)
+    fobslabel=$(GetLabel | cut -d: -f3)
+ 
 
 print "You have chosen the data label subscript $fobslabel"
 
@@ -219,7 +225,8 @@
 
 # Get the space group
 
-spacegroup=$(GetSpaceGroup | cut -d: -f2 | cut -d, -f1)
+    spacegroup=$(GetSpaceGroup | cut -d: -f3)
+ 
 
 print "You have chosen the data label subscript $spacegroup"
  
diff -ruN zsh-templates-2.0.5-orig/READ_THIS_FIRST.txt zsh-templates-2.0.5/READ_THIS_FIRST.txt
--- zsh-templates-2.0.5-orig/READ_THIS_FIRST.txt	2013-12-27 12:04:46.000000000 -0800
+++ zsh-templates-2.0.5/READ_THIS_FIRST.txt	2014-08-28 10:48:18.000000000 -0700
@@ -14,7 +14,7 @@
 
 *******************************************************************************
 
- Copyright (C) 2004-2009 William Scott, Wataru Kagawa, Gary Kerbaugh and others
+ Copyright (C) 2004-2007 William Scott, Wataru Kagawa, Gary Kerbaugh and others
  named in the individual function files.  
 
  This program is free software; you can redistribute it and/or
