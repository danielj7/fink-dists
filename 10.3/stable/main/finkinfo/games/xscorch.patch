diff -ruN xscorch-0.1.15/Makefile.in xscorch-0.1.15-patched/Makefile.in
--- xscorch-0.1.15/Makefile.in	Mon Jun 17 22:33:52 2002
+++ xscorch-0.1.15-patched/Makefile.in	Sat Aug 16 13:24:53 2003
@@ -116,7 +116,7 @@
 bin_PROGRAMS = $(GTK_PROGRAM) $(NETWORK_PROGRAM)
 
 xscorch_SOURCES = xscorch.c
-xscorch_LDADD = $(GTK_LIBS) $(LIBMIKMOD_LIBS) sgame/libscorch_game.a sgtk/libscorch_gtk.a sgtk/swidgets/libscorch_widget_gtk.a sai/libscorch_ai.a $(MIKMOD_LD_ADD) $(NETWORK_LD_ADD) sutil/libscorch_util.a sgame/libscorch_game.a
+xscorch_LDADD = sgame/libscorch_game.a sgtk/libscorch_gtk.a sgtk/swidgets/libscorch_widget_gtk.a sai/libscorch_ai.a $(MIKMOD_LD_ADD) $(NETWORK_LD_ADD) sutil/libscorch_util.a sgame/libscorch_game.a $(GTK_LIBS) $(LIBMIKMOD_LIBS)
 
 xscorch_server_SOURCES = xscorch.c
 xscorch_server_LDADD = -lm $(LIBREADLINE_LIBS) sgame/libscorch_game.a sconsole/libscorch_console.a sai/libscorch_ai.a ssound/libscorch_sound_null.a $(NETWORK_LD_ADD) sutil/libscorch_util.a sgame/libscorch_game.a
diff -ruN xscorch-0.1.15/sutil/Makefile.in xscorch-0.1.15-patched/sutil/Makefile.in
--- xscorch-0.1.15/sutil/Makefile.in	Mon Jun 17 22:33:53 2002
+++ xscorch-0.1.15-patched/sutil/Makefile.in	Sat Aug 16 13:38:34 2003
@@ -107,7 +107,7 @@
 
 # Game code
 #
-libscorch_util_a_SOURCES =  	_reg.h			getopt.c		getopt.h		getopt1.c		randserv.c		randserv.h		reg.c			regblock.c		regio.c			regvar.c		sslink.c		sslink.h		shash.c			shash.h			sreg.h			sfractal.c		sfractal.h		srand.c			srand.h			sstr.c			sstr.h		
+libscorch_util_a_SOURCES =  	_reg.h randserv.c		randserv.h		reg.c			regblock.c		regio.c			regvar.c		sslink.c		sslink.h		shash.c			shash.h			sreg.h			sfractal.c		sfractal.h		srand.c			srand.h			sstr.c			sstr.h		
 
 
 INCLUDES = 
diff -ruN xscorch-0.1.15/sutil/getopt.c xscorch-0.1.15-patched/sutil/getopt.c
--- xscorch-0.1.15/sutil/getopt.c	Sun Jul  8 18:21:22 2001
+++ xscorch-0.1.15-patched/sutil/getopt.c	Sat Aug 16 13:41:43 2003
@@ -121,7 +121,7 @@
    Also, when `ordering' is RETURN_IN_ORDER,
    each non-option ARGV-element is returned here.  */
 
-char *optarg = NULL;
+//char *optarg = NULL;
 
 /* Index in ARGV of the next element to be scanned.
    This is used for communication to and from the caller
@@ -136,7 +136,7 @@
    how much of ARGV has been scanned so far.  */
 
 /* 1003.2 says this must be 1 before any call.  */
-int optind = 1;
+//int optind = 1;
 
 /* Formerly, initialization of getopt depended on optind==0, which
    causes problems with re-calling getopt as programs generally don't
@@ -156,13 +156,13 @@
 /* Callers store zero here to inhibit the error message
    for unrecognized options.  */
 
-int opterr = 1;
+//int opterr = 1;
 
 /* Set to an option character which was unrecognized.
    This must be initialized on some systems to avoid linking in the
    system's own getopt implementation.  */
 
-int optopt = '?';
+//int optopt = '?';
 
 /* Describe how to deal with options that follow non-option ARGV-elements.
 
@@ -920,7 +920,7 @@
 		return c;
 	}
 }
-
+/*
 int
     getopt(argc, argv, optstring)
      int argc;
@@ -932,7 +932,7 @@
 				(int *) 0,
 				0);
 }
-
+*/
 #endif /* Not ELIDE_CODE.  */
 
 #ifdef TEST
diff -ruN xscorch-0.1.15/xscorch.c xscorch-0.1.15-patched/xscorch.c
--- xscorch-0.1.15/xscorch.c	Mon Jun 17 22:29:47 2002
+++ xscorch-0.1.15-patched/xscorch.c	Sat Aug 16 13:24:53 2003
@@ -70,7 +70,6 @@
    sigemptyset(&sigset);
    sigaddset(&sigset, SIGPIPE);
    sa.sa_handler = sc_signal_handler;
-   sa.sa_sigaction = NULL;
    sa.sa_mask = sigset;
    sa.sa_flags = 0;
    sigaction(SIGPIPE, &sa, NULL);
