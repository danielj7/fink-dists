diff -ruN qgis-2.18.6-orig/CMakeLists.txt qgis-2.18.6/CMakeLists.txt
--- qgis-2.18.6-orig/CMakeLists.txt	2017-04-16 16:08:50.000000000 +0900
+++ qgis-2.18.6/CMakeLists.txt	2017-04-16 16:10:35.000000000 +0900
@@ -586,9 +586,9 @@
     # need to find non-system frameworks
     # cmake bug #0007250 - CMAKE_SHARED_LINKER_FLAGS ignored when creating
     # a framework, so these need to be manually handled with LINK_FLAGS options
-    SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -F/Library/Frameworks")
-    SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -F/Library/Frameworks")
-    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -F/Library/Frameworks")
+    # SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -F/Library/Frameworks")
+    # SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -F/Library/Frameworks")
+    # SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -F/Library/Frameworks")
 
   ELSE (APPLE)
     # UNIX
diff -ruN qgis-2.18.6-orig/cmake/FindGRASS.cmake qgis-2.18.6/cmake/FindGRASS.cmake
--- qgis-2.18.6-orig/cmake/FindGRASS.cmake	2017-04-16 16:08:50.000000000 +0900
+++ qgis-2.18.6/cmake/FindGRASS.cmake	2017-04-16 16:12:44.000000000 +0900
@@ -48,7 +48,7 @@
           # FIND_* is invoked first with specified paths and NO_DEFAULT_PATH
           # and then again with no specified paths to search the default
           # locations. When an earlier FIND_* succeeds, subsequent FIND_*s
-          # searching for the same item do nothing. 
+          # searching for the same item do nothing.
           FIND_LIBRARY(LIB_PATH NAMES grass_${LIB} PATHS ${G_PREFIX}/lib NO_DEFAULT_PATH)
           FIND_LIBRARY(LIB_PATH NAMES grass_${LIB} PATHS ${G_PREFIX}/lib)
 
@@ -62,18 +62,18 @@
 
         # LIB_PATH is only temporary variable, so hide it (is it possible to delete a variable?)
         UNSET(LIB_PATH CACHE)
-    
+
         # Find off_t size
         IF( (GRASS_MAJOR_VERSION${GRASS_FIND_VERSION} EQUAL 7) AND (GRASS_MINOR_VERSION${GRASS_FIND_VERSION} GREATER 0) )
           SET(GRASS_TEST_MAPSET ${CMAKE_BINARY_DIR}/grass-location/PERMANENT)
-          FILE(MAKE_DIRECTORY ${GRASS_TEST_MAPSET}) 
-          FILE(WRITE ${GRASS_TEST_MAPSET}/DEFAULT_WIND "") 
+          FILE(MAKE_DIRECTORY ${GRASS_TEST_MAPSET})
+          FILE(WRITE ${GRASS_TEST_MAPSET}/DEFAULT_WIND "")
           FILE(WRITE ${GRASS_TEST_MAPSET}/WIND "")
           # grass command is not in G_PREFIX but in some bin dir, so it must be in PATH
           SET(GRASS_EXE grass7${GRASS_MINOR_VERSION${GRASS_FIND_VERSION}})
           #MESSAGE(STATUS "GRASS_EXE = ${GRASS_EXE}")
           EXECUTE_PROCESS(COMMAND ${GRASS_EXE} ${GRASS_TEST_MAPSET} --exec g.version -g
-            COMMAND grep build_off_t_size 
+            COMMAND grep build_off_t_size
             COMMAND sed "s/.*\\([0-9]\\).*/\\1/"
             ERROR_VARIABLE GRASS_TMP_ERROR
             OUTPUT_VARIABLE GRASS_OFF_T_SIZE${GRASS_FIND_VERSION}
@@ -98,9 +98,9 @@
                   SET( GRASS_OFF_T_SIZE${GRASS_FIND_VERSION} 4 )
                 ELSEIF( "${FILE_OFFSET_BITS}" STREQUAL "64" )
                   SET( GRASS_OFF_T_SIZE${GRASS_FIND_VERSION} 8 )
-                ENDIF()        
-              ENDIF()        
-            ENDIF()        
+                ENDIF()
+              ENDIF()
+            ENDIF()
           ENDIF()
         ENDIF()
 
@@ -142,19 +142,7 @@
 ENDIF (UNIX)
 
 IF (APPLE)
-  IF (GRASS_FIND_VERSION EQUAL 6)
-    LIST(APPEND GRASS_PATHS
-      /Applications/GRASS-6.3.app/Contents/MacOS
-      /Applications/GRASS-6.4.app/Contents/MacOS
-    )
-  ELSEIF (GRASS_FIND_VERSION EQUAL 7)
-    LIST(APPEND GRASS_PATHS
-      /Applications/GRASS-7.0.app/Contents/MacOS
-      /Applications/GRASS-7.1.app/Contents/MacOS
-      /Applications/GRASS-7.2.app/Contents/MacOS
-    )
-  ENDIF ()
-  LIST(APPEND GRASS_PATHS /Applications/GRASS.app/Contents/Resources)
+
 ENDIF (APPLE)
 
 IF (WITH_GRASS${GRASS_CACHE_VERSION})
diff -ruN qgis-2.18.6-orig/cmake/FindOSGEARTH.cmake qgis-2.18.6/cmake/FindOSGEARTH.cmake
--- qgis-2.18.6-orig/cmake/FindOSGEARTH.cmake	2017-04-16 16:08:50.000000000 +0900
+++ qgis-2.18.6/cmake/FindOSGEARTH.cmake	2017-04-16 16:14:20.000000000 +0900
@@ -10,7 +10,7 @@
 # directory, and source directory, respectively
 # OSGEARTHDIR or OSGEARTH_SOURCE_DIR: osg source directory, typically OpenSceneGraph
 # OSGEARTH_DIR or OSGEARTH_BUILD_DIR: osg build directory, place in which you've
-#    built osg via cmake 
+#    built osg via cmake
 
 # Header files are presumed to be included like
 # #include <osgEarth/Common>
@@ -27,15 +27,7 @@
         $ENV{OSGEARTHDIR}
         $ENV{OSGEARTH_DIR}
         $ENV{OSGEO4W_ROOT}
-        /usr/local/
-        /usr/
-        /sw/ # Fink
-        /opt/local/ # DarwinPorts
-        /opt/csw/ # Blastwave
-        /opt/
-        [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session\ Manager\\Environment;OSGEARTH_ROOT]/
-        ~/Library/Frameworks
-        /Library/Frameworks
+        @PREFIX@ # Fink
     PATH_SUFFIXES
         /include/
 )
@@ -111,7 +103,7 @@
     SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${OSGEARTHUTIL_LIBRARY})
     IF(APPLE)
         # no extra LDFLAGS used in link test, may fail in OS X SDK
-        SET(CMAKE_REQUIRED_LIBRARIES "-F/Library/Frameworks" ${CMAKE_REQUIRED_LIBRARIES})
+        # SET(CMAKE_REQUIRED_LIBRARIES "-F/Library/Frameworks" ${CMAKE_REQUIRED_LIBRARIES})
     ENDIF(APPLE)
     CHECK_CXX_SOURCE_COMPILES("
 #include <osgEarthUtil/Controls>
diff -ruN qgis-2.18.6-orig/cmake/FindQScintilla.cmake qgis-2.18.6/cmake/FindQScintilla.cmake
--- qgis-2.18.6-orig/cmake/FindQScintilla.cmake	2017-04-16 16:08:50.000000000 +0900
+++ qgis-2.18.6/cmake/FindQScintilla.cmake	2017-04-16 16:18:37.000000000 +0900
@@ -25,7 +25,7 @@
 ELSE(EXISTS QSCINTILLA_VERSION_STR)
 
   FIND_PATH(QSCINTILLA_INCLUDE_DIR
-    NAMES Qsci/qsciglobal.h
+    NAMES qsciglobal.h
     PATHS
       ${Qt5Core_INCLUDE_DIRS}
       "${QT_INCLUDE_DIR}"
@@ -62,7 +62,7 @@
   IF(QSCINTILLA_INCLUDE_DIR AND NOT EXISTS QSCINTILLA_VERSION_STR)
     # get QScintilla2 version from header, is optinally retrieved via bindings
     # with Qsci PyQt4 module
-    FILE(READ ${QSCINTILLA_INCLUDE_DIR}/Qsci/qsciglobal.h qsci_header)
+    FILE(READ ${QSCINTILLA_INCLUDE_DIR}/qsciglobal.h qsci_header)
     STRING(REGEX REPLACE "^.*QSCINTILLA_VERSION_STR +\"([^\"]+)\".*$" "\\1" QSCINTILLA_VERSION_STR "${qsci_header}")
   ENDIF(QSCINTILLA_INCLUDE_DIR AND NOT EXISTS QSCINTILLA_VERSION_STR)
 
diff -ruN qgis-2.18.6-orig/images/icons/mac/browser/CMakeLists.txt qgis-2.18.6/images/icons/mac/browser/CMakeLists.txt
--- qgis-2.18.6-orig/images/icons/mac/browser/CMakeLists.txt	2017-04-16 16:08:50.000000000 +0900
+++ qgis-2.18.6/images/icons/mac/browser/CMakeLists.txt	2017-04-16 16:18:23.000000000 +0900
@@ -6,4 +6,4 @@
 # create alias now, so alias file gets correct icon, delete first if any exist
 SET (BROWSERNAME "QGIS Browser")
 INSTALL (CODE "EXECUTE_PROCESS(COMMAND /usr/bin/find \"$ENV{DESTDIR}${QGIS_INSTALL_PREFIX}\" -name \"${BROWSERNAME}*\" -maxdepth 1 -type f -delete)")
-INSTALL (CODE "EXECUTE_PROCESS(COMMAND /usr/bin/osascript -e \"tell application \\\"Finder\\\" to make alias file to POSIX file \\\"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${QGIS_BIN_DIR}/${BROWSERNAME}.app\\\" at POSIX file \\\"$ENV{DESTDIR}${QGIS_INSTALL_PREFIX}/\\\"\")")
+#INSTALL (CODE "EXECUTE_PROCESS(COMMAND /usr/bin/osascript -e \"tell application \\\"Finder\\\" to make alias file to POSIX file \\\"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${QGIS_BIN_DIR}/${BROWSERNAME}.app\\\" at POSIX file \\\"$ENV{DESTDIR}${QGIS_INSTALL_PREFIX}/\\\"\")")
Binary files qgis-2.18.6-orig/python/plugins/processing/algs/.DS_Store and qgis-2.18.6/python/plugins/processing/algs/.DS_Store differ
diff -ruN qgis-2.18.6-orig/python/plugins/processing/algs/grass/GrassUtils.py qgis-2.18.6/python/plugins/processing/algs/grass/GrassUtils.py
--- qgis-2.18.6-orig/python/plugins/processing/algs/grass/GrassUtils.py	2017-04-16 16:08:51.000000000 +0900
+++ qgis-2.18.6/python/plugins/processing/algs/grass/GrassUtils.py	2017-04-16 16:22:37.000000000 +0900
@@ -84,28 +84,7 @@
 
     @staticmethod
     def grassPath():
-        if not isWindows() and not isMac():
-            return ''
-
-        folder = ProcessingConfig.getSetting(GrassUtils.GRASS_FOLDER) or ''
-        if not os.path.exists(folder):
-            folder = None
-        if folder is None:
-            if isWindows():
-                if "OSGEO4W_ROOT" in os.environ:
-                    testfolder = os.path.join(unicode(os.environ['OSGEO4W_ROOT']), "apps")
-                else:
-                    testfolder = unicode(QgsApplication.prefixPath())
-                testfolder = os.path.join(testfolder, 'grass')
-                if os.path.isdir(testfolder):
-                    for subfolder in os.listdir(testfolder):
-                        if subfolder.startswith('grass-6'):
-                            folder = os.path.join(testfolder, subfolder)
-                            break
-            else:
-                folder = os.path.join(QgsApplication.prefixPath(), 'grass')
-                if not os.path.isdir(folder):
-                    folder = '/Applications/GRASS-6.4.app/Contents/MacOS'
+        folder = '@PREFIX@/Applications/GRASS-6.4.app/Contents/MacOS'
 
         if folder:
             ProcessingConfig.setSettingValue(GrassUtils.GRASS_FOLDER, folder)
@@ -252,26 +231,17 @@
     def prepareGrassExecution(commands):
         env = os.environ.copy()
 
-        if isWindows():
-            GrassUtils.createGrassScript(commands)
-            command = ['cmd.exe', '/C ', GrassUtils.grassScriptFilename()]
-        else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc'
-            env['GISRC'] = gisrc
-            env['GRASS_MESSAGE_FORMAT'] = 'gui'
-            env['GRASS_BATCH_JOB'] = GrassUtils.grassBatchJobFilename()
-            if 'GISBASE' in env:
-                del env['GISBASE']
-            GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
-            os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac():
-                command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
-                    + GrassUtils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass64 ' + GrassUtils.grassMapsetFolder() \
-                    + '/PERMANENT'
-
+        gisrc = userFolder() + os.sep + 'processing.gisrc'
+        env['GISRC'] = gisrc
+        env['GRASS_MESSAGE_FORMAT'] = 'gui'
+        env['GRASS_BATCH_JOB'] = GrassUtils.grassBatchJobFilename()
+        if 'GISBASE' in env:
+            del env['GISBASE']
+        GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
+        os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
+                 | stat.S_IREAD | stat.S_IWRITE)
+        command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
+                + GrassUtils.grassMapsetFolder() + '/PERMANENT'
         return command, env
 
     @staticmethod
diff -ruN qgis-2.18.6-orig/python/plugins/processing/algs/grass7/Grass7Utils.py qgis-2.18.6/python/plugins/processing/algs/grass7/Grass7Utils.py
--- qgis-2.18.6-orig/python/plugins/processing/algs/grass7/Grass7Utils.py	2017-04-16 16:08:51.000000000 +0900
+++ qgis-2.18.6/python/plugins/processing/algs/grass7/Grass7Utils.py	2017-04-28 07:18:52.000000000 +0900
@@ -107,38 +107,7 @@
 
     @staticmethod
     def grassPath():
-        if not isWindows() and not isMac():
-            return ''
-
-        folder = ProcessingConfig.getSetting(Grass7Utils.GRASS_FOLDER) or ''
-        if not os.path.exists(folder):
-            folder = None
-        if folder is None:
-            if isWindows():
-                if "OSGEO4W_ROOT" in os.environ:
-                    testfolder = os.path.join(unicode(os.environ['OSGEO4W_ROOT']), "apps")
-                else:
-                    testfolder = unicode(QgsApplication.prefixPath())
-                testfolder = os.path.join(testfolder, 'grass')
-                if os.path.isdir(testfolder):
-                    for subfolder in os.listdir(testfolder):
-                        if subfolder.startswith('grass-7'):
-                            folder = os.path.join(testfolder, subfolder)
-                            fn = os.path.join(folder, "etc", "VERSIONNUMBER")
-                            if not os.path.isfile(fn):
-                                continue
-
-                            f = open(fn, "r")
-                            Grass7Utils.version = f.read().split(' ')[0]
-                            f.close()
-
-                            major, minor, patch = Grass7Utils.version.split('.')
-                            Grass7Utils.command = "grass{}{}".format(major, minor)
-                            break
-            else:
-                folder = os.path.join(unicode(QgsApplication.prefixPath()), 'grass7')
-                if not os.path.isdir(folder):
-                    folder = '/Applications/GRASS-7.0.app/Contents/MacOS'
+        folder = '@PREFIX@/Applications/GRASS-mac-7.2.app/Contents/MacOS'
 
         return folder or ''
 
@@ -448,7 +417,7 @@
                 if os.path.exists(localPath):
                     helpPath = os.path.abspath(localPath)
             elif isMac():
-                localPath = '/Applications/GRASS-7.0.app/Contents/MacOS/docs/html'
+                localPath = '@PREFIX@/Applications/GRASS-mac-7.2.app/Contents/MacOS/docs/html'
                 if os.path.exists(localPath):
                     helpPath = os.path.abspath(localPath)
             else:
diff -ruN qgis-2.18.6-orig/python/plugins/processing/algs/saga/SagaUtils.py qgis-2.18.6/python/plugins/processing/algs/saga/SagaUtils.py
--- qgis-2.18.6-orig/python/plugins/processing/algs/saga/SagaUtils.py	2017-04-16 16:08:52.000000000 +0900
+++ qgis-2.18.6/python/plugins/processing/algs/saga/SagaUtils.py	2017-04-28 07:25:33.000000000 +0900
@@ -56,24 +56,9 @@
 def findSagaFolder():
     folder = None
     if isMac():
-        testfolder = os.path.join(QgsApplication.prefixPath(), 'bin')
+        testfolder = '@PREFIX@/bin'
         if os.path.exists(os.path.join(testfolder, 'saga_cmd')):
             folder = testfolder
-        else:
-            testfolder = '/usr/local/bin'
-            if os.path.exists(os.path.join(testfolder, 'saga_cmd')):
-                folder = testfolder
-    elif isWindows():
-        folders = []
-        folders.append(os.path.join(os.path.dirname(QgsApplication.prefixPath()), 'saga'))
-        if "OSGEO4W_ROOT" in os.environ:
-            folders.append(os.path.join(str(os.environ['OSGEO4W_ROOT']), "apps", "saga-ltr"))
-            folders.append(os.path.join(str(os.environ['OSGEO4W_ROOT']), "apps", "saga"))
-
-        for testfolder in folders:
-            if os.path.exists(os.path.join(testfolder, 'saga_cmd.exe')):
-                folder = testfolder
-                break
 
     return folder
 
