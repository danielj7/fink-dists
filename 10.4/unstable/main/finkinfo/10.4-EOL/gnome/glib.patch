diff -Naur glib-1.2.10.old/configure glib-1.2.10.new/configure
--- glib-1.2.10.old/configure	Fri Mar 16 00:44:01 2001
+++ glib-1.2.10.new/configure	Sun Jun 23 07:30:06 2002
@@ -6176,9 +6176,10 @@
 #define GLIB_MICRO_VERSION $GLIB_MICRO_VERSION
 "
 
+# Prefer __va_copy, available on both gcc2 and gcc3.
 case xyes in
-x$glib_cv_va_copy)	glib_vacopy='#define G_VA_COPY	va_copy' ;;
 x$glib_cv___va_copy)	glib_vacopy='#define G_VA_COPY	__va_copy' ;;
+x$glib_cv_va_copy)	glib_vacopy='#define G_VA_COPY	va_copy' ;;
 *)			glib_vacopy=''
 esac
 
diff -Nurd -x'*~' glib-1.2.10.orig/glib.h glib-1.2.10/glib.h
--- glib-1.2.10.orig/glib.h	2001-02-26 22:44:38.000000000 -0500
+++ glib-1.2.10/glib.h	2011-05-15 14:24:25.000000000 -0400
@@ -182,10 +182,14 @@
 #  define G_CAN_INLINE 1
 #endif
 #ifdef G_HAVE_INLINE
+#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5400)
+#  define G_INLINE_FUNC static inline
+#else
 #  if defined (__GNUC__) && defined (__STRICT_ANSI__)
 #    undef inline
 #    define inline __inline__
 #  endif
+#endif
 #else /* !G_HAVE_INLINE */
 #  undef inline
 #  if defined (G_HAVE___INLINE__)
--- glib-1.2.10/gstrfuncs.c.orig        2005-02-14 21:59:58.000000000 +0100
+++ glib-1.2.10/gstrfuncs.c     2005-02-14 22:05:56.000000000 +0100
@@ -867,8 +867,7 @@
                   /* beware of positional parameters
                    */
                 case '$':
-                  g_warning (G_GNUC_PRETTY_FUNCTION
-                             "(): unable to handle positional parameters (%%n$)");
+                  g_warning("%s(): unable to handle positional parameters (%%n$)", G_GNUC_PRETTY_FUNCTION);
                   len += 1024; /* try adding some safety padding */
                   break;
 
@@ -1034,8 +1033,7 @@
                   /*          n   .   dddddddddddddddddddddddd   E   +-  eeee */
                   conv_len += 1 + 1 + MAX (24, spec.precision) + 1 + 1 + 4;
                   if (spec.mod_extra_long)
-                    g_warning (G_GNUC_PRETTY_FUNCTION
-                               "(): unable to handle long double, collecting double only");
+                    g_warning("%s(): unable to handle long double, collecting double only", G_GNUC_PRETTY_FUNCTION);
 #ifdef HAVE_LONG_DOUBLE
 #error need to implement special handling for long double
 #endif
@@ -1077,8 +1075,7 @@
                   conv_done = TRUE;
                   if (spec.mod_long)
                     {
-                      g_warning (G_GNUC_PRETTY_FUNCTION
-                                 "(): unable to handle wide char strings");
+                      g_warning("%s(): unable to handle wide char strings", G_GNUC_PRETTY_FUNCTION);
                       len += 1024; /* try adding some safety padding */
                     }
                   break;
@@ -1108,9 +1105,8 @@
                   conv_len += format - spec_start;
                   break;
                 default:
-                  g_warning (G_GNUC_PRETTY_FUNCTION
-                             "(): unable to handle `%c' while parsing format",
-                             c);
+                  g_warning("%s(): unable to handle `%c' while parsing format",
+                             G_GNUC_PRETTY_FUNCTION, c);
                   break;
                 }
               conv_done |= conv_len > 0;
