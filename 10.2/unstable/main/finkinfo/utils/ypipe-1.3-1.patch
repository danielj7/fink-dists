diff -Nurd -x'*~' y.orig/y.1 y/y.1
--- y.orig/y.1	2003-07-06 17:16:54.000000000 -0400
+++ y/y.1	2003-07-06 17:35:59.000000000 -0400
@@ -1,44 +1,44 @@
 .\" $Id: y.1,v 1.3 1996/01/28 06:33:18 mconst Exp $
-.TH Y 1
+.TH YPIPE 1
 .SH NAME
-\fCy\fR \- another pipe fitting
+\fCypipe\fR \- another pipe fitting
 .SH SYNOPSIS
-\fC`\fIsubcommand\fP | y`\fR
+\fC`\fIsubcommand\fP | ypipe`\fR
 .SH DESCRIPTION
-The \fCy\fR utility is used to create systems of pipes and fifos
+The \fCypipe\fR utility is used to create systems of pipes and fifos
 (named pipes) more complicated than standard shell syntax allows.
-A single invocation of \fCy\fR has the following effect: a temporary
+A single invocation of \fCypipe\fR has the following effect: a temporary
 fifo is created; the name of this fifo is printed on standard output;
-and \fCy\fR exits, leaving a child process in the background to copy
+and \fCypipe\fR exits, leaving a child process in the background to copy
 any data received on standard input to the fifo.  The net effect of
-this is that you can use the expression \fC`\fIsubcommand\fP | y`\fR
+this is that you can use the expression \fC`\fIsubcommand\fP | ypipe`\fR
 anywhere on a command line that you would use a filename, and the output of
 \fIsubcommand\fP will be piped appropriately to create the illusion that
-\fC`\fIsubcommand\fP | y`\fR is a file, containing the output of
+\fC`\fIsubcommand\fP | ypipe`\fR is a file, containing the output of
 \fIsubcommand\fR.
 .SH EXAMPLES
-Since \fCy\fR is a simple command, I have given it a simple
+Since \fCypipe\fR is a simple command, I have given it a simple
 description; however, some examples are certainly in order.
 To print all lines of the standard input which contain the name
 of a file in the current directory:
 .nf
 
-	\fCfgrep \-f `ls | y`\fR
+	\fCfgrep \-f `ls | ypipe`\fR
 
 .fi
 To show which users log on or off in the next minute:
 .nf
 
-	\fCdiff `who | y` `sleep 60; who | y`\fR
+	\fCdiff `who | ypipe` `sleep 60; who | ypipe`\fR
 
 .fi
 To change the names of all the files in the current directory to lowercase:
 .nf
 
-	\fCpaste `ls | y` `ls | tr A\-Z a\-z | y` | xargs \-n 2 mv\fR
+	\fCpaste `ls | ypipe` `ls | tr A\-Z a\-z | ypipe` | xargs \-n 2 mv\fR
 .fi
 .SH FILES
-\fC/tmp/y.??????\fR	temporary fifos
+\fC/tmp/ypipe.??????\fR	temporary fifos
 .SH BUGS
 If the temporary fifo is never opened by another program, the background
 \fCy\fR process will stick around indefinitely.
diff -Nurd -x'*~' y.orig/y.c y/y.c
--- y.orig/y.c	2003-07-06 17:16:54.000000000 -0400
+++ y/y.c	2003-07-06 17:32:22.000000000 -0400
@@ -7,8 +7,9 @@
 #include <stdlib.h>
 #include <sys/stat.h>
 #include <sys/errno.h>
+#include <string.h>
 
-#define TEMPMASK "/tmp/y.XXXXXX"	/* the name of our tempfile */
+#define TEMPMASK "/tmp/ypipe.XXXXXX"	/* the name of our tempfile */
 
 void cleanup(int sig);
 
@@ -24,7 +25,7 @@
 	 * a new name and try again.  see the source to mkstemp(3). */
 	while (mkfifo(mktemp(tempfile), 0600) == -1) {
 		if (errno != EEXIST) {
-			perror("y: couldn't create fifo");
+			perror("ypipe: couldn't create fifo");
 			exit(1);
 		}
 		strcpy(tempfile, TEMPMASK);
@@ -39,15 +40,15 @@
 	/* fork a child to do the work */
 	switch (fork()) {
 	case -1:
-		perror("y: couldn't fork");
+		perror("ypipe: couldn't fork");
 		exit(1);
 
 	case 0:
-		fclose(stdout);		/* this is necessary for `cmd | y` */
+		fclose(stdout);		/* this is necessary for `cmd | ypipe` */
 
 		/* this will block until someone else opens the fifo */
 		if ((fp = fopen(tempfile, "w")) == NULL) {
-			perror("y: couldn't open fifo");
+			perror("ypipe: couldn't open fifo");
 			exit(1);	/* not as if anyone cares */
 		}
 
