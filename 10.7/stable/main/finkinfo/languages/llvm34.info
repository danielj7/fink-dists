Info3: <<
Package: llvm34
Version: 3.4.1
Revision: 0b
Description: Modular and reusable compiler
License: BSD
Maintainer: David Fang <fangism@users.sourceforge.net>

BuildDepends: <<
	fink (>= 0.30.0), 
	cmake (>= 2.8.10.2-1), 
# ccache is optional, for accelerating rebuilds
#	ccache,
# polly plug-in needs isl,gmp
	isl (>=0.12.1), 
	gmp5,
# build scripts need python2.7
	python27,
	libncurses5-dev,
# xml and lzma are used to build an uninstalled bin/c-index-test, so bdep-only
	libxml2,
	liblzma5
<<
Depends: %N-shlibs
# no longer uses cloog directly, only indirectly through isl
BuildConflicts: <<
	cloog, cloog-org, cloog-org2
<<

Source: http://llvm.org/releases/%v/llvm-%v.src.tar.gz
Source-MD5: b90697f4de35563ad6c35924defa8dd1
Source2: http://llvm.org/releases/%v/cfe-%v.src.tar.gz
Source2-MD5: c64fdc567383211c9ac212d6f7b69263
Source3: http://llvm.org/releases/3.4/compiler-rt-3.4.src.tar.gz
Source3-MD5: 7938353e3a3bda85733a165e7ac4bb84
Source4: http://llvm.org/releases/3.4/polly-3.4.src.tar.gz
Source4-MD5: 5b2958c9076a584f710423bdca9e6d5d
Source5: http://llvm.org/releases/3.4/libcxx-3.4.src.tar.gz
Source5-MD5: 85c3c4e2233893b037256bf9f7077857
# Source6: http://llvm.org/releases/3.4/test-suite-3.4.src.tar.gz
# Source6-MD5: 
# libcxxabi is not needed, use system's libc++abi or libsupc++
Source7: mirror:sourceforge:fink/openmp-r208472.tar.gz
Source7-MD5: d02067cba2397fe3ad4d8274c12363c3

SourceDirectory: llvm-%v.src
UseMaxBuildJobs: true

PatchFile: %n.patch
PatchFile-MD5: f0666216fb23fa2873e2299fc92fdea4
PatchFile2: %n-clang.patch
PatchFile2-MD5: fd4e1ca160cc22e33f7c6d8fb3d8fe1d
PatchFile3: %n-compiler-rt.patch
PatchFile3-MD5: d99f6660245b55febad43728a8978676
PatchFile4: %n-polly.patch
PatchFile4-MD5: d6deda1584332af388053b19cb9dcc6f
PatchFile5: %n-libcxx.patch
PatchFile5-MD5: 72697e71d0c80073cfa4ceabd9b8d3b1
PatchFile6: llvm34-clang-omp.patch	
PatchFile6-MD5: 1a16e148456889d101bb3026df969e5a
PatchFile7: llvm34-clang-iomp5.patch
PatchFIle7-MD5: 7e4ff3be5b6c64736797b11d824d7365

PatchScript: <<
	#!/bin/sh -ev
	# set -o pipefail || :
	# tarballs have mixed versions b/c some components did not change
	# "brv" = branch version, 3.4
	brv=3.4
	darwin_vers=`uname -r | cut -d. -f1`
	osx_version=`sw_vers -productVersion | cut -d. -f-2`
	# cmake build ties subproject dirs together into one build
	pushd tools
	  ln -f -s ../../cfe-%v.src ./clang
	  ln -f -s ../../polly-$brv ./polly
	popd
	pushd projects
	ln -f -s ../../compiler-rt-$brv compiler-rt
# uncomment the next line to enable test-suite (huge):
#	ln -f -s ../../test-suite-$brv test-suite
	popd

	patch_filter="sed -e s|@FINK_PREFIX@|%p|g -e s|@DARWIN_VERSION@|$darwin_vers|g"
	$patch_filter %{PatchFile} | patch -p1
	pushd tools/clang
	  $patch_filter %{PatchFile2} | patch -p1
	  $patch_filter %{PatchFile6} | patch -p1
	  $patch_filter %{PatchFile7} | patch -p1
	popd
	pushd tools/polly
	  $patch_filter %{PatchFile4} | patch -p1
	popd
	pushd projects/compiler-rt
	  $patch_filter %{PatchFile3} | patch -p1
	popd
	pushd ../libcxx-$brv
	  $patch_filter %{PatchFile5} | patch -p1
	  # add a timeout to libc++ test, in case of hanging
	  mv test/lit.cfg{,.orig}
	  awk '{
if ($1 == "cmd.append(exec_path)") {
	s1 = $0; s2 = $0;
	gsub("exec_path", "'\'gtimeout\''", s1);
	gsub("exec_path", "'\'1m\''", s2);
	print s1; print s2;
}
	print;
}' test/lit.cfg.orig > test/lit.cfg
	popd


	# Do not want -DNDEBUG, cause linker errors (undef symbols)
	# LLVM_ENABLE_ASSERTIONS:ON should have removed -DNDEBUG
	# but it doesn't, so hack it out of cmake file
	sed -i.orig -e '/-DNDEBUG/s|.*|#&|' cmake/modules/HandleLLVMOptions.cmake

	# point hard-coded paths to system g++-4.0.1's C++ includes
	# remove references to g++-4.2.1, never existed in Xcode 2.5
	if test "$darwin_vers" != 10
	then sed -i.orig -e "s|darwin10|darwin$darwin_vers|g" \
		tools/clang/lib/Frontend/InitHeaderSearch.cpp
	fi
	if test ! -d /usr/include/c++/4.0.0
	then sed -i.orig2 -e '/GnuCPlusPlusInclude.*4\.0\.0/,/);/d' \
		tools/clang/lib/Frontend/InitHeaderSearch.cpp
	fi
	if test ! -d /usr/include/c++/4.2.1
	then sed -i.orig2 -e '/GnuCPlusPlusInclude.*4\.2\.1/,/);/d' \
		tools/clang/lib/Frontend/InitHeaderSearch.cpp
	fi

# needed for gcc-fsf-4.x only
#	sed -i.orig2 -e 's|compatibility_version|dylib_&|' tools/clang/tools/libclang/CMakeLists.txt

	# projects/test-suite expects built llvm/clang to have been configured
	# but sadly, we used cmake; don't include $llvmobjdir/Makefile.config
	# TODO: replace cmake build with autoconf'd build
	# sed -i.orig -e 's|HAS_LLVM := 1|HAS_LLVM := 0|' projects/test-suite/Makefile.config.in
<<
CompileScript: <<
	#!/bin/sh -ev
	# define some variables so this script can be easily used outside fink
	build_arch=%m
	fink_root=%p
	version=%v
	# tarballs have mixed versions b/c some components did not change
	brv=3.4
	llvm_abs_srcdir=%b
	libcxx_abs_srcdir=$llvm_abs_srcdir/../libcxx-$brv
	libcxx_rel_srcdir=../../libcxx-$brv
	build_root=$llvm_abs_srcdir/../build
	relsrcdir=../../llvm-%v.src

	COMMON_CMAKE_OPTIONS=( -DBUILD_SHARED_LIBS:BOOL=ON \
		-DLLVM_LIT_ARGS:STRING=-v \
		-DPYTHON_EXECUTABLE:FILEPATH=$fink_root/bin/python2.7 )
	LLVM_CMAKE_OPTIONS=( -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
		-DCMAKE_OSX_SYSROOT:STRING=/ \
		-DCMAKE_OSX_DEPLOYMENT_TARGET:STRING= )

	# just always build these archs
	case "$build_arch" in
	ppc*|powerpc*) TARGET_ARCHS="PowerPC" ;;
	i386*|x86*) TARGET_ARCHS="X86" ;;
	esac
	echo "Target option: $TARGET_ARCHS"
	# to enable cross-compiling to other archs, uncomment the following:
	# TARGET_ARCHS="X86;PowerPC;ARM"
	# TARGET_ARCHS="all"
	LLVM_CMAKE_OPTIONS=( "${LLVM_CMAKE_OPTIONS[@]}" -DLLVM_TARGETS_TO_BUILD="$TARGET_ARCHS" )

	# automatically use ccache if detected
	# ccache recommended, but not required
	# comment-out the next line if ccache is not desired
	test -x $p/bin/ccache && CCACHE=ccache || CCACHE=
	export CCACHE

	wrap_compiler() {
	cat >$2 <<EOF
#!/bin/sh
exec \$CCACHE $1 "\$@"
EOF
	chmod +x $2
	}

	# set up some possible stage-1 compilers
	fsfgccv=4.8
	# wrap ccache into single cmd b/c cmake can't handle "ccache g++"
	mkdir ../opt-bin
	pushd ../opt-bin
	  wrap_compiler gcc ccgcc
	  wrap_compiler g++ ccg++
	  wrap_compiler gcc-4.2 ccgcc-4.2
	  wrap_compiler g++-4.2 ccg++-4.2
	  wrap_compiler gcc-fsf-$fsfgccv ccgcc-$fsfgccv
	  wrap_compiler g++-fsf-$fsfgccv ccg++-$fsfgccv
	# also setup bootstrap stage compilers
	# yes, ccache 3.1 supports compiler binary hashing
	  for s in 1 2 3
	  do
	    wrap_compiler st$s-clang cc-st$s-clang
	    wrap_compiler st$s-clang++ cc-st$s-clang++
	  done

	# use system make for testsuite to pass
	  ln -s /usr/bin/make make

	  export PATH=`pwd`:$PATH
	popd

	# stage 1 compiler (try to use ccache if available)
	# gcc-4.0.1 FAILS on darwin9
	osx_version=`sw_vers -productVersion | cut -d. -f-2`
	darwin_vers=`uname -r | cut -d. -f1`
	case "$darwin_vers" in
	8)
	  export CC=ccgcc
	  export CXX=ccg++
#	  export CC=ccgcc-$fsfgccv
#	  export CXX=ccg++-$fsfgccv
	  ;;
	9)
	  export CC=ccgcc-4.2
	  export CXX=ccg++-4.2
	  ;;
	*)
	  export CC=ccgcc
	  export CXX=ccg++
	  ;;
	# on darwin11+, fink redirects gcc/g++ to clang/clang++ via PATH
	esac

	# gcc-4.0.1 workaround for units failing -O1 and higher, fallback to -O0
	# TODO: better automate compiler options
	compile_lib_unit() {
		test $# = 3 || { echo "Error calling compile_lib_unit." ; exit 1; }
		builddir=$PWD
		# $1 = source lib dir
		# $2 = source file path (relative to $1)
		# $3 = lib name
		libdir=$1
		srcfile=$1/$2
		lib=LLVM$3
		subdir=`dirname $srcfile`
		target=CMakeFiles/$lib.dir/$2.o
		if test ! -f $target
		then
		echo "Compiling $srcfile to $target"
		pushd $libdir
		# mkdir -p `dirname $target`
		$CXX \
		-DLLVMAnalysis_EXPORTS -D_DEBUG \
		-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS \
		-fno-common -fPIC \
		-fvisibility-inlines-hidden \
		-Wall -W -Wno-unused-parameter -Wwrite-strings -Wno-missing-field-initializers \
		-pedantic -Wno-long-long -Wno-uninitialized -Wnon-virtual-dtor -fno-rtti \
		-fPIC \
		-I$builddir/$subdir \
		-I$llvm_abs_srcdir/$subdir \
		-I$builddir/include \
		-I$llvm_abs_srcdir/include \
		-I$llvm_abs_srcdir/tools/polly/include \
		-fno-exceptions \
		-o $target \
		-c $llvm_abs_srcdir/$srcfile
		# -g
		popd
		fi
	}

	# more of the same workaround, only needed for gcc-4.0
	recompile_known_units() {
	if test "$darwin_vers" -lt 10
	then
		echo "Recompiling known problematic units with -O0."
		for f in \
		lib/Analysis:{ScalarEvolution{,Expander},LoopPass}.cpp:Analysis \
		lib/Transforms/Utils:{BreakCriticalEdges,LoopUnroll,LoopSimplify}.cpp:TransformUtils \
		lib/Transforms/Scalar:{LoopInstSimplify,LoopRotation,LoopUnswitch}.cpp:ScalarOpts \
		lib/Transforms/Vectorize:LoopVectorize.cpp:Vectorize \
		lib/CodeGen:{MachineBasicBlock,MachineBlockPlacement,MachineTraceMetrics,PHIElimination}.cpp:CodeGen \
		tools/polly/lib:CodeGen/LoopGenerators.cpp:Polly \

		do
			saveIFS=$IFS
			IFS=:
			set -- $f
			dir=$1
			src=$2
			lib=$3
			IFS=$saveIFS
			# echo "$src -> $lib"
			compile_lib_unit $dir $src $lib
		done
	fi
	}

	clang_arch=$build_arch
	cxxabi_arch=$build_arch
	case "$build_arch" in
	powerpc) clang_arch=ppc ;;
	powerpc64) clang_arch=ppc64 ;;
	i386) cxxabi_arch=i686 ;;
	esac
	# script to assemble/link in missing .S units into libclang_rt
	asm_link_clang_rt() {
		# $CC already set
		arch=$clang_arch
		builddir=projects/compiler-rt/lib
		crtsrcdir=$llvm_abs_srcdir/projects/compiler-rt
		objdir=CMakeFiles/clang_rt.$arch.dir/$arch
		libdir=../../../lib/clang/$version/lib/darwin
		libcrt=$libdir/libclang_rt.$arch.a
		. $crtsrcdir/lib/link-asm-libclang_rt.sh
		assemble_clang_rt
	}

	# need to fix llvm-config to not point to build-dir, but instead
	# where libc++ headers and libs will be installed.
	# This is needed because llvm3x-shlibs links to the built
	# libc++ in the bootstrap process.
	# Keep this path in sync with libcxx_install_dir elsewhere in this file.
	fix_llvm_config_build_variables() {
		sed -i.orig -e '/LLVM_CXXFLAGS/s|%b[^ ]*/include|%p/include/c++/v1|' \
			-e '/LLVM_LDFLAGS/s|%b[^ ]*/lib|%p/lib/c++|' \
			tools/llvm-config/BuildVariables.inc
	}

	build_type=Release
#	build_type=RelWithDebInfo
	# do not let cmake auto-detect OSX_SYSROOT
	LLVM_CMAKE_OPTIONS=( "${LLVM_CMAKE_OPTIONS[@]}" \
		-DCMAKE_INSTALL_PREFIX:PATH=$fink_root/opt/llvm-$brv \
		-DCMAKE_BUILD_TYPE:STRING=$build_type )

	STAGE1_CMAKE_OPTIONS=( -DCMAKE_C_FLAGS=-fno-common -DCMAKE_CXX_FLAGS=-fno-common )
	# trying to disable optimization flags on non-trustworthy compilers
	# worked around in recompile_known_units(), and now using RelWithDebInfo
	ccvers=`$CXX -v 2>&1 | tail -n 1 | cut -d\  -f3`
	if test $ccvers = 4.0.1
	then STAGE1_CMAKE_OPTIONS=( "${STAGE1_CMAKE_OPTIONS[@]}" \
		-DCMAKE_C_FLAGS_RELEASE:STRING=-O2 \
		-DCMAKE_CXX_FLAGS_RELEASE:STRING=-O2 )
	fi
	# else default to -O3

	echo "######## START of BOOTSTRAP STAGE 1: building llvm/clang with the system compiler"
	# wd: %b
	mkdir -p ../build/stage1
	pushd ../build/stage1
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LLVM_CMAKE_OPTIONS[@]} ${STAGE1_CMAKE_OPTIONS[@]}"
	# Technically, we only need the native back-end in stage 1...
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LLVM_CMAKE_OPTIONS[@]}" "${STAGE1_CMAKE_OPTIONS[@]}" $relsrcdir
	# kill -DNDEBUG with fire
	sed -i.orig -e 's| -DNDEBUG||g' CMakeCache.txt
	# fix_llvm_config_build_variables # not needed b/c not using libc++ yet
	# first make fails, but we have to run it first and then fix some deps
	make -k || recompile_known_units && make || make -j1 VERBOSE=1
	asm_link_clang_rt
	make
	# tests hardcode the .dylib extension for modules
	pushd lib
	  ln -s BugpointPasses.{so,dylib}
	  ln -s LLVMPolly.{so,dylib}
	  ln -s LLVMHello.{so,dylib}
	popd
	cd ..
	ln -s stage1 last
	popd
	# wd: %b
	# link stage1 compilers into opt-bin for next stage
	pushd ../opt-bin
	  ln -s ../build/stage1/bin/clang st1-clang
	  ln -s ../build/stage1/bin/clang++ st1-clang++
	popd
	# wd: %b
	# create some empty test logs, which we may overwrite and install to docs
	for f in ../build/stage1/{llvm,clang,polly,compiler-rt}-$version-check.log
	do echo "Stage 1 Tests were not run." > $f
	done
	echo "######## END of BOOTSTRAP STAGE 1: built llvm/clang with the system compiler"

	# LDFLAGS influences cmake, aggregate and re-export
	FINK_LDFLAGS=( "$LDFLAGS" )
	# beyond stage1, use the following flags for both libc++ and llvm
	STAGE2_COMMON_LDFLAGS=()
	# darwin8: stage2+ needs odcctools
	if test $darwin_vers -le 8
	then STAGE2_COMMON_LDFLAGS=( "-B$fink_root/lib/odcctools/bin" )
	fi

	echo "######## START of BOOTSTRAP STAGE 1.5: building libc++ with stage 1 clang++"
	export CCACHE_COMPILERCHECK=content
	export CC=cc-st1-clang
	export CXX=cc-st1-clang++
	LIBCXX_CMAKE_OPTIONS=()
	case "$build_arch" in
	# PowerPC is not ready for -integrated-as yet
	powerpc*) flags="$flags -no-integrated-as" ;;
	esac
	if test $darwin_vers -le 10
	then flags="$flags -DDARWIN_LIBSUPCXX=$darwin_vers"
		abi=libsupc++
		if test -f /usr/include/c++/4.2.1/cxxabi.h
		then sys_cxxabi_root=/usr/include/c++/4.2.1
		elif test -f /usr/include/c++/4.0.0/cxxabi.h
		then sys_cxxabi_root=/usr/include/c++/4.0.0
		fi
		abi_includes="$sys_cxxabi_root;$sys_cxxabi_root/$cxxabi_arch-apple-darwin$darwin_vers"
		LIBCXX_CMAKE_OPTIONS=( "${LIBCXX_CMAKE_OPTIONS[@]}" \
			-DLIBCXX_LIBSUPCXX_INCLUDE_PATHS="$abi_includes" )
	else	abi=libcxxabi
		abi_includes=/usr/include
		LIBCXX_CMAKE_OPTIONS=( "${LIBCXX_CMAKE_OPTIONS[@]}" \
			-DLIBCXX_LIBCXXABI_INCLUDE_PATHS="$abi_includes" )
	fi
	# on darwin10, build FAT
	if test $darwin_vers = 10
	then flags="$flags -arch i386 -arch x86_64"
	fi
	LIBCXX_CMAKE_OPTIONS=( "${LIBCXX_CMAKE_OPTIONS[@]}" \
		-DCMAKE_INSTALL_PREFIX=$fink_root \
		-DLIBCXX_ENABLE_ASSERTIONS:BOOL=ON \
		-DCMAKE_CXX_FLAGS="$flags" \
		-DLIBCXX_CXX_ABI="$abi" \
		-DLIT_EXECUTABLE=$build_root/last/bin/llvm-lit \
		-DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=$osx_version \
		-DCMAKE_OSX_ARCHITECTURES="$clang_arch" )

	mkdir -p ../build/stage1.5
	pushd ../build/stage1.5
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LIBCXX_CMAKE_OPTIONS[@]}"
	export LDFLAGS="${STAGE2_COMMON_LDFLAGS[@]} ${FINK_LDFLAGS[@]}"
	echo "LDFLAGS = $LDFLAGS"
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LIBCXX_CMAKE_OPTIONS[@]}" $libcxx_rel_srcdir
	make
	cd ..
	ln -s stage1.5 last-libcxx
	popd
	echo "Stage 1.5 Tests were not run." > ../build/stage1.5/libcxx-$version-check.log
	echo "######## END of BOOTSTRAP STAGE 1.5: built libc++ with stage 1 clang++"
	libcxx_stage_dir=$build_root/last-libcxx/lib

	# don't bootstrap on powerpc-darwinX until all codegen issues fixed
	test "$build_arch" != "powerpc" || exit 0
	test "$darwin_vers" != 8 || exit 0
#	If you do not wish to bootstrap, just uncomment the next line:
#	exit

	echo "######## START of BOOTSTRAP STAGE 2: building llvm/clang with stage 1 clang"
	# reuse CC and CXX from stage 1.5
	STAGE2_CMAKE_OPTIONS=( \
		-DCMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -cxx-isystem $libcxx_abs_srcdir/include" )
	STAGE2_LLVM_LDFLAGS=( "-L$libcxx_stage_dir" )
# if not bootstrapping libc++, use system C++ library (buried in XCode)
#	if test "$darwin_vers" -ge 13
#	then
#		clang_path=`xcrun -find clang`
#		cxx_incdir=`dirname $clang_path`/../lib/c++/v1
#		STAGE2_CMAKE_OPTIONS=( "${STAGE2_CMAKE_OPTIONS[@]}" \
#			-DCMAKE_CXX_FLAGS:STRING="-cxx-isystem $cxx_incdir" )
#	fi
	mkdir -p ../build/stage2
	pushd ../build/stage2
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LLVM_CMAKE_OPTIONS[@]} ${STAGE2_CMAKE_OPTIONS[@]}"
	export LDFLAGS="${STAGE2_COMMON_LDFLAGS[@]} ${STAGE2_LLVM_LDFLAGS[@]} ${FINK_LDFLAGS[@]}"
	echo "LDFLAGS = $LDFLAGS"
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LLVM_CMAKE_OPTIONS[@]}" "${STAGE2_CMAKE_OPTIONS[@]}" $relsrcdir
	fix_llvm_config_build_variables
	make -k || make VERBOSE=1
	asm_link_clang_rt
	make
	pushd lib
	  ln -s BugpointPasses.{so,dylib}
	  ln -s LLVMPolly.{so,dylib}
	  ln -s LLVMHello.{so,dylib}
	popd
	cd ..
	rm -f last
	ln -s stage2 last
	popd
	# wd: %b
	pushd ../opt-bin
	  ln -s ../build/stage2/bin/clang st2-clang
	  ln -s ../build/stage2/bin/clang++ st2-clang++
	popd
	# wd: %b
	for f in ../build/stage2/{llvm,clang,polly,compiler-rt}-$version-check.log
	do echo "Stage 2 Tests were not run." > $f
	done
	echo "######## END of BOOTSTRAP STAGE 2: built llvm/clang with stage 1 clang"

	echo "######## START of BOOTSTRAP STAGE 2.5: building libc++ with stage 2 clang++"
	export CC=cc-st2-clang
	export CXX=cc-st2-clang++
	export CCACHE_DISABLE=1
	mkdir -p ../build/stage2.5
	pushd ../build/stage2.5
	# use same flags as stage1.5
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LIBCXX_CMAKE_OPTIONS[@]}"
	export LDFLAGS="${STAGE2_COMMON_LDFLAGS[@]} ${FINK_LDFLAGS[@]}"
	echo "LDFLAGS = $LDFLAGS"
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LIBCXX_CMAKE_OPTIONS[@]}" $libcxx_rel_srcdir
	make
	# link over to stage1 so built clang can use this
	cd ..
	rm -f last-libcxx
	ln -s stage2.5 last-libcxx
	popd
	echo "Stage 2.5 Tests were not run." > ../build/stage2.5/libcxx-$version-check.log
	echo "######## END of BOOTSTRAP STAGE 2.5: built libc++ with stage 2 clang++"
	# below, object compare stage 1.5 vs. 2.5

	echo "######## START of BOOTSTRAP STAGE 3: building llvm/clang with stage 2 clang"
	# reuse CC and CXX from stage 2.5
	# yes, reuse STAGE2_CMAKE_OPTIONS in stage 3
	mkdir -p ../build/stage3
	pushd ../build/stage3
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LLVM_CMAKE_OPTIONS[@]} ${STAGE2_CMAKE_OPTIONS[@]}"
	export LDFLAGS="${STAGE2_COMMON_LDFLAGS[@]} ${STAGE2_LLVM_LDFLAGS[@]} ${FINK_LDFLAGS[@]}"
	echo "LDFLAGS = $LDFLAGS"
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LLVM_CMAKE_OPTIONS[@]}" "${STAGE2_CMAKE_OPTIONS[@]}" $relsrcdir
	fix_llvm_config_build_variables
	make -k || make VERBOSE=1
	asm_link_clang_rt
	make
	pushd lib
	  ln -s BugpointPasses.{so,dylib}
	  ln -s LLVMPolly.{so,dylib}
	  ln -s LLVMHello.{so,dylib}
	popd
	cd ..
	rm -f last
	ln -s stage3 last
	popd
	# wd: %b
	pushd ../opt-bin
	  ln -s ../build/stage3/bin/clang st3-clang
	  ln -s ../build/stage3/bin/clang++ st3-clang++
	popd
	# wd: %b
	for f in ../build/stage3/{llvm,clang,polly,compiler-rt}-$version-check.log
	do echo "Stage 3 Tests were not run." > $f
	done
	echo "######## END of BOOTSTRAP STAGE 3: built llvm/clang with stage 2 clang"

# bootstrap comparison routines
	diff_size() {
	# return 1 if non-zero diffs
	if test -s "$1" ; then echo "    $1 contains differences" ; return 1; fi
	}

	resolve_path_diffs() {
	# replace path strings between compared files and recheck diffs
	# $1 - file1
	# $2 - file2
	# $3 - substr to match
	# $4 - substr replacement
	# return exit status of last diff
	  sed -e "s|$3|$4|g" "$1" | tee $1.repl | diff -u - $2 > $2.repl-diff || :
	  diff_size $2.repl-diff && echo "    differences resolved."
	}

	resolve_obj_diffs() {
	# analyzes results in a 'compare' directory
	# $1 - dir1
	# $2 - dir2
	# $3 - common object file (.o)
	# return 1 if differences remain unresolved
	reserr=0
	set +o verbose
	mkdir -p `dirname compare/$f`
	b1=`echo $1 | cut -d/ -f1`
	b2=`echo $2 | cut -d/ -f1`
	set -o verbose
	# sequence of examinations
	# nm symbol list
	  nm -p $b1/$f | sed 1d > compare/$f.nm.1
	  nm -p $b2/$f | sed 1d > compare/$f.nm.2
	  diff -u compare/$f.nm.{1,2} > compare/$f.nm.diff ||
	  diff_size compare/$f.nm.diff ||
	  { echo "    Unresolved nm diffs." ; reserr=1 ;}
	# strings
	  strings $b1/$f > compare/$f.str.1
	  strings $b2/$f > compare/$f.str.2
	  diff -u compare/$f.str.{1,2} > compare/$f.str.diff ||
	  diff_size compare/$f.str.diff ||
	  resolve_path_diffs compare/$f.str.{1,2} $1 $2 ||
	  { echo "    Unresolved string diffs." ; reserr=1 ;}
	# disassemble
	  otool -tV $b1/$f | sed 1d > compare/$f.dis.1
	  otool -tV $b2/$f | sed 1d > compare/$f.dis.2
	  diff -u compare/$f.dis.{1,2} > compare/$f.dis.diff ||
	  diff_size compare/$f.dis.diff ||
	  resolve_path_diffs compare/$f.dis.{1,2} $1 $2 ||
	  { echo "    Unresolved disasm diffs." ; reserr=1 ;}
	return "$reserr"
	}

	diff_obj_dir_r () {
	# recursively descend directories in parallel
	# accumulate diffs in array
	# $1 is reference dir
	# $2 is target dir
	# return diffs in array (appended)
	for f in $2/*
	do
	  o=`basename $f`
	  if test -d $f
	  then diff_obj_dir_r $1/$o $f
	  else
	    r=`echo "$f" | cut -d/ -f2-`
	    case $f in
	    *.s.tmp.o) ;;
	    *.o|*.inc|*.h)
	      if test -f $1/$o
	      then diff -q $1/$o $f && echo "matches: $r" || diffs=("${diffs[@]}" $r)
	      fi ;;
	    esac
	  fi
	done
	}

	diff_obj_dir () {
	set +o verbose
	diff_obj_dir_r $1 $2
	set -o verbose
	}

	# pwd: %b
	pushd ../build
	  echo "######## Comparing objects from stage 1.5 vs. 2.5 libc++"
	  diffs=()
	  diff_obj_dir stage{1,2}.5
	  do_stage35=0
	  for f in "${diffs[@]}"
	  do echo "  $f -- not OK" ; do_stage35=1
	  done
	  # don't bother analyzing diffs
	popd

	export CC=cc-st3-clang
	export CXX=cc-st3-clang++
	export CCACHE_DISABLE=1
if test "$do_stage35" = 1
then
	echo "######## START of BOOTSTRAP STAGE 3.5: building libc++ with stage 2 clang++"
	mkdir -p ../build/stage3.5
	pushd ../build/stage3.5
	# use same flags as stage1.5
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LIBCXX_CMAKE_OPTIONS[@]}"
	export LDFLAGS="${STAGE2_COMMON_LDFLAGS[@]} ${FINK_LDFLAGS[@]}"
	echo "LDFLAGS = $LDFLAGS"
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LIBCXX_CMAKE_OPTIONS[@]}" $libcxx_rel_srcdir
	make
	# link over to stage1 so built clang can use this
	cd ..
	rm -f last-libcxx
	ln -s stage3.5 last-libcxx
	popd
	echo "Stage 3.5 Tests were not run." > ../build/stage3.5/libcxx-$version-check.log
	echo "######## END of BOOTSTRAP STAGE 3.5: built libc++ with stage 3 clang++"
	pushd ../build
	  echo "######## Comparing objects from stage 2.5 vs. 3.5 libc++"
	  diffs=()
	  diff_obj_dir stage{2,3}.5
	  libcxx_err=0
	  for f in "${diffs[@]}"
	  do echo "  $f -- not OK" ; libcxx_err=1
	  done
	  # don't bother analyzing diffs
	popd
	test "$libcxx_err" = 0
else
	# libc++ already converged, no need to recompile it
	echo "######## Re-using STAGE 2.5 libc++ as STAGE 3.5"
	pushd ../build
	  ln -s stage{2,3}.5
	  rm -f last-libcxx
	  ln -s stage3.5 last-libcxx
	popd
fi

	llvm_stage_diff () {
	# compare stage N to N+1, analyzed results in 'compare' dir
	# $1 - dir1
	# $2 - dir2
	# return 1 if there are unresolved_diffs(), accumulated
	diffs=()
	diff_obj_dir $1 $2
	unresolved_diffs=()
	err=0
	echo "Objects that differ ($1 vs. $2):"
	for f in "${diffs[@]}"
	do echo "  examining: $f"
	  mkdir -p `dirname compare/$f`
	  case $f in
	  *.inc|*.h|*.gen) diff -u {$1,$2}/$f > compare/$f.diff ||
	    diff_size compare/$f.diff ||
	    resolve_path_diffs {$1,$2}/$f $1 $2 || err=1 ;;
	  tools/llvm-config/CMakeFiles/llvm-config.dir/llvm-config.cpp.o)
	    echo "  $f -- OK: asm sensitive to \$builddir" ;;
	  lib/Support/CMakeFiles/LLVMSupport.dir/CommandLine.cpp.o)
	    echo "  $f -- OK: __DATE__, __TIME__ cpp macros in strings" ;;
	  *.o) resolve_obj_diffs $1 $2 $f || err=1 ;;
	  esac
	  test "$err" = 0 || unresolved_diffs=("${unresolved_diffs[@]}" $f)
	done
	if test "$err" = 1
	then echo "UNRESOLVED DIFFS ($1 vs. $2):"
	  for f in "${unresolved_diffs[@]}"
	  do echo "  $f"
	  done
	  return $err
	fi
	}

	pushd ../build
	  echo "######## Comparing objects from stage 2 vs. 3 of LLVM/Clang"
	  do_stage4=0
	  llvm_stage_diff stage{2,3} || do_stage4=1
	  mv compare{,2v3}
	popd

if test "$do_stage4" != 1
	pushd %b/../openmp-r208472/runtime
	make -j1  compiler=clang
	OPENMP_DIR=`ls tmp | grep dyn`
	pushd tmp/$OPENMP_DIR
	install -m 755 libiomp5.dylib %b/../build/stage3/lib
	install -m 644 omp.h %b/../build/stage3/lib/clang/%v/include
	popd
	popd
then echo "######## 3-STAGE BOOTSTRAP of llvm/clang PASSED"
exit
else
	echo "######## START of BOOTSTRAP STAGE 4: building llvm/clang with stage 3 clang"
	# reuse CC and CXX from stage 3.5
	# yes, reuse STAGE2_CMAKE_OPTIONS in stage 4
	mkdir -p ../build/stage4
	pushd ../build/stage4
	echo "LLVM_CMAKE_OPTIONS = ${COMMON_CMAKE_OPTIONS[@]} ${LLVM_CMAKE_OPTIONS[@]} ${STAGE2_CMAKE_OPTIONS[@]}"
	export LDFLAGS="${STAGE2_COMMON_LDFLAGS[@]} ${STAGE2_LLVM_LDFLAGS[@]} ${FINK_LDFLAGS[@]}"
	echo "LDFLAGS = $LDFLAGS"
	cmake "${COMMON_CMAKE_OPTIONS[@]}" "${LLVM_CMAKE_OPTIONS[@]}" "${STAGE2_CMAKE_OPTIONS[@]}" $relsrcdir
	fix_llvm_config_build_variables
	make -k || make VERBOSE=1
	asm_link_clang_rt
	make
	pushd lib
	  ln -s BugpointPasses.{so,dylib}
	  ln -s LLVMPolly.{so,dylib}
	  ln -s LLVMHello.{so,dylib}
	popd
	cd ..
	rm -f last
	ln -s stage4 last
	popd
	# wd: %b
	for f in ../build/stage4/{llvm,clang,polly,compiler-rt}-$version-check.log
	do echo "Stage 4 Tests were not run." > $f
	done
	echo "######## END of BOOTSTRAP STAGE 4: built llvm/clang with stage 3 clang"
	pushd ../build
	  echo "######## Comparing objects from stage 3 vs. 4 of LLVM/Clang"
	  rejoice=1
	  llvm_stage_diff stage{3,4} || rejoice=0
	  mv compare{,3v4}
	popd
	if test "$rejoice" = 1
	then
	        pushd %b/../openmp-r208472/runtime
	        make -j1  compiler=clang
		OPENMP_DIR=`ls tmp | grep dyn`
		pushd tmp/$OPENMP_DIR
		install -m 755 libiomp5.dylib %b/../build/stage4/lib
		install -m 644 omp.h %b/../build/stage4/lib/clang/%v/include
		popd
		popd

		echo "######## 4-STAGE BOOTSTRAP of llvm/clang PASSED" ; exit
	else echo "######## 4-STAGE BOOTSTRAP of llvm/clang FAILED" ; exit 1
	fi
fi
<<
InfoTest: <<
# need bash because /bin/sh 2.0 on darwin8 is missing support for pipefail
# coreutils for gtimeout for tests, see %N.patch:utils/lit/lit/TestRunner.py
	TestDepends: <<
		# only darwin8 needs fink's bash
	#	bash (>= 3.0),
		coreutils
	<<
 	TestScript: <<
	#!/bin/sh -ev
	darwin_vers=`uname -r | cut -d. -f1`

	# test suite requires newer bash than /bin/bash 2.0 for pipefail
	# test the pipefail option of this shell first
	set -o pipefail || {
	sed -i.orig -e "/bashPath = None/s|None|'%p/bin/bash'|" utils/lit/lit/LitConfig.py
	test -x %p/bin/bash || { echo "Error: Fink-built bash >= 3.0 required for pipefail!" ; exit 1; }
	}

	# need path to bootstrapping compiler
	pushd ../opt-bin
	  export PATH=`pwd`:$PATH
	popd
	cd ../build/last

#	echo "******** Running included LLVM and clang tests ... ********"
#	{ make -k TESTARGS=-v check-all 2>&1 || : ;} | tee llvm-clang-%v-check.log

	echo "******** Running included LLVM tests ... ********"
	{ make -k TESTARGS=-v check 2>&1 || : ;} | tee llvm-%v-check.log

	echo "******** Running included clang tests ... ********"
	{ make -k TESTARGS=-v check-clang 2>&1 || : ;} | tee clang-%v-check.log

	echo "******** Running included polly tests ... ********"
	( cd tools/polly/test ; make -k TESTARGS=-v polly-test 2>&1 || : ;) | tee polly-%v-check.log

	echo "******** Running included compiler-rt/libclang_rt tests ... ********"
	CC=`grep "CMAKE_C_COMPILER:FILEPATH" CMakeCache.txt | cut -d= -f2`
	( mkdir projects/compiler-rt/test
	cd projects/compiler-rt/test
	syslib="-lSystem"
	clang_arch=%m
	case "%m" in
	powerpc) clang_arch=ppc ;;
	powerpc64) clang_arch=ppc64 ;;
	esac
	test $darwin_vers -gt 10 || syslib="$syslib -lSystemStubs"
	cat >Makefile <<EOF
ARCH = $clang_arch
OS = darwin
CC = $CC
LIBS = $syslib
LLVM_SRCDIR = %b
VERSION = %v
include \$(LLVM_SRCDIR)/projects/compiler-rt/test/Unit/test.mk
EOF
	make -k && make check 2>&1 || : ;) | tee compiler-rt-%v-check.log

	echo "******** Running included libc++ tests ... ********"
	pushd ../last-libcxx
	  ( case $darwin_vers in
	    # we built FAT, but must test each arch separately
	    10) sed -e '/cxx_flags/s| -arch x86_64||' test/lit.site.cfg > test/lit.site.cfg.32
	      sed -e '/cxx_flags/s| -arch i386||' test/lit.site.cfg > test/lit.site.cfg.64
	      echo "******** Checking -arch i386 (32b):"
	      mv test/lit.site.cfg{,.orig}
	      cp -f test/lit.site.cfg{.32,}
	      make -k check-libcxx || :
	      echo "******** Checking -arch x86_64 (64b):"
	      cp -f test/lit.site.cfg{.64,}
	      make -k check-libcxx || : ;;
	    # everything else: check single arch
	    *) make -k check-libcxx || : ;;
	    esac
	  ) 2>&1 | tee libcxx-%v-check.log
	popd

#	echo "******** Running massive test-suite ... ********"
#	( cd projects/test-suite ; make -k 2>&1 || : ;) | tee test-suite-%v-check.log
	<<
	TestSuiteSize: medium
<<
InstallScript: <<
	#!/bin/sh -ev
	# "brv" = branch version, 3.4
	brv=3.4
	pushd ../build/last
	  make -j1 install/fast DESTDIR="%d"
	  # install most recent stage libc++
	  cd ../last-libcxx
	  make install DESTDIR="%d"
	popd
	# there seems to be an extraneous include/c++/v1/c++/v1 dir
	pushd %i/include/c++/v1/
	  rm -rf c++ CMakeFiles
	  rm -f cmake* Makefile
	popd
# push libc++ libraries down a directory so they will not be found by default
# by user nor fink.  Force user to opt-in via -L%p/lib/c++.
# By default, clang++ will use system's libc++.
	libcxx_install_dir=%p/lib/c++
	pushd %i/lib
	  mkdir c++
	  mv libc++* c++/
	  # fix install_name below
	popd
	# there seems to be an extra copy of cxxabi.h, identical to system's
	# remove if identical?

	# boilerplate script for fixing post-cmake-install install_names
	# expect to find in lib/
	# libc++ will be in %p/lib and %p/include/c++/v1
	for stem in opt/llvm-$brv lib/c++
	do
	  iprefix=%i/$stem
	  prefix=%p/$stem
	  pushd $iprefix
	  for f in `find . -name '*.dylib'` `find . -name '*.so'`
	  do
		if test ! -L $f
		then
		dir=`dirname $f | sed -e 's|^\.\/||'`
                b=`basename $f`
		pushd $dir 2> /dev/null
		if test "$dir" = "."
		then iname="$prefix/$b"
		else iname="$prefix/$dir/$b"
		fi
		install_name_tool -id "$iname" "$b"
		case $f in
		*.dylib) filt="sed 1,2d" ;;
		*.so) filt="sed 1d" ;;
		esac
		deplibs=`otool -L $b | $filt | awk '{print $1;}' | tr '\n' ' '`
		for d in $deplibs
		do
		  # prefix absolute paths to llvm/clang's lib installation
		  # caution: assumes dependent libraries are in same dir
		  case $d in
	  # NOTE: libc++ shared library lives in different prefix!
		  *stage*/lib/libc++*)
		    install_name_tool -change "$d" "$libcxx_install_dir/libc++.1.0.dylib" $b ;;
		  /*) ;;
		  *) install_name_tool -change "$d" "$prefix/lib/$d" $b ;;
		  esac
		done
		popd 2> /dev/null
		fi
	  done
	  popd
	done
	# for binaries and plug-in modules
	for stem in opt/llvm-$brv
	do
	  iprefix=%i/$stem
	  prefix=%p/$stem
	  pushd $iprefix/bin
	  for f in *
	  do
		if test ! -L $f
		then
		deplibs=`otool -L $f | sed 1d | awk '{print $1;}' | tr '\n' ' '`
		for d in $deplibs
		do
		  # consider substituting with relative @executable_path/../lib ?
		  case $d in
	# NOTE: libc++ shared library lives in different prefix!
		  *stage*/lib/libc++*)
		    install_name_tool -change "$d" "$libcxx_install_dir/libc++.1.0.dylib" $f ;;
		  /*) ;;
		  @*) ;;
		  *) install_name_tool -change "$d" "$prefix/lib/$d" $f ;;
		  esac
		done
		fi
	  done
	  popd
	done

	# need symlink /usr/bin/ld so libLTO.dylib can be found relative to @executable_path
	iprefix=%i/opt/llvm-$brv
	prefix=%p/opt/llvm-$brv
	pushd $iprefix/bin
		test -x /usr/bin/ld && ln -s /usr/bin/ld .
	popd

# don't symlink libc++'s include/lib to clang's directories
# but rather require user to opt-in to use built libc++ over system's

	# documentation
	# pwd: llvm srcdir
	docdir=$prefix/share/doc
	idocdir=$iprefix/share/doc
	mkdir -p $idocdir
	cp -R docs $idocdir/llvm
	cp -R tools/clang/docs $idocdir/clang
	cp -R tools/clang/www $idocdir/clang-html
	cp -R tools/polly/www $idocdir/polly-html
	mkdir -p $idocdir/%n
	pushd $idocdir/%n
		mkdir testlogs
		cp %b/../build/last/*-check.log testlogs/
		cp %b/../build/last-libcxx/*-check.log testlogs/
	popd

	install -m 755 %b/../build/last/lib/libiomp5.dylib %i/opt/llvm-3.4/lib
	install_name_tool -id "%p/opt/llvm-3.4/lib/libiomp5.dylib" "%i/opt/llvm-3.4/lib/libiomp5.dylib"
	install -m 644 %b/../build/last/lib/clang/%v/include/omp.h %i/opt/llvm-3.4/lib/clang/%v/include
<<
SplitOff: <<
	Package: clang34-tools
	Depends: clang34-shlibs (= %v-%r)
	Description: Extra tools for clang, such as formatting
	Files: <<
		opt/llvm-3.4/bin/*clang-format*
		opt/llvm-3.4/share/clang
	<<
<<
SplitOff2: <<
	Package: clang34-docs
	Description: Documenation for clang and related tools
	Files: <<
		opt/llvm-3.4/share/doc/clang
		opt/llvm-3.4/share/doc/clang-html
		opt/llvm-3.4/share/doc/%N/testlogs/clang-%v-check.log
		opt/llvm-3.4/share/doc/%N/testlogs/compiler-rt-%v-check.log
	<<
<<
SplitOff4: <<
	Package: clang34-dev
	BuildDependsOnly: true
	Depends: clang34-shlibs (= %v-%r)
	Description: Development headers for clang API
	Files: <<
		opt/llvm-3.4/include/clang
		opt/llvm-3.4/include/clang-c
		opt/llvm-3.4/lib/libclang.dylib
	<<
<<
SplitOff5: <<
	Package: clang34-shlibs
	Depends: %N-shlibs (= %v-%r)
	Description: Shared libraries for clang compiler
	Files: <<
		opt/llvm-3.4/lib/libclang*
		opt/llvm-3.4/lib/clang/%v/lib
		opt/llvm-3.4/lib/libiomp5.dylib
	<<
	DocFiles: <<
		tools/clang/*.TXT
		tools/clang/INSTALL.txt
		tools/clang/ModuleInfo.txt
		tools/clang/NOTES.txt
		tools/clang/README.txt
	<<
	Shlibs: <<
	 	%p/opt/llvm-3.4/lib/libclang.3.4.dylib 1.0.0 %n (>= 3.4-0)
		!%p/opt/llvm-3.4/lib/libclangAnalysis.dylib
		!%p/opt/llvm-3.4/lib/libclangARCMigrate.dylib
		!%p/opt/llvm-3.4/lib/libclangAST.dylib
		!%p/opt/llvm-3.4/lib/libclangASTMatchers.dylib
		!%p/opt/llvm-3.4/lib/libclangBasic.dylib
		!%p/opt/llvm-3.4/lib/libclangCodeGen.dylib
		!%p/opt/llvm-3.4/lib/libclangDriver.dylib
		!%p/opt/llvm-3.4/lib/libclangDynamicASTMatchers.dylib
		!%p/opt/llvm-3.4/lib/libclangEdit.dylib
		!%p/opt/llvm-3.4/lib/libclangFormat.dylib
		!%p/opt/llvm-3.4/lib/libclangFrontend.dylib
		!%p/opt/llvm-3.4/lib/libclangFrontendTool.dylib
		!%p/opt/llvm-3.4/lib/libclangIndex.dylib
		!%p/opt/llvm-3.4/lib/libclangLex.dylib
		!%p/opt/llvm-3.4/lib/libclangParse.dylib
		!%p/opt/llvm-3.4/lib/libclangRewriteCore.dylib
		!%p/opt/llvm-3.4/lib/libclangRewriteFrontend.dylib
		!%p/opt/llvm-3.4/lib/libclangSema.dylib
		!%p/opt/llvm-3.4/lib/libclangSerialization.dylib
		!%p/opt/llvm-3.4/lib/libclangStaticAnalyzerCheckers.dylib
		!%p/opt/llvm-3.4/lib/libclangStaticAnalyzerCore.dylib
		!%p/opt/llvm-3.4/lib/libclangStaticAnalyzerFrontend.dylib
		!%p/opt/llvm-3.4/lib/libclangTooling.dylib
		!%p/opt/llvm-3.4/lib/clang/%v/lib/darwin/libclang_rt.asan_osx_dynamic.dylib
		!%p/opt/llvm-3.4/lib/clang/%v/lib/darwin/libclang_rt.asan_iossim_dynamic.dylib
		%p/opt/llvm-3.4/lib/libiomp5.dylib 5.0.0  %n (>= 3.4-0)
	<<
<<
SplitOff6: <<
	Package: clang34
	Depends: <<
	# only darwin8 needs odcctools
	#	odcctools,
	# choosing to require opt-in instead of defaulting to libcxx1-dev
	#	libcxx1-dev,
		clang34-shlibs (= %v-%r),
		polly34-shlibs (= %v-%r)
	<<
	Description: Executables and runtime for clang compiler
	BuildDependsOnly: false
	Files: <<
		opt/llvm-3.4/bin/clang*
		opt/llvm-3.4/bin/ld
		opt/llvm-3.4/lib/clang
	<<
	DescUsage: <<
	To use clang/clang++, point your PATH to %p/opt/llvm-3.4/bin.
	clang++ uses the system C++ library by default.
	To use libcxx1-dev, pass "-cxx-isystem %p/include/c++/v1"
	and -L%p/lib/c++.
	<<
<<
SplitOff7: <<
	Package: polly34-docs
	Description: Documentation for Polly optimizer
	Files: <<
		opt/llvm-3.4/share/doc/polly-html
		opt/llvm-3.4/share/doc/%N/testlogs/polly-%v-check.log
	<<
<<
SplitOff8: <<
	Package: polly34-dev
	Depends: polly34-shlibs (= %v-%r)
	BuildDependsOnly: true
	Description: Development headers for Polly loop optimizer
	Files: <<
		opt/llvm-3.4/include/polly
	<<
<<
SplitOff9: <<
	Package: polly34-shlibs
	Description: Shared libraries for Polly loop optimizer
	Depends: <<
		%N-shlibs (= %v-%r),
		isl-shlibs (>= 0.12.1), 
	#	cloog-org2-shlibs (>= 0.18),
		libgmpxx5-shlibs,
		gmp5-shlibs
	<<
	Files: <<
		opt/llvm-3.4/lib/LLVMPolly.so
		opt/llvm-3.4/lib/libLLVMPolly*.dylib
	<<
	DocFiles: tools/polly/LICENSE.txt tools/polly/CREDITS.txt
	Shlibs: <<
		!%p/opt/llvm-3.4/lib/LLVMPolly.so
		!%p/opt/llvm-3.4/lib/libLLVMPollyJSON.dylib
	<<
<<
SplitOff10: <<
	Package: %N-docs
	Description: Documentation for LLVM tools and internals
	Files: <<
		opt/llvm-3.4/share/doc/llvm
		opt/llvm-3.4/share/doc/%N/testlogs/llvm-%v-check.log
	<<
<<
SplitOff11: <<
	Package: %N-dev
	Depends: %N-shlibs (= %v-%r)
	BuildDependsOnly: true
	Description: Developement headers for LLVM infrastructure
	Files: <<
		opt/llvm-3.4/include/llvm
		opt/llvm-3.4/include/llvm-c
		opt/llvm-3.4/share/llvm
	<<
<<
SplitOff12: <<
	Package: %N-shlibs
	Description: Shared libraries for LLVM infrastructure
	Depends: <<
	# only darwin10+ bootstraps with built libc++
		libcxx1-shlibs (>= %v-%r),
		libncurses5-shlibs
	<<
	Files: <<
		opt/llvm-3.4/lib/BugpointPasses.so
		opt/llvm-3.4/lib/LLVMHello.so
		opt/llvm-3.4/lib/libLLVM*.dylib
		opt/llvm-3.4/lib/libLTO.dylib
		opt/llvm-3.4/lib/libgtest*.dylib
	<<
	DocFiles: *.TXT README.txt
	Shlibs: <<
		!%p/opt/llvm-3.4/lib/libLTO.dylib
		!%p/opt/llvm-3.4/lib/BugpointPasses.so
		!%p/opt/llvm-3.4/lib/LLVMHello.so
		!%p/opt/llvm-3.4/lib/libLLVMAnalysis.dylib
		!%p/opt/llvm-3.4/lib/libLLVMAsmParser.dylib
		!%p/opt/llvm-3.4/lib/libLLVMAsmPrinter.dylib
		!%p/opt/llvm-3.4/lib/libLLVMBitReader.dylib
		!%p/opt/llvm-3.4/lib/libLLVMBitWriter.dylib
		!%p/opt/llvm-3.4/lib/libLLVMCodeGen.dylib
		!%p/opt/llvm-3.4/lib/libLLVMCore.dylib
		!%p/opt/llvm-3.4/lib/libLLVMDebugInfo.dylib
		!%p/opt/llvm-3.4/lib/libLLVMExecutionEngine.dylib
		!%p/opt/llvm-3.4/lib/libLLVMInstCombine.dylib
		!%p/opt/llvm-3.4/lib/libLLVMInstrumentation.dylib
		!%p/opt/llvm-3.4/lib/libLLVMInterpreter.dylib
		!%p/opt/llvm-3.4/lib/libLLVMIRReader.dylib
		!%p/opt/llvm-3.4/lib/libLLVMJIT.dylib
		!%p/opt/llvm-3.4/lib/libLLVMLinker.dylib
		!%p/opt/llvm-3.4/lib/libLLVMLTO.dylib
		!%p/opt/llvm-3.4/lib/libLLVMMC.dylib
		!%p/opt/llvm-3.4/lib/libLLVMMCDisassembler.dylib
		!%p/opt/llvm-3.4/lib/libLLVMMCJIT.dylib
		!%p/opt/llvm-3.4/lib/libLLVMMCParser.dylib
		!%p/opt/llvm-3.4/lib/libLLVMObjCARCOpts.dylib
		!%p/opt/llvm-3.4/lib/libLLVMObject.dylib
		!%p/opt/llvm-3.4/lib/libLLVMOption.dylib
		(%m = powerpc) !%p/opt/llvm-3.4/lib/libLLVMPowerPCAsmParser.dylib
		(%m = powerpc) !%p/opt/llvm-3.4/lib/libLLVMPowerPCAsmPrinter.dylib
		(%m = powerpc) !%p/opt/llvm-3.4/lib/libLLVMPowerPCCodeGen.dylib
		(%m = powerpc) !%p/opt/llvm-3.4/lib/libLLVMPowerPCDesc.dylib
		(%m = powerpc) !%p/opt/llvm-3.4/lib/libLLVMPowerPCInfo.dylib
		!%p/opt/llvm-3.4/lib/libLLVMRuntimeDyld.dylib
		!%p/opt/llvm-3.4/lib/libLLVMScalarOpts.dylib
		!%p/opt/llvm-3.4/lib/libLLVMSelectionDAG.dylib
		!%p/opt/llvm-3.4/lib/libLLVMSupport.dylib
		!%p/opt/llvm-3.4/lib/libLLVMTableGen.dylib
		!%p/opt/llvm-3.4/lib/libLLVMTarget.dylib
		!%p/opt/llvm-3.4/lib/libLLVMTransformUtils.dylib
		!%p/opt/llvm-3.4/lib/libLLVMVectorize.dylib
		!%p/opt/llvm-3.4/lib/libLLVMipa.dylib
		!%p/opt/llvm-3.4/lib/libLLVMipo.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86AsmParser.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86AsmPrinter.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86CodeGen.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86Desc.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86Disassembler.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86Info.dylib
		(%m != powerpc) !%p/opt/llvm-3.4/lib/libLLVMX86Utils.dylib
		!%p/opt/llvm-3.4/lib/libgtest.dylib
		!%p/opt/llvm-3.4/lib/libgtest_main.dylib
	<<
<<
SplitOff13: <<
	Package: libcxx1-shlibs
	Description: Standard library for libc++
	Files: lib/c++/libc++.*.*.dylib
	Shlibs: <<
	 	%p/lib/c++/libc++.1.0.dylib 1.0.0 %n (>= 3.4-0)
	<<
	DocFiles: ../libcxx-3.4/*.TXT
	DescPort: <<
	This C++ library is always built using the system's C++ ABI library,
	not libc++abi from the LLVM project.  
	The system ABI could be either libc++abi or libsupc++.
	This allows for interoperability across different C++ libraries.  
	<<
	DescUsage: <<
	libc++ lives in a private location, which requires opt-in to use.
	To use libc++, you need to pass "-cxx-isystem %p/include/c++/v1"
	and -L%p/lib/c++ to clang++.  
	<<
<<
SplitOff14: <<
	Package: libcxx1-dev
	Description: Standard library headers for libc++
	Depends: libcxx1-shlibs (= %v-%r)
	BuildDependsOnly: true
	Files: <<
		include/c++
		lib/c++/libc++*.dylib
		opt/llvm-3.4/share/doc/%N/testlogs/libcxx-%v-check.log
	<<
	DescPort: <<
	This C++ library is always built using the system's C++ ABI library,
	not libc++abi from the LLVM project.  
	The system ABI could be either libc++abi or libsupc++.
	This allows for interoperability across different C++ libraries.  
	<<
	DescUsage: <<
	libc++ lives in a private location, which requires opt-in to use.
	To use libc++, you need to pass "-cxx-isystem %p/include/c++/v1"
	and -L%p/lib/c++ to clang++.  
	<<
<<
SplitOff15: <<
	Package: %N-bundle
	Description: Bundle of LLVM/Clang compiler tools
	Type: bundle
	Depends: <<
		%N,
		%N-docs,
		clang34,
		clang34-docs,
		clang34-tools,
		polly34-docs
	<<
	DescDetail: <<
	Installing this gets all of the binaries, libraries, and
	documentation for the llvm34 package set.
	The -dev headers are separate because they are build-depends-only:true.
	<<
<<
Homepage: http://llvm.org/
DescDetail: <<
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies.  Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them.

The goal of the Clang project is to create a new C, C++, Objective C 
and Objective C++ front-end for the LLVM compiler.
<<
DescPackaging: <<
clang binaries now live in the clang34 split-off.
The %N-bundle package installs the entire set except for -dev headers.  

libc++ is installed with headers at %p/include/c++/v1
and libraries in %p/lib/c++/, so opt to use them, pass to clang:
-cxx-isystem %p/include/c++/v1 -L%p/lib/c++
Otherwise the default is to use the system's libc++.

Built with shared-libraries to reduce the binary size and peak disk usage.
Enabled only native targets X86, PowerPC.
Other targets can be enabled by uncommenting lines in the CompileScript.
<<
DescPort: <<
Most of the patches are maintained at fangism's powerpc-darwin8 branches
of the llvm, clang, compiler-rt projects hosted at github:
	https://github.com/fangism/llvm/compare/release_34...powerpc-darwin8-rel-3.4.diff
	https://github.com/fangism/clang/compare/release_34...powerpc-darwin8-rel-3.4.diff
	https://github.com/fangism/compiler-rt/compare/release_34...powerpc-darwin8-rel-3.4.diff
	https://github.com/fangism/libcxx/compare/release_34...powerpc-darwin8-rel-3.4.diff

On darwin>9 and x86 architectures, the package build is done as a
3-stage bootstrap (self-host), now including a built libc++.  
When stage 2 and 3 of bootstrap miscompare, a 4th stage is done, 
and then compared against stage 3.  

	*** LLVM/Clang-3.4 still has some codegen issues for PowerPC
	*** It is NOT considered production quality for PowerPC
	*** HELP WANTED: in stabilizing and fixing PowerPC CodeGen
	*** on llvm/clang svn trunk.
	*** status page: http://www.csl.cornell.edu/~fang/sw/llvm/
	*** IRC channel: #llvm-powerpc-darwin at irc.oftc.net

Original (pre-3.0) package maintained by 
	Benjamin Reed <llvm@fink.raccoonfink.com>
with contributions from
	Jack Howarth <howarth@bromo.med.uc.edu>
PatchFile contains:
*	various compiler deficiency workarounds
*	CMakeFile fixes, mostly missing dependencies
*	CodeGen patches related to ABI, mach-o
*	and much more!

Generate openmp-r208472 with..
svn co -r208472 http://llvm.org/svn/llvm-project/openmp/trunk/ openmp-r208472
tar --exclude=.svn -zcvf openmp-r208472.tar.gz openmp-r208472

Current clang-omp.patch generated by diff of clang 3.4 source and clang-omp from
git co -b clang-omp https://github.com/clang-omp/clang.git
at commit f9e2fd7640f8fc06ebe1ef2f065c6158f6b4b6ef.

<<
<<
