Info4: <<
Package: module-release-pm%type_pkg[perl]
Version: 2.06
Revision: 1
Architecture: (%type_pkg[perl] = 581) powerpc, (%type_pkg[perl] = 584) powerpc
Distribution: (%type_pkg[perl] = 581) 10.4, (%type_pkg[perl] = 584) 10.4, (%type_pkg[perl] = 586) 10.4, (%type_pkg[perl] = 586) 10.5, (%type_pkg[perl] = 5100) 10.5, (%type_pkg[perl] = 5100) 10.6, (%type_pkg[perl] = 5123) 10.7, (%type_pkg[perl] = 588) 10.4, (%type_pkg[perl] = 588) 10.5, (%type_pkg[perl] = 588) 10.6
Description: Automate software releases
Type: perl(5.8.1 5.8.4 5.8.6 5.8.8 5.10.0 5.12.3)
License: Artistic
Maintainer: Benjamin Reed <module-release-pm@fink.raccoonfink.com>

Depends: <<
	cacertorg-ca-pm,
	configreader-simple-pm,
	io-null-pm,
	libwww-pm%type_pkg[perl] (>= 6.02),
	lwp-protocol-https-pm%type_pkg[perl] (>= 6.02),
	perl%type_pkg[perl]-core,
	uri-pm%type_pkg[perl]
<<
BuildDepends: <<
	test-output-pm%type_pkg[perl],
	test-without-module-pm
<<
PatchScript: <<
	# Scrap tests that fail due to warnings about assuming default
	# encoding values that doesn't seem to have visible effect on
	# reading the pod. See:
	# https://rt.cpan.org/Public/Bug/Display.html?id=78442
	rm t/pod.t
<<
InfoTest: <<
TestDepends: <<
	test-pod-coverage-pm,
<<
#	test-pod-pm
TestScript: <<
	#!/bin/sh -ev
	export FULLPERL="/usr/bin/arch -%m `which perl%type_raw[perl]`"
	case `sw_vers -productVersion` in
		10.4*)
			export FULLPERL=`which perl%type_raw[perl]`
			;;
	esac
	perl -pi -e "s,\\$\\^X,$FULLPERL," t/compile.t
	make FULLPERL="$FULLPERL" test || exit 2
<<
<<

Source: mirror:cpan:modules/by-module/Module/Module-Release-%v.tar.gz
Source-MD5: 017986629a8f76afb061985c74ccbb48

UseMaxBuildJobs: true

UpdatePOD: true
InstallScript: <<
%{default_script}
mv %i/share/man %i/lib/perl5/%type_raw[perl]
mv %i/bin/release %i/bin/release-%type_pkg[perl]
<<
DocFiles: Changes MANIFEST README

Homepage: http://search.cpan.org/dist/Module-Release
DescDetail: <<
Module::Release automates your software release process.  It started
as a script that automated my release process, so it has bits to talk
to PAUSE (CPAN) and SourceForge, and to use Makefile.PL and CVS.
Other people have extended this in other modules under the same
namespace so you can use Module::Build, svn, and many other things.

The methods represent a step in the release process.  Some of them
check a condition (e.g. all tests pass) and die if that doesn't work.
Module::Release doesn't let you continue if something is wrong.  Once
you have checked everything, use the upload features to send your
files to the right places.

The included release script is a good starting place.  Don't be afraid
to edit it for your own purposes.
<<
<<

