--- matplotlib/setup.py.orig	Thu Oct 14 18:05:09 2004
+++ matplotlib/setup.py	Thu Oct 14 18:59:30 2004
@@ -23,18 +23,18 @@
 BUILD_AGG = 1
 
 # Render Agg to the GTK canvas
-#BUILD_GTKAGG       = 0
-BUILD_GTKAGG       = 'auto'
+BUILD_GTKAGG       = 1
+#BUILD_GTKAGG       = 'auto'
 
 # build TK GUI with Agg renderer ; requires Tkinter Python extension
 # and Tk includes
 # Use False or 0 if you don't want to build
-#BUILD_TKAGG        = 0
-BUILD_TKAGG        = 'auto'
+BUILD_TKAGG        = 1
+#BUILD_TKAGG        = 'auto'
 
 # build a small extension to manage the focus on win32 platforms.
-#BUILD_WINDOWING        = 0
-BUILD_WINDOWING        = 'auto'
+BUILD_WINDOWING        = 0
+#BUILD_WINDOWING        = 'auto'
 
 VERBOSE = False  # insert lots of diagnostic prints in extension code
 
@@ -123,18 +123,18 @@
 build_transforms(ext_modules, packages, NUMERIX)
     
 if BUILD_GTKAGG:
-    try: import gtk
-    except ImportError: print 'GTKAgg requires pygtk'
-    else:
-        BUILD_AGG = 1
-        build_gtkagg(ext_modules, packages)
+#   try: import gtk
+#    except ImportError: print 'GTKAgg requires pygtk'
+#   else:
+    BUILD_AGG = 1
+    build_gtkagg(ext_modules, packages)
 
 if BUILD_TKAGG:
-    try: import Tkinter
-    except ImportError: print 'TKAgg requires TkInter'
-    else:
-        BUILD_AGG = 1
-        build_tkagg(ext_modules, packages)
+#   try: import Tkinter
+#   except ImportError: print 'TKAgg requires TkInter'
+#   else:
+    BUILD_AGG = 1
+    build_tkagg(ext_modules, packages)
 
 if BUILD_AGG:
     build_agg(ext_modules, packages)
@@ -151,6 +151,9 @@
 for mod in ext_modules:
     if VERBOSE:
         mod.extra_compile_args.append('-DVERBOSE')
+    mod.include_dirs.append('@PREFIX@/include')
+    mod.library_dirs.append('@PREFIX@/lib')
+
     
 setup(name="matplotlib",
       version= __version__,
--- matplotlib/setupext.py.orig	Thu Oct 14 18:04:58 2004
+++ matplotlib/setupext.py	Thu Oct 14 19:01:53 2004
@@ -35,7 +35,7 @@
     'win32'  : ['win32_static',],
     'linux2' : ['/usr/local', '/usr',],
     'linux'  : ['/usr/local', '/usr',],
-    'darwin' : [os.getenv('MPLIB_BASE') or '/usr/local', '/usr', '/sw'],
+    'darwin' : [os.getenv('MPLIB_BASE') or '/usr/X11R6', '/usr' ],
     'freebsd4' : [os.getenv('MPLIB_BASE') or '/usr/local', '/usr'],
     'sunos5' : [os.getenv('MPLIB_BASE') or '/usr/local',],
 }
@@ -200,10 +200,10 @@
 	print "Using default library and include directories for Tcl and Tk because a"
 	print "Tk window failed to open.  You may need to define DISPLAY for Tk to work"
 	print "so that setup can determine where your libraries are located."
-	o.tcl_lib = "/usr/local/lib"
-	o.tcl_inc = "/usr/local/include"
-	o.tk_lib = "/usr/local/lib"
-        o.tk_inc = "/usr/local/include"
+ 	o.tcl_lib = "@PREFIX@/lib"
+ 	o.tcl_inc = "@PREFIX@/include"
+ 	o.tk_lib = "@PREFIX/lib"
+        o.tk_inc = "@PREFIX@/include"
 	o.tkv = ""
     else:
 	tk.withdraw()
@@ -244,52 +244,6 @@
         else:
             raise RuntimeError('No tk/win32 support for this python version yet')
         return
-
-    elif sys.platform == 'darwin' :
-        # this config section lifted directly from Imaging - thanks to
-        # the effbot!
-
-        # First test for a MacOSX/darwin framework install
-        from os.path import join, exists
-        framework_dirs = [
-            '/System/Library/Frameworks/',
-            '/Library/Frameworks',
-            join(os.getenv('HOME'), '/Library/Frameworks')
-        ]
-
-        # Find the directory that contains the Tcl.framwork and Tk.framework
-        # bundles.
-        # XXX distutils should support -F!
-        for F in framework_dirs:
-            # both Tcl.framework and Tk.framework should be present
-            for fw in 'Tcl', 'Tk':
-                if not exists(join(F, fw + '.framework')):
-                    break
-            else:
-                # ok, F is now directory with both frameworks. Continure
-                # building
-                tk_framework_found = 1
-                break
-        if tk_framework_found:
-            # For 8.4a2, we must add -I options that point inside the Tcl and Tk
-            # frameworks. In later release we should hopefully be able to pass
-            # the -F option to gcc, which specifies a framework lookup path.
-            #
-            tk_include_dirs = [
-                join(F, fw + '.framework', H)
-                for fw in 'Tcl', 'Tk'
-                for H in 'Headers', 'Versions/Current/PrivateHeaders'
-            ]
-
-            # For 8.4a2, the X11 headers are not included. Rather than include a
-            # complicated search, this is a hard-coded path. It could bail out
-            # if X11 libs are not found...
-            # tk_include_dirs.append('/usr/X11R6/include')
-            frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
-            module.include_dirs.extend(tk_include_dirs)
-            module.extra_link_args.extend(frameworks)
-            module.extra_compile_args.extend(frameworks)
-            return
 
     # you're still here? ok we'll try it this way
     o = find_tcltk()
