Remove 'none' from required arguments.
Consult ~/.gmail.conf for options.
Set fuse API version.

diff --git a/gmailfs.py b/gmailfs.py
--- a/gmailfs.py
+++ b/gmailfs.py
@@ -17,6 +17,8 @@ GmailFS provides a filesystem using a Go
 #@+others
 #@+node:imports
 
+import fuse
+fuse.fuse_python_api = (0, 1)
 from fuse import Fuse
 import os
 from errno import *
@@ -565,7 +567,7 @@ class Gmailfs(Fuse):
         password = DefaultPassword
         username = DefaultUsername
 	
-	options_required = 1
+	options_required = 0
 	if self.optdict.has_key("reference"):
 	    try:
 		reference = References[self.optdict['reference']]
@@ -1120,7 +1122,7 @@ defaultLoggingHandler = logging.StreamHa
 defaultLoggingHandler = logging.StreamHandler(sys.stdout)
 _addLoggingHandlerHelper(defaultLoggingHandler)
 
-GmailConfig("/etc/gmailfs.conf")
+GmailConfig(os.path.expanduser('~/.gmailfs.conf'))
 try:
     libgmail.ConfigLogs(log)
 except:
diff --git a/mount.gmailfs b/mount.gmailfs
--- a/mount.gmailfs
+++ b/mount.gmailfs
@@ -8,9 +8,7 @@ This utility allows Gmail filesystems to
 'mount' command, or even to be listed in /etc/fstab
 
 Usage:
-     1.  mount.gmailfs none /path/of/mount/point [options]
-     2.  in /etc/fstab, add:
-           none /path/of/mount/point gmailfs noauto[,options]
+     gmailfs /path/of/mount/point [options]
 """
 
 import sys, os, os.path, time, optparse, getpass, re, tempfile, signal
@@ -24,7 +22,7 @@ ENCFS_MOUNTPOINT_CHECK_DELAY = 5  # in s
 ENCFS_MOUNTPOINT_CHECK_DELAY = 5  # in seconds
 
 def parseCommandLineArgs(args):
-  usage = "usage: %prog none mountpoint [options]"
+  usage = "usage: %prog mountpoint [options]"
 
   parser = optparse.OptionParser(usage=usage)
   parser.add_option("-p", "--prompt-for-password", dest="promptForPasswd",
@@ -39,10 +37,10 @@ def parseCommandLineArgs(args):
 
   options, args = parser.parse_args(args)
 
-  if len(args) != 2:
+  if len(args) != 1:
     parser.error("Wrong number of arguments")
   else:
-    pyfile, mountpoint = args
+    mountpoint = args[0]
     
   odata = options.gmailfsOptions
 
@@ -59,10 +57,7 @@ def parseCommandLineArgs(args):
     namedOptions['password'] = getpass.getpass("Gmail password: ")
     
   # pyfile sanitation
-  if pyfile == 'none':
-    pyfile = DEFAULT_GMAILFS_LOCATION
-  else:
-    pyfile = os.path.abspath(pyfile)
+  pyfile = DEFAULT_GMAILFS_LOCATION
   if not os.path.isfile(pyfile):
     log.error("file %s doesn't exist, or is not a file" % pyfile)
     sys.exit(1)
