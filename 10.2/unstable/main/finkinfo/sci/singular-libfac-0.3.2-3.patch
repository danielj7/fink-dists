diff -ur libfac/factor/Factor.cc libfac-0.3.2.20010628.2/factor/Factor.cc
--- libfac/factor/Factor.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628.2/factor/Factor.cc	Tue Aug  7 19:24:41 2001
@@ -24,6 +24,10 @@
    extern  void WarnS(const char *);
 #endif
 
+#ifdef HAVE_SINGULAR_ERROR
+   extern "C" { void WerrorS(char *), WarnS(char *); }
+#endif
+
 #ifdef FACTORDEBUG
 #  define DEBUGOUTPUT
 #else
@@ -214,7 +218,7 @@
             Returnlist.append(CFFactor(numerator/test ,1));
           }
           else {
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
             WerrorS("libfac: ERROR: not_monic1: case lt is a sum.");
 #else
             cerr << "libfac: ERROR: not_monic1: case lt is a sum.\n"
@@ -231,7 +235,7 @@
           // the following will do what we want
           Returnlist= myUnion( CFFList(CFFactor(1/a,1)),Returnlist) ;
         else {
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
           WerrorS("libfac: ERROR: not_monic2: case lt is a sum.");
 #else
           cerr << "libfac: ERROR: not_monic2: case lt is a sum.\n"
@@ -320,7 +324,7 @@
   else {
     if ( degree(Extension) == 0 ) FFRandom gen;
     else {
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
     WerrorS("libfac: evaluate: Extension not inFF() or inGF() !");
 #else
     cerr << "libfac: evaluate: " << Extension << " not inFF() or inGF() !"
@@ -391,7 +395,7 @@
       ok= try_specializePoly(f,minpoly,deg,Substitutionlist,i,j);
     }
     else {
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
       WerrorS("libfac: spezializePoly ERROR: Working over given extension-field not yet implemented!");
 #else
       cerr << "libfac: spezializePoly ERROR: Working over given extension-field not yet implemented!\n"
@@ -425,7 +429,7 @@
   if ( degree(Extension) >0 ) GFRandom gen;
   else { if ( degree(Extension) == 0 ) FFRandom gen;
   else {
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
     WerrorS("libfac: evaluate: Extension not inFF() or inGF() !");
 #else
     cerr << "libfac: evaluate: " << Extension << " not inFF() or inGF() !"
@@ -613,7 +617,7 @@
     success= specializePoly(ffuni,Extension,degree(ff),Substitutionlist,1,getNumVars(compress(ff,m)));
     DEBOUTLN(cout,  "Returned from specializePoly: success: ", success);
     if (success == 0 ){ // No spezialisation could be found
-#ifdef SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
       WarnS("libfac: Factorize: ERROR: Not able to find a valid specialization!");
 #else
       cerr << "libfac: Factorize: ERROR: Not able to find a valid specialization!\n"
diff -ur libfac/factor/MVMultiHensel.cc libfac-0.3.2.20010628.2/factor/MVMultiHensel.cc
--- libfac/factor/MVMultiHensel.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628.2/factor/MVMultiHensel.cc	Tue Aug  7 19:22:49 2001
@@ -16,6 +16,10 @@
    extern "C" { void WerrorS(char *); }
 #endif
 
+#ifdef HAVE_SINGULAR_ERROR
+   extern "C" { void WerrorS(char *); }
+#endif
+
 #ifdef HENSELDEBUG
 #  define DEBUGOUTPUT
 #else
@@ -105,7 +109,7 @@
 
   // Degrees ok? degree(F1,mainvar) + degree(F2,mainvar) <= i ?
   if ( (degree(F1,levelU) + degree(F2,levelU) ) <= i ) {
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
     WerrorS("libfac: diophant ERROR: degree too large!  ");
 #else
     cerr << "libfac: diophant ERROR: degree too large!  " 
@@ -119,7 +123,7 @@
     r=extgcd(F1,F2,s,t);
     // check if gcd(F1,F2) <> 1 , i.e. F1 and F2 are not relatively prime 
     if ( ! r.isOne() ){ 
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
       WerrorS("libfac: diophant ERROR: F1 and F2 are not relatively prime! ");
 #else
       cerr << "libfac: diophant ERROR: " << F1 << "  and  " << F2 
diff -ur libfac/factor/SqrFree.cc libfac-0.3.2.20010628.2/factor/SqrFree.cc
--- libfac/factor/SqrFree.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628.2/factor/SqrFree.cc	Tue Aug  7 19:22:49 2001
@@ -17,6 +17,10 @@
    extern "C" { void WerrorS(char *); }
 #endif
 
+#ifdef HAVE_SINGULAR_ERROR
+   extern "C" { void WerrorS(char *); }
+#endif
+
 #ifdef SQRFREEDEBUG
 # define DEBUGOUTPUT
 #else
@@ -124,7 +128,7 @@
     if ( g.isOne() || (-g).isOne() || (g==f) || (getNumVars(g)==0) ) return 1 ;
     else return 0 ;
   }
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
   WerrorS("libfac: ERROR: SqrFreeTest: we should never fall trough here!");
 #else
   cerr << "\nlibfac: ERROR: SqrFreeTest: we should never fall trough here!\n" 
@@ -250,7 +254,7 @@
     DEBDECLEVEL(cout, "SqrFreed");
     return Outputlist ;
   }
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
   WerrorS("libfac: ERROR: SqrFreed: we should never fall trough here!");
 #else
   cerr << "\nlibfac: ERROR: SqrFreed: we should never fall trough here!\n" 
diff -ur libfac/factor/Truefactor.cc libfac-0.3.2.20010628.2/factor/Truefactor.cc
--- libfac/factor/Truefactor.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628.2/factor/Truefactor.cc	Tue Aug  7 19:25:16 2001
@@ -16,6 +16,10 @@
    extern "C" { void WerrorS(char *); }
 #endif
 
+#ifdef HAVE_SINGULAR_ERROR
+   extern "C" { void WerrorS(char *); }
+#endif
+
 #ifdef TRUEFACTORDEBUG
 #  define DEBUGOUTPUT
 #else
@@ -352,7 +356,7 @@
   if ( PossibleFactors.length() > 0 ){ // there are (at least two) items
     int n=2;
     if ( PossibleFactors.length() < n ) { // a little check
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
       WerrorS("libfac: ERROR: TakeNorms less then two items remaining!");
 #else
       cerr << "libfac: ERROR: TakeNorms less then two items remaining! "
@@ -394,7 +398,7 @@
         TrueFactors.append(CFFactor(intermediate,1));
       }
       else{
-#ifdef HAVE_SINGULAR
+#ifdef HAVE_SINGULAR_ERROR
         WerrorS("libfac: TakeNorms: somethings wrong with remaining factors!");
 #else
         cerr << "libfac: TakeNorms: somethings wrong with remaining factors!"
diff -ur libfac/factor/tmpl_inst.cc libfac-0.3.2.20010628.2/factor/tmpl_inst.cc
--- libfac/factor/tmpl_inst.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628.2/factor/tmpl_inst.cc	Tue Aug  7 19:16:30 2001
@@ -24,12 +24,14 @@
 template class Matrix<CanonicalForm>;
 template class SubMatrix<CanonicalForm>;
 
+#ifndef NOSTREAMIO
 template ostream & operator << ( ostream &, const List<CanonicalForm> & );
 template ostream & operator << ( ostream &, const List<CFFactor> & );
 template ostream & operator << ( ostream &, const List<MapPair> & );
 template ostream & operator << ( ostream &, const Array<CanonicalForm> & );
 template ostream & operator << ( ostream &, const Factor<CanonicalForm> & );
 //template ostream & operator << ( ostream &, const Matrix<CanonicalForm> & );
+#endif
 
 template List<CFFactor> Union ( const List<CFFactor>&, const List<CFFactor>& );
 
@@ -61,8 +63,10 @@
 template List<CanonicalForm> Union ( const List<CanonicalForm>&, const List<CanonicalForm>& );
 template List<CanonicalForm> Difference ( const List<CanonicalForm>&, const List<CanonicalForm>& );
 
+#ifndef NOSTREAMIO
 template ostream & operator << ( ostream &, const List<int> & );
 template ostream & operator << ( ostream &, const List<IntList> & );
+#endif
 
 // for charsets:
 template class List<CFList>;
@@ -73,10 +77,12 @@
 template List<Variable> Union ( const List<Variable>&, const List<Variable>& );
 template List<Variable> Difference ( const List<Variable>&, const List<Variable>& );
 
+#ifndef NOSTREAMIO
 template ostream & operator << ( ostream &, const List<CFList> & );
 template ostream & operator << ( ostream &, const List<Variable> & );
 template ostream & operator << ( ostream &, const List<int> & );
 template ostream & operator << ( ostream &, const Array<int> & );
+#endif
 
 template class Array<int>;
 template class Array<Variable>;
