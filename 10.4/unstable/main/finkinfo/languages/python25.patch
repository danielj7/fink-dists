--- Python/configure.orig	2006-09-13 06:22:00.000000000 -0600
+++ Python/configure	2006-09-13 06:25:31.000000000 -0600
@@ -3885,7 +3885,7 @@
 	    ;;
 	# is there any other compiler on Darwin besides gcc?
 	Darwin*)
-	    BASECFLAGS="$BASECFLAGS -Wno-long-double -no-cpp-precomp -mno-fused-madd"
+    BASECFLAGS="$BASECFLAGS -fno-common -Wno-long-double -no-cpp-precomp -mno-fused-madd"
 	    if test "${enable_universalsdk}"; then
 		BASECFLAGS="-arch ppc -arch i386 -isysroot ${UNIVERSALSDK} ${BASECFLAGS}"
 	    fi
@@ -10980,7 +10980,8 @@
 			LDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 		else
 			# No framework. Ignore undefined symbols, assuming they come from Python
-			LDSHARED="$LDSHARED -undefined suppress"
+			#LDSHARED="$LDSHARED -undefined suppress"
+  			LDSHARED="$LDSHARED -flat_namespace -undefined suppress"
 		fi ;;
 	Darwin/1.4*|Darwin/5.*|Darwin/6.*)
 		LDSHARED='$(CC) $(LDFLAGS) -bundle'
@@ -10990,8 +10991,10 @@
 			LDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 		else
 			# No framework, use the Python app as bundle-loader
-			BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
-			LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+			#BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
+			#LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+  			BLDSHARED="$LDSHARED -flat_namespace -undefined suppress"
+  			LDSHARED="$LDSHARED -flat_namespace -undefined suppress"
 		fi ;;
 	Darwin/*)
 		# Use -undefined dynamic_lookup whenever possible (10.3 and later).
@@ -11017,8 +11020,10 @@
 				LDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 			else
 				# No framework, use the Python app as bundle-loader
-				BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
-				LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+				#BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
+				#LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+     			BLDSHARED="$LDSHARED -flat_namespace -undefined suppress"
+               	LDSHARED="$LDSHARED -flat_namespace -undefined suppress"
 			fi
 		fi
 		;;
--- Python/setup.py.orig	2006-09-13 06:29:30.000000000 -0600
+++ Python/setup.py	2006-09-13 11:19:15.000000000 -0600
@@ -244,8 +244,10 @@
 
     def detect_modules(self):
         # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+#       add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+#       add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+        add_dir_to_list(self.compiler.library_dirs, '@PREFIX@/lib')
+        add_dir_to_list(self.compiler.include_dirs, '@PREFIX@/include')
 
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -293,11 +295,11 @@
         # lib_dirs and inc_dirs are used to search for files;
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
-        lib_dirs = self.compiler.library_dirs + [
+        lib_dirs = self.compiler.library_dirs + ['@PREFIX@/lib',
             '/lib64', '/usr/lib64',
             '/lib', '/usr/lib',
             ]
-        inc_dirs = self.compiler.include_dirs + ['/usr/include']
+        inc_dirs = self.compiler.include_dirs + ['@PREFIX@/include','/usr/include']
         exts = []
 
         config_h = sysconfig.get_config_h_filename()
@@ -526,6 +528,7 @@
         ssl_incs = find_file('openssl/ssl.h', inc_dirs,
                              search_for_ssl_incs_in
                              )
+        ssl_incs = None # suppress SSL support.
         if ssl_incs is not None:
             krb5_h = find_file('krb5.h', inc_dirs,
                                ['/usr/kerberos/include'])
@@ -616,11 +619,11 @@
             '/usr/include/db4',
             '/usr/local/include/db4',
             '/opt/sfw/include/db4',
-            '/sw/include/db4',
+            '@PREFIX@/include/db4',
             '/usr/include/db3',
             '/usr/local/include/db3',
             '/opt/sfw/include/db3',
-            '/sw/include/db3',
+            '@PREFIX@/include/db3',
         ]
         # 4.x minor number specific paths
         for x in (0,1,2,3,4):
@@ -1196,9 +1199,9 @@
         # AquaTk is a separate method. Only one Tkinter will be built on
         # Darwin - either AquaTk, if it is found, or X11 based Tk.
         platform = self.get_platform()
-        if (platform == 'darwin' and
-            self.detect_tkinter_darwin(inc_dirs, lib_dirs)):
-            return
+        #if (platform == 'darwin' and
+        #    self.detect_tkinter_darwin(inc_dirs, lib_dirs)):
+        #    return
 
         # Assume we haven't found any of the libraries or include files
         # The versions with dots are used on Unix, and the versions without
--- Python/Lib/pydoc.py.orig	2006-09-13 06:28:25.000000000 -0600
+++ Python/Lib/pydoc.py	2006-09-13 06:29:21.000000000 -0600
@@ -1617,19 +1617,20 @@
     def __init__(self, input, output):
         self.input = input
         self.output = output
-        self.docdir = None
-        execdir = os.path.dirname(sys.executable)
-        homedir = os.environ.get('PYTHONHOME')
-        for dir in [os.environ.get('PYTHONDOCS'),
-                    homedir and os.path.join(homedir, 'doc'),
-                    os.path.join(execdir, 'doc'),
-                    '/usr/doc/python-docs-' + split(sys.version)[0],
-                    '/usr/doc/python-' + split(sys.version)[0],
-                    '/usr/doc/python-docs-' + sys.version[:3],
-                    '/usr/doc/python-' + sys.version[:3],
-                    os.path.join(sys.prefix, 'Resources/English.lproj/Documentation')]:
-            if dir and os.path.isdir(os.path.join(dir, 'lib')):
-                self.docdir = dir
+        #self.docdir = None
+        #execdir = os.path.dirname(sys.executable)
+        #homedir = os.environ.get('PYTHONHOME')
+        #for dir in [os.environ.get('PYTHONDOCS'),
+        #            homedir and os.path.join(homedir, 'doc'),
+        #            os.path.join(execdir, 'doc'),
+        #            '/usr/doc/python-docs-' + split(sys.version)[0],
+        #            '/usr/doc/python-' + split(sys.version)[0],
+        #            '/usr/doc/python-docs-' + sys.version[:3],
+        #            '/usr/doc/python-' + sys.version[:3],
+        #            os.path.join(sys.prefix, 'Resources/English.lproj/Documentation')]:
+        #    if dir and os.path.isdir(os.path.join(dir, 'lib')):
+        #        self.docdir = dir
+        self.docdir = os.path.join(sys.prefix, 'share','doc','python'+sys.version[0]+sys.version[2],'html')
 
     def __repr__(self):
         if inspect.stack()[1][3] == '?':
--- Python/Modules/posixmodule.c.orig	2006-09-13 06:27:08.000000000 -0600
+++ Python/Modules/posixmodule.c	2006-09-13 06:27:44.000000000 -0600
@@ -339,7 +339,7 @@
 #endif
 
 /* Return a dictionary corresponding to the POSIX environment table */
-#ifdef WITH_NEXT_FRAMEWORK
+#ifdef __APPLE__
 /* On Darwin/MacOSX a shared library or framework has no access to
 ** environ directly, we must obtain it with _NSGetEnviron().
 */
@@ -357,7 +357,7 @@
 	d = PyDict_New();
 	if (d == NULL)
 		return NULL;
-#ifdef WITH_NEXT_FRAMEWORK
+#ifdef __APPLE__
 	if (environ == NULL)
 		environ = *_NSGetEnviron();
 #endif
