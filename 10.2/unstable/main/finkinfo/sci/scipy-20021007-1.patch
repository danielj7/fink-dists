--- scipy-20020911/scipy_distutils/command/build_ext.py.orig	Thu Sep 19 13:06:54 2002
+++ scipy-20020911/scipy_distutils/command/build_ext.py	Thu Sep 19 13:11:34 2002
@@ -9,6 +9,9 @@
 
 from scipy_distutils.command.build_clib import get_headers,get_directories
 
+from distutils import sysconfig, ccompiler
+from weave.build_tools import gcc_exists
+
 class build_ext (old_build_ext):
 
     def build_extension(self, ext):
@@ -36,6 +39,31 @@
 
         #self.announce('%s %s needs fortran libraries %s %s'%(\
         #    ext.name,ext_name,need_f_libs,need_f_opts))
+
+        # do we need a C++ compiler to do the linking?
+        need_cxx_linker = 0
+        for src_name in ext.sources:
+            if src_name.endswith('.cpp'):
+                need_cxx_linker = 1
+        print ext.name,ext_name,'needs C++ to link', need_cxx_linker
+
+        if need_cxx_linker:
+            # Yech -- this is cut 'n pasted from build_ext.py/build_clib.py!
+            cxx_compiler = ccompiler.new_compiler(compiler=None)
+            sysconfig.customize_compiler(cxx_compiler)
+            cxx_linker = cxx_compiler.linker_so
+            # This is ripped off weave.build_tools:
+            # FreeBSD names gcc as cc, so find and replace doesn't work  
+            # So, assume first entry in ld is the name of the linker --
+            # gcc or cc or whatever.  This is a sane assumption,  correct?
+            # If the linker is gcc, set it to g++
+            if gcc_exists(cxx_linker[0]):
+                cxx_linker[0] = 'g++'
+                print 'replacing linker_so %s with %s' %(save_linker_so,cxx_linker)
+                self.compiler.linker_so = cxx_linker
+            # saving the old linker doesn't really work, but I haven't figured
+            # out how it is supposed to work with fcompiler, and it doesn't
+            # hurt to stick with g++, apparently...
         
         if need_f_libs:
             if build_flib.has_f_library(ext_name) and \
