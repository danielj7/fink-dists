diff -uNr guile-2.0.14.orig/libguile/filesys.c guile-2.0.14/libguile/filesys.c
--- guile-2.0.14.orig/libguile/filesys.c	2016-12-14 19:03:33.000000000 -0500
+++ guile-2.0.14/libguile/filesys.c	2017-02-17 14:50:26.000000000 -0500
@@ -1486,6 +1486,12 @@
       mode_bits = scm_i_mode_bits (mode);
     }
 
+#ifdef __APPLE__
+  /* macOS starting with 10.12 defines mkostemp(2) which is used if defined,
+   * but only accepts some flags according to its manpage. It fails with
+   * invalid argument when other flags are passed. */
+  open_flags &= O_APPEND | O_SHLOCK | O_EXLOCK | O_CLOEXEC;
+#endif
   SCM_SYSCALL (rv = mkostemp (c_tmpl, open_flags));
   if (rv == -1)
     SCM_SYSERROR;
diff -uNr guile-2.0.14.orig/libguile/stime.c guile-2.0.14/libguile/stime.c
--- guile-2.0.14.orig/libguile/stime.c	2016-12-14 19:03:33.000000000 -0500
+++ guile-2.0.14/libguile/stime.c	2017-02-17 14:50:08.000000000 -0500
@@ -830,6 +830,10 @@
 
 #ifdef HAVE_POSIX_CPUTIME
   {
+#ifdef __APPLE__
+    if (clock_gettime (CLOCK_PROCESS_CPUTIME_ID, &posix_run_time_base) == 0)
+      get_internal_run_time = get_internal_run_time_posix_timer;
+#else
     clockid_t dummy;
     
     /* Only use the _POSIX_CPUTIME clock if it's going to work across
@@ -839,6 +843,7 @@
       get_internal_run_time = get_internal_run_time_posix_timer;
     else
       errno = 0;
+#endif
   }
 #endif /* HAVE_POSIX_CPUTIME */
 #endif /* HAVE_CLOCKTIME */
