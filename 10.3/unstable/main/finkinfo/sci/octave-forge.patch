===================================================================
RCS file: /cvsroot/octave/octave-forge/main/comm/galois-def.h,v
retrieving revision 1.2
retrieving revision 1.3
diff -u -r1.2 -r1.3
--- octave-forge/main/comm/galois-def.h	2003/04/01 19:37:14	1.2
+++ octave-forge/main/comm/galois-def.h	2004/03/15 22:23:01	1.3
@@ -254,7 +254,7 @@
 #define MM_BIN_OPS2(R, M1, M2, GR1, GR2, CHECK) \
   MM_BIN_OP1(R, operator  +, M1, M2, GR1, GR2, CHECK)
 
-#define MM_CMP_OP1(F, OP, M1, C1, M2, C2, GR1, GR2, CHECKTYPE, ONE_MT_RESULT, TWO_MT_RESULT) \
+#define MM_CMP_OP1(F, OP, M1, C1, M2, C2, GR1, GR2, CHECKTYPE) \
   boolMatrix \
   F (const M1& m1, const M2& m2) \
   { \
@@ -270,22 +270,15 @@
  \
     if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
-	if (m1_nr == 0 && m1_nc == 0) \
-	  r = TWO_MT_RESULT; \
-	else \
-	  { \
-	    r.resize (m1_nr, m1_nc); \
+	  r.resize (m1_nr, m1_nc); \
  \
-	    for (int j = 0; j < m1_nc; j++) \
-	      for (int i = 0; i < m1_nr; i++) \
-		r(i, j) = C1 (m1(i, j)) OP C2 (m2(i, j)); \
-	  } \
+	  for (int j = 0; j < m1_nc; j++) \
+	    for (int i = 0; i < m1_nr; i++) \
+	      r(i, j) = C1 (m1(i, j)) OP C2 (m2(i, j)); \
       } \
     else \
       { \
-	if ((m1_nr == 0 && m1_nc == 0) || (m2_nr == 0 && m2_nc == 0)) \
-	  r = ONE_MT_RESULT; \
-	else if ((m1_nr == 1 && m1_nc == 1) && (m2_nr > 0 && m2_nc > 0)) \
+	if ((m1_nr == 1 && m1_nc == 1) && (m2_nr > 0 && m2_nc > 0)) \
 	  { \
 	    r.resize(m2_nr,m2_nc); \
 	    for (int i=0; i<m2_nr; i++) \
@@ -307,12 +300,12 @@
   }
 
 #define MM_CMP_OPS1(M1, C1, M2, C2, GR1, GR2, CHECK) \
-  MM_CMP_OP1(mx_el_lt, <,  M1, C1, M2, C2, GR1, GR2, CHECK, NBM, NBM) \
-  MM_CMP_OP1(mx_el_le, <=, M1, C1, M2, C2, GR1, GR2, CHECK, NBM, NBM) \
-  MM_CMP_OP1(mx_el_ge, >=, M1, C1, M2, C2, GR1, GR2, CHECK, NBM, NBM) \
-  MM_CMP_OP1(mx_el_gt, >,  M1, C1, M2, C2, GR1, GR2, CHECK, NBM, NBM) \
-  MM_CMP_OP1(mx_el_eq, ==, M1,   , M2,   , GR1, GR2, CHECK, FBM, TBM) \
-  MM_CMP_OP1(mx_el_ne, !=, M1,   , M2,   , GR1, GR2, CHECK, TBM, FBM) \
+  MM_CMP_OP1(mx_el_lt, <,  M1, C1, M2, C2, GR1, GR2, CHECK) \
+  MM_CMP_OP1(mx_el_le, <=, M1, C1, M2, C2, GR1, GR2, CHECK) \
+  MM_CMP_OP1(mx_el_ge, >=, M1, C1, M2, C2, GR1, GR2, CHECK) \
+  MM_CMP_OP1(mx_el_gt, >,  M1, C1, M2, C2, GR1, GR2, CHECK) \
+  MM_CMP_OP1(mx_el_eq, ==, M1,   , M2,   , GR1, GR2, CHECK) \
+  MM_CMP_OP1(mx_el_ne, !=, M1,   , M2,   , GR1, GR2, CHECK) \
 
 #define MM_BOOL_OP1(F, OP, M1, M2, ZERO, GR1, GR2, CHECKTYPE) \
   boolMatrix \
