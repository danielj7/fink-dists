Package: ghc-split
Version: 0.2.2
Revision: 5
Source: http://hackage.haskell.org/package/split-%v/split-%v.tar.gz
Source-MD5: 8178c7e70b07fe4415d7dbd12617e8b5
SourceDirectory: split-%v

BuildDepends: <<
  fink (>= 0.38.3),
  ghc (>= 7.8.3-1), ghc (<< 7.8.4-1)
<<

Depends: <<
  ghc (>= 7.8.3-1), ghc (<< 7.8.4-1)
<<

CompileScript: <<
runghc Setup.lhs configure --prefix=%p --docdir=%p/share/doc/%n
runghc Setup.lhs build
runghc Setup.lhs haddock
runghc Setup.lhs register --gen-script
runghc Setup.lhs unregister --gen-script
<<
InstallScript: runghc Setup.lhs copy --destdir=%d

Shlibs: <<
@rpath/libHSsplit-0.2.2-ghc7.8.3.dylib 0.0.0 %n (>= 0.2.2-3)
<<

DocFiles: CHANGES LICENSE README register.sh unregister.sh

PostInstScript: %p/share/doc/%n/register.sh
PreRmScript: sh %p/share/doc/%n/unregister.sh --force

Description: Combinator library for splitting lists
DescDetail: <<
A collection of various methods for splitting lists into parts, akin
to the "split" function found in several mainstream languages. Here is
its tale:

Once upon a time the standard Data.List module held no function for
splitting a list into parts according to a delimiter. Many a brave
lambda-knight strove to add such a function, but their striving was in
vain, for Lo, the Supreme Council fell to bickering amongst themselves
what was to be the essential nature of the One True Function which
could cleave a list in twain (or thrain, or any required number of
parts).

And thus came to pass the split package, comprising divers functions
for splitting a list asunder, each according to its nature. And the
Supreme Council had no longer any grounds for argument, for the
favored method of each was contained therein.

To get started, see the Data.List.Split module.
<<
Homepage: http://hackage.haskell.org/package/split
License: BSD
Maintainer: None <fink-devel@lists.sourceforge.net>
