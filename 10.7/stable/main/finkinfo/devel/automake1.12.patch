diff -ru automake-1.12.2/Makefile.in automake-1.12.2-patched/Makefile.in
--- automake-1.12.2/Makefile.in	2012-07-09 17:01:25.000000000 +0200
+++ automake-1.12.2-patched/Makefile.in	2012-07-11 13:48:53.000000000 +0200
@@ -4016,6 +4016,35 @@
 check-local: check-no-repeated-test-name
 .PHONY: check-no-repeated-test-name
 
+# Check that our test cases are syntactically correct.
+# See automake bug#11898.
+check-tests-syntax:
+	@st=0; \
+	err () { echo "$@: $$*" >&2; st=1; }; \
+	bases=`for log in : $(TEST_LOGS); do echo $$log; done \
+	  | sed -e '/^:$$/d' -e 's/\.log$$//'`; \
+	for bas in $$bases; do \
+	  for suf in sh tap pl; do \
+	    tst=$$bas.$$suf; \
+	    if test -f $$tst; then \
+	      break; \
+	    elif test -f $(srcdir)/$$tst; then \
+	      tst=$(srcdir)/$$tst; \
+	      break; \
+	    else \
+	      tst=''; \
+	    fi; \
+	  done; \
+	  test -n "$$tst" || err "couldn't find test '$$bas'"; \
+	  test $$suf = pl && continue; \
+	  $(AM_V_P) && echo " $(AM_TEST_RUNNER_SHELL) -n $$tst"; \
+	  $(AM_TEST_RUNNER_SHELL) -n "$$tst" \
+	    || err "test '$$tst' syntactically invalid"; \
+	done; \
+	exit $$st
+check-local: check-tests-syntax
+.PHONY: check-tests-syntax
+
 .PHONY: maintainer-check-list-of-tests
 maintainer-check-list-of-tests:
 	 @if diff -u /dev/null /dev/null >/dev/null 2>&1; then \
diff -ru automake-1.12.2/t/aclocal7.sh automake-1.12.2-patched/t/aclocal7.sh
--- automake-1.12.2/t/aclocal7.sh	2012-07-08 12:48:25.000000000 +0200
+++ automake-1.12.2-patched/t/aclocal7.sh	2012-07-10 16:28:18.000000000 +0200
@@ -45,6 +45,11 @@
   $AUTOMAKE --no-force
 }
 
+# aclocal will rewrite aclocal.m4 unless the input files are all older than the
+# existing aclocal.m4 -- sleep to ensure somedefs.m4 has an older timestamp
+# than the aclocal.m4 that the next aclocal call will generate.
+$sleep
+
 $ACLOCAL -I m4
 AUTOMAKE_after_aclocal
 
diff -ru automake-1.12.2/t/self-check-exit.tap automake-1.12.2-patched/t/self-check-exit.tap
--- automake-1.12.2/t/self-check-exit.tap	2012-07-08 11:40:09.000000000 +0200
+++ automake-1.12.2-patched/t/self-check-exit.tap	2012-07-11 13:22:14.000000000 +0200
@@ -22,7 +22,7 @@
 am_create_testdir=no
 . ./defs || exit 99
 
-plan_ 34
+plan_ 32
 
 # This test becomes more cumbersome if we keep the 'errexit' shell flag
 # set.  And removing it is no big deal, as this test is a TAP-based one,
@@ -79,10 +79,4 @@
 $AM_TEST_RUNNER_SHELL -c "$init ./Makefile; :" "$dummy_test_script"
 command_ok_ "permission denied" test $? -gt 0
 
-: Syntax errors in the test code.
-$AM_TEST_RUNNER_SHELL -c "$init if :; then" "$dummy_test_script"
-command_ok_ "syntax error 1" test $? -gt 0
-$AM_TEST_RUNNER_SHELL -c "$init true ( true )" "$dummy_test_script"
-command_ok_ "syntax error 2" test $? -gt 0
-
 :
diff -ru automake-1.12.2/t/self-check-explicit-skips.sh automake-1.12.2-patched/t/self-check-explicit-skips.sh
--- automake-1.12.2/t/self-check-explicit-skips.sh	2012-07-08 11:40:09.000000000 +0200
+++ automake-1.12.2-patched/t/self-check-explicit-skips.sh	2012-07-31 15:50:14.000000000 +0200
@@ -36,22 +36,19 @@
   " dummy.sh
 }
 
-run_dummy_test '(exit 77); exit 77'
+run_dummy_test 'exit 77'
 test $? -eq 77 || exit 1
 
 run_dummy_test 'sh -c "exit 77"' am_explicit_skips=no
 test $? -eq 77 || exit 1
 
-run_dummy_test '(exit 77); exit 77' am_explicit_skips=yes 
+run_dummy_test '$PERL -e "exit 77"; true' am_explicit_skips=yes 
 test $? -eq 78 || exit 1
 
-run_dummy_test 'sh -c "exit 77"' am_explicit_skips=y
+run_dummy_test 'sh -c "exit 77"; exit 0' am_explicit_skips=y
 test $? -eq 78 || exit 1
 
-run_dummy_test 'exit 77' am_explicit_skips=yes
-test $? -eq 77 || exit 1
-
-run_dummy_test 'skip_ "foo"' am_explicit_skips=y
+run_dummy_test 'skip_ "foo"; :' am_explicit_skips=y
 test $? -eq 77 || exit 1
 
 :
diff -ru automake-1.12.2/t/suffix10.tap automake-1.12.2-patched/t/suffix10.tap
--- automake-1.12.2/t/suffix10.tap	2012-07-08 11:40:09.000000000 +0200
+++ automake-1.12.2-patched/t/suffix10.tap	2012-07-10 16:31:39.000000000 +0200
@@ -57,11 +57,22 @@
 int foo (void) { return yyparse(); }
 END
 
+# We must protect the TAP driver from the output of configure, since
+# that might output a stray "ok" on a line of its own (due to a
+# libtool bug on Mac OS X), thus causing a spurious test result to
+# be seen.  See automake bug#11897.
+run_configure ()
+{
+  st=0; ./configure >output 2>&1 || st=1
+  sed 's/^/  /' output
+  test $st -eq 0
+}
+
 command_ok_ "libtoolize" libtoolize --force
 command_ok_ "aclocal"    $ACLOCAL
 command_ok_ "autoconf"   $AUTOCONF
 command_ok_ "automake"   $AUTOMAKE --add-missing
-command_ok_ "configure"  ./configure
+command_ok_ "configure"  run_configure
 command_ok_ "make test"  $MAKE test
 
 directive=''; make_can_chain_suffix_rules || directive=TODO
diff -ru automake-1.12.2/t/suffix8.tap automake-1.12.2-patched/t/suffix8.tap
--- automake-1.12.2/t/suffix8.tap	2012-07-08 11:40:09.000000000 +0200
+++ automake-1.12.2-patched/t/suffix8.tap	2012-07-10 16:31:39.000000000 +0200
@@ -75,11 +75,22 @@
 echo 'int main (void) { return 0; }' > foo.x_
 echo 'int bar (void) { return 0; }' > bar.x_
 
+# We must protect the TAP driver from the output of configure, since
+# that might output a stray "ok" on a line of its own (due to a
+# libtool bug on Mac OS X), thus causing a spurious test result to
+# be seen.  See automake bug#11897.
+protect_output ()
+{
+  st=0; "$@" >output 2>&1 || st=1
+  sed 's/^/  /' output
+  test $st -eq 0
+}
+
 command_ok_ "libtoolize" libtoolize
 command_ok_ "aclocal"    $ACLOCAL
 command_ok_ "autoconf"   $AUTOCONF
 command_ok_ "automake"   $AUTOMAKE -a
-command_ok_ "configure"  ./configure
+command_ok_ "configure"  protect_output ./configure
 command_ok_ "make test0" env OBJEXT=foo $MAKE -e test0
 command_ok_ "make test1" $MAKE test1
 
@@ -88,7 +99,7 @@
 for target in test2 all distcheck; do
   command_ok_ "make $target"  \
               -D "$directive" -r "suffix rules not chained" \
-              $MAKE $target
+              protect_output $MAKE $target
 done
 
 :
