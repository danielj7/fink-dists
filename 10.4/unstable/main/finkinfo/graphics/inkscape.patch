diff -Nurd inkscape-0.44.1-orig/share/extensions/Makefile.am inkscape-0.44.1/share/extensions/Makefile.am
--- inkscape-0.44.1-orig/share/extensions/Makefile.am	2006-09-06 07:43:07.000000000 +0200
+++ inkscape-0.44.1/share/extensions/Makefile.am	2006-09-09 10:14:25.000000000 +0200
@@ -71,7 +71,6 @@
 	dia.inx \
 	epsi_output.inx \
 	pdf_output.inx \
-	pdf_output_via_gs_on_win32.inx \
 	txt2svg.inx \
 	dots.inx \
 	ffmet.inx \
diff -Nurd inkscape-0.44.1-orig/share/extensions/Makefile.in inkscape-0.44.1/share/extensions/Makefile.in
--- inkscape-0.44.1-orig/share/extensions/Makefile.in	2006-09-07 09:21:31.000000000 +0200
+++ inkscape-0.44.1/share/extensions/Makefile.in	2006-09-09 10:14:53.000000000 +0200
@@ -294,7 +294,6 @@
 	dia.inx \
 	epsi_output.inx \
 	pdf_output.inx \
-	pdf_output_via_gs_on_win32.inx \
 	txt2svg.inx \
 	dots.inx \
 	ffmet.inx \
diff -Nurd inkscape-0.44.1-orig/share/extensions/eqtexsvg.py inkscape-0.44.1/share/extensions/eqtexsvg.py
--- inkscape-0.44.1-orig/share/extensions/eqtexsvg.py	2006-09-06 07:43:07.000000000 +0200
+++ inkscape-0.44.1/share/extensions/eqtexsvg.py	2006-09-09 08:59:34.000000000 +0200
@@ -7,10 +7,12 @@
     - a TEX/LATEX distribution (MiKTEX ...)
     - pstoedit software: <http://www.pstoedit.net/pstoedit>
 
-Copyright (C) 2006 Julien Vitard, julienvitard@gmail.com
+Copyright (C) 2006 Julien Vitard, julienvitard@gmail.com
 
 - I will try to code XML parsing, not the hard way ;-)
 
+Modified for use with skconvert by Tavmjong Bah
+
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
@@ -30,92 +32,110 @@
 import inkex, os, tempfile
 
 def create_equation_tex(filename, equation):
-    tex = open(filename, 'w')
-    tex.write("""%% processed with EqTeXSVG.py
+	tex = open(filename, 'w')
+	tex.write("""%% processed with EqTeXSVG.py
 \documentclass{article}
-    
+	
 \\thispagestyle{empty}
 \\begin{document}
 """)
-    tex.write("$$\n")
-    tex.write(equation)
-    tex.write("\n$$\n")
-    tex.write("\end{document}\n")
-    tex.close()
+	tex.write("$$\n")
+	tex.write(equation)
+	tex.write("\n$$\n")
+	tex.write("\end{document}\n")
+	tex.close()
 
 def svg_open(self,filename):
-    # parsing of SVG file with the equation 
-    # real parsing XML to use!!!! it will be easier !!!
-    svg = open(filename, 'r')
-    svg_lines = svg.readlines()
-    
-    # trip top/bottom lines from svg file
-    svg_lines.pop(0)
-    svg_lines.pop(1)
-    svg_lines.pop(len(svg_lines)-1)
+# parsing of SVG file with the equation 
+# real parsing XML to use!!!! it will be easier !!!
+        svg = open(filename, 'r')
+        svg_lines = svg.readlines()
 
-    group = self.document.createElement('svg:g')
-    self.current_layer.appendChild(group)
+# Trim first line --- firstline <?xml... seems to be already removed but it doesn't
+# hurt to remomve the <svg line too.
+        svg_lines.pop(0)
 
-    # deleting "<g... >" "</g>" "<path d=" and "/>" from svg_lines
-    nodegroup=''
-    s_nodegroup_path=''
-        
-    for i in range(1,len(svg_lines)):
-        if svg_lines[i].find("<g") != -1:
-            nodegroup=svg_lines[i].split("<g")
-            nodegroup=nodegroup[1].split(" >")
-            nodegroup=nodegroup[0]+'\n'
-        elif svg_lines[i].find("<path d=") != -1:
-            s_nodegroup_path=svg_lines[i].split("<path d=")
-            s_nodegroup_path=s_nodegroup_path[1]                
-        elif svg_lines[i].find("/>") != -1:
-            s_nodegroup_path=s_nodegroup_path+'"\n'
-        elif svg_lines[i].find("</g>") != -1:
-            nodegroup_svg = self.document.createElement('svg:g')
-            nodegroup_svg.setAttribute('style',nodegroup)
-            nodegroup_path = self.document.createElement('svg:path')
-            nodegroup_path.setAttribute('d',s_nodegroup_path)
-            group.appendChild(nodegroup_svg)                
-            nodegroup_svg.appendChild(nodegroup_path)
-        else:
-            s_nodegroup_path=s_nodegroup_path+svg_lines[i]
 
-class EQTEXSVG(inkex.Effect):
-    def __init__(self):
-        inkex.Effect.__init__(self)
-        self.OptionParser.add_option("-f", "--formule",
-                        action="store", type="string", 
-                        dest="formule", default=10.0,
-                        help="Formule LaTeX")
-    def effect(self):
-        
-        base_file = os.path.join(tempfile.gettempdir(), "inkscape-latex.tmp")
-        latex_file = base_file + ".tex"
-        create_equation_tex(latex_file, self.options.formule)
+        group = self.document.createElement('svg:g')
+        self.document.documentElement.appendChild(group)
 
-        out_file = os.path.join(tempfile.gettempdir(), "inkscape-latex.tmp.output")
-        os.system('latex -output-directory=' + tempfile.gettempdir() + ' ' + latex_file + '> ' + out_file)
+# Deleting  <svg>, <defs>, <g>
+# This is customized explicitely for skconvert's SVG output
+        nodegroup=''
+        s_nodegroup_path=''
+        temp_parts = ''
+	
+        skip = 0;
+        for i in range(1,len(svg_lines)):
+            if svg_lines[i].find("<svg") != -1:
+		    # Do nothing
+		    nothing = 1
+            elif svg_lines[i].find("</svg>") != -1:
+		    # Do nothing
+		    nothing = 1;
+            elif svg_lines[i].find("<g>") != -1:
+		    # Do nothing
+		    nothing = 1;
+            elif svg_lines[i].find("</g>") != -1:
+		    # Do nothing
+		    nothing = 1;
+            elif svg_lines[i].find("<defs>") != -1:
+		    skip = 1;
+	    elif svg_lines[i].find("</defs>") != -1:
+	            skip = 0;
+	    elif skip == 1:
+		    # Do nothing (skipping defs)
+		    nothing = 1
+	    elif svg_lines[i].find("<path") != -1:
+		    # skencil paths are on one line
+                temp_parts=svg_lines[i].split("d=")
+                temp_parts=temp_parts[1]
+                temp_parts=temp_parts.split("/>")
+		temp_parts=temp_parts[0]
+                nodegroup_path = self.document.createElement('svg:path')
+                nodegroup_path.setAttribute('d',temp_parts)
+                group.appendChild(nodegroup_path)
+	    else:
+		    # Do nothing: shouldn't reach
+		    nothing = 1
 
-        ps_file = base_file + ".ps"
-        dvi_file = base_file + ".dvi"
-        svg_file = base_file + ".svg"
-        os.system('dvips -q -f -E -D 600 -y 5000 -o ' + ps_file + ' ' + dvi_file)
-        os.system('pstoedit -f svg -dt -ssp ' + ps_file + ' ' + svg_file + '>> ' + out_file)
+class EQTEXSVG(inkex.Effect):
+	def __init__(self):
+		inkex.Effect.__init__(self)
+		self.OptionParser.add_option("-f", "--formule",
+						action="store", type="string", 
+						dest="formule", default=10.0,
+						help="Formule LaTeX")
+	def effect(self):
+		
+		base_file = os.path.join(tempfile.gettempdir(), "inkscape-latex.tmp")
+		latex_file = base_file + ".tex"
+		create_equation_tex(latex_file, self.options.formule)
 
-        # ouvrir le svg et remplacer #7F7F7F par #000000
-        svg_open(self, svg_file)
+		out_file = os.path.join(tempfile.gettempdir(), "inkscape-latex.tmp.output")
+		os.system('latex -output-directory=' + tempfile.gettempdir() + ' ' + latex_file + '> ' + out_file)
 
-        # clean up
-        aux_file = base_file + ".aux"
-        log_file = base_file + ".log"
-        os.remove(latex_file)
-        os.remove(aux_file)
-        os.remove(log_file)
-        os.remove(dvi_file)
-        os.remove(ps_file)
-        os.remove(svg_file)
-        os.remove(out_file)
-        
+		ps_file = base_file + ".ps"
+		dvi_file = base_file + ".dvi"
+		sk_file  = base_file + ".sk"
+		svg_file = base_file + ".svg"
+		os.system('dvips -q -f -E -D 600 -y 5000 -o ' + ps_file + ' ' + dvi_file)
+		os.system('pstoedit -f sk -dt -ssp ' + ps_file + ' ' + sk_file + '>> ' + out_file)
+		os.system('skconvert ' + sk_file + ' ' + svg_file + '>> ' + out_file)
+		# ouvrir le svg et remplacer #7F7F7F par #000000
+		svg_open(self, svg_file)
+
+	      # clean up
+		aux_file = base_file + ".aux"
+		log_file = base_file + ".log"
+		os.remove(latex_file)
+		os.remove(aux_file)
+		os.remove(log_file)
+		os.remove(dvi_file)
+		os.remove(ps_file)
+		os.remove(sk_file)
+		os.remove(svg_file)
+		os.remove(out_file)
+		
 e = EQTEXSVG()
 e.affect()
