Package:cctbx
Version: 70818
# 2007_08_18_1856
Revision: 1001
GCC: 4.0
BuildDependsOnly: false
NoSourceDirectory: true
NoSetLDFLAGS: true
NoSetCPPFLAGS: true
Source: http://cci.lbl.gov/cctbx_build/results/2007_08_18_1856/cctbx_bundle.tar.gz
Source-MD5: 8d1ec7c39128c6b04be6aea5b4cb4555
SourceRename: %n-%v.tar.gz
Description: Computational Crystallography Toolbox
DescDetail: <<
The Computational Crystallography Toolbox (cctbx) is being developed as the
open source component of the PHENIX system. The goal of the PHENIX project is
to advance automation of macromolecular structure determination. PHENIX
depends on the cctbx, but not vice versa. This hierarchical approach enforces
a clean design as a reusable library. The cctbx is therefore also useful for
small-molecule crystallography and even general scientific applications.

The cctbx code base is available without restrictions and free of charge to
all interested developers, both academic and commercial. The entire community
is invited to actively participate in the development of the code base. A
sophisticated technical infrastructure that enables community based software
development is provided by SourceForge. This service is also free of charge
and open to the entire world.

The cctbx is designed with an open and flexible architecture to promote
extendability and easy incorporation into other software environments. The
package is organized as a set of ISO C++ classes with Python bindings. This
organization combines the computational efficiency of a strongly typed
compiled language with the convenience and flexibility of a dynamically typed
scripting language in a strikingly uniform and very maintainable way.

Use of the Python interfaces is highly recommended, but optional. The cctbx
can also be used purely as a C++ class library. The SourceForge cctbx project
currently contains these modules:

libtbx: The build system common to all other modules. This is a very thin
wrapper around the SCons software construction tool.

boost_adaptbx: A very small adaptor toolbox with platform-independent
instructions for building the Boost.Python library.

scitbx: Libraries for general scientific computing (i.e.  libraries that are
not specific to crystallographic applications): a family of high-level C++
array types, a fast Fourier transform library, and a C++ port of the popular
LBFGS conjugate gradient minimizer, all including Python bindings. These
libraries are separated from the crystallographic code base to make them
easily accessible for non-crystallographic application developers.

cctbx: Libraries for general crystallographic applications, useful for both
small-molecule and macro-molecular crystallography. The libraries in the cctbx
module cover everything from algorithms for the handling of unit cells to
high-level building blocks for refinement algorithms. Note the distinction
between the cctbx project and the cctbx module. In retrospect we should have
chosen a different name for the project, but the current naming reflects how
the modules have evolved and it would be too disruptive to start a grand
renaming.

iotbx: The youngest member in the family: evolving libraries for reading and
writing established file formats.
<<
CompileScript: <<
#!/bin/sh -efv
mkdir cctbx_build
cd cctbx_build
# requires a Framwork python build
/System/Library/Frameworks/Python.framework/Versions/Current/bin/python \
                ../cctbx_sources/libtbx/configure.py  mmtbx 
# The last command initializes the cctbx_build directory and creates 
# a file setpaths.csh (among others). This file must be used to initialize
# a new shell or process with the cctbx settings:

source setpaths.sh

# Find the number of cpus:
num_cpu=$( sysctl hw.logicalcpu | awk '{print $NF}' )
# On a machine with multiple CPUs enter:

libtbx.scons -j $num_cpu .
<<
InstallScript: <<
perl -pi -e 's|prepend|append|g' %n_build/setpaths.csh
perl -pi -e 's|prepend|append|g' %n_build/setpaths.sh
mkdir -p %i/share/xtal/%n
cp -R *  %i/share/xtal/%n/. 
#
# Set up startup scripts
mkdir -p %i/etc/profile.d
echo "source %p/share/xtal/%n/%n_build/setpaths.sh" > %i/etc/profile.d/%n.sh
echo "source %p/share/xtal/%n/%n_build/setpaths.csh" > %i/etc/profile.d/%n.csh
chmod a+x %i/etc/profile.d/%n.*
<<
PostInstScript: <<
# This changes the paths for the shell and python scripts to those of the
# final install point rather than the build or debian root directory.
cd %p/share/xtal/%n/cctbx_build
/System/Library/Frameworks/Python.framework/Versions/Current/bin/python \
                ../cctbx_sources/libtbx/configure.py mmtbx
#
<<
License: OSI-Approved
Maintainer: W. G. Scott <wgscott@users.sourceforge.net> 
Homepage: http://cctbx.sourceforge.net/
