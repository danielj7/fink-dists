diff -ru cffi-1.10.0.orig/testing/cffi0/test_verify.py cffi-1.10.0/testing/cffi0/test_verify.py
--- cffi-1.10.0.orig/testing/cffi0/test_verify.py	2017-03-21 06:41:29.000000000 -0400
+++ cffi-1.10.0/testing/cffi0/test_verify.py	2017-07-24 18:19:52.000000000 -0400
@@ -15,7 +15,7 @@
     if (sys.platform == 'darwin' and
           [int(x) for x in os.uname()[2].split('.')] >= [11, 0, 0]):
         # assume a standard clang or gcc
-        extra_compile_args = ['-Werror', '-Wall', '-Wextra', '-Wconversion']
+        extra_compile_args = ['-Werror', '-Wall', '-Wextra', '-Wconversion', '-Wno-unreachable-code', '-Wno-shift-negative-value']
         # special things for clang
         extra_compile_args.append('-Qunused-arguments')
     else:
diff -ru cffi-1.10.0.orig/testing/cffi1/test_recompiler.py cffi-1.10.0/testing/cffi1/test_recompiler.py
--- cffi-1.10.0.orig/testing/cffi1/test_recompiler.py	2017-03-21 06:41:29.000000000 -0400
+++ cffi-1.10.0/testing/cffi1/test_recompiler.py	2017-07-24 18:46:37.000000000 -0400
@@ -1,6 +1,6 @@
 
 import sys, os, py
-from cffi import FFI, VerificationError, FFIError
+from cffi import FFI, VerificationError, FFIError, CDefError
 from cffi import recompiler
 from testing.udir import udir
 from testing.support import u, long
@@ -1125,7 +1125,7 @@
 
 def test_some_float_invalid_1():
     ffi = FFI()
-    py.test.raises(FFIError, ffi.cdef, "typedef long double... foo_t;")
+    py.test.raises(CDefError, ffi.cdef, "typedef long double... foo_t;")
 
 def test_some_float_invalid_2():
     ffi = FFI()
diff -ru cffi-1.10.0.orig/testing/cffi1/test_verify1.py cffi-1.10.0/testing/cffi1/test_verify1.py
--- cffi-1.10.0.orig/testing/cffi1/test_verify1.py	2017-03-21 06:41:29.000000000 -0400
+++ cffi-1.10.0/testing/cffi1/test_verify1.py	2017-07-24 18:47:12.000000000 -0400
@@ -1,5 +1,5 @@
 import os, sys, math, py
-from cffi import FFI, FFIError, VerificationError, VerificationMissing, model
+from cffi import FFI, FFIError,CDefError, VerificationError, VerificationMissing, model
 from cffi import recompiler
 from testing.support import *
 import _cffi_backend
@@ -15,7 +15,7 @@
     if (sys.platform == 'darwin' and
           [int(x) for x in os.uname()[2].split('.')] >= [11, 0, 0]):
         # assume a standard clang or gcc
-        extra_compile_args = ['-Werror', '-Wall', '-Wextra', '-Wconversion']
+        extra_compile_args = ['-Werror', '-Wall', '-Wextra', '-Wconversion', '-Wno-unreachable-code', '-Wno-shift-negative-value']
         # special things for clang
         extra_compile_args.append('-Qunused-arguments')
     else:
@@ -2092,7 +2092,7 @@
         ffi1 = FFI()
         ffi1.cdef("int foo_verify_dlopen_flags_1;")
         sys.setdlopenflags(ffi1.RTLD_GLOBAL | ffi1.RTLD_NOW)
-        lib1 = ffi1.verify("int foo_verify_dlopen_flags_1;")
+        lib1 = ffi1.verify("int foo_verify_dlopen_flags_1;", extra_link_args=["-Wl,-flat_namespace"])
     finally:
         sys.setdlopenflags(old)
 
@@ -2101,7 +2101,7 @@
     lib2 = ffi2.verify("""
         extern int foo_verify_dlopen_flags_1;
         static int *getptr(void) { return &foo_verify_dlopen_flags_1; }
-    """)
+    """, extra_link_args=["-Wl,-flat_namespace", "-Wl,-undefined,suppress"])
     p = lib2.getptr()
     assert ffi1.addressof(lib1, 'foo_verify_dlopen_flags_1') == p
 
@@ -2209,7 +2209,7 @@
 
 def test_unsupported_some_primitive_types():
     ffi = FFI()
-    py.test.raises(FFIError, ffi.cdef, """typedef void... foo_t;""")
+    py.test.raises(CDefError, ffi.cdef, """typedef void... foo_t;""")
     #
     ffi.cdef("typedef int... foo_t;")
     py.test.raises(VerificationError, ffi.verify, "typedef float foo_t;")
