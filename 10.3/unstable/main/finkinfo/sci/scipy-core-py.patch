--- numpy/numpy/distutils/fcompiler/__init__.py.orig	2006-01-23 13:05:56.000000000 -0700
+++ numpy/numpy/distutils/fcompiler/__init__.py	2006-01-23 13:55:59.000000000 -0700
@@ -678,12 +678,11 @@
             pass
         except Exception, msg:
             log.warn(msg)
-        if v is None:
+        # code to find version numbers is broken, so hardwire
+        #if compiler not in ['gnu95','gnu','g95','ibm']:
+        if compiler not in ['gnu','g95','gnu95','ibm']:
             compilers_na.append(("fcompiler="+compiler, None,
                               fcompiler_class[compiler][2]))
-        elif v=='N/A':
-            compilers_ni.append(("fcompiler="+compiler, None,
-                                 fcompiler_class[compiler][2]))
         else:
             compilers.append(("fcompiler="+compiler, None,
                               fcompiler_class[compiler][2] + ' (%s)' % v))
--- numpy/numpy/distutils/fcompiler/gnu.py.orig	2006-01-23 06:25:07.000000000 -0700
+++ numpy/numpy/distutils/fcompiler/gnu.py	2006-01-23 06:21:38.000000000 -0700
@@ -29,7 +29,8 @@
         'compiler_f77' : [fc_exe,"-Wall","-fno-second-underscore"],
         'compiler_f90' : None,
         'compiler_fix' : None,
-        'linker_so'    : [fc_exe,"-Wall"],
+#        'linker_so'    : [fc_exe,"-Wall"],
+        'linker_so'    : [fc_exe+" -undefined dynamic_lookup -bundle"],
         'archiver'     : ["ar", "-cr"],
         'ranlib'       : ["ranlib"],
         'linker_exe'   : [fc_exe,"-Wall"]
@@ -64,7 +65,7 @@
             os.environ['MACOSX_DEPLOYMENT_TARGET'] = '%s.%s' % (major,
                 minor)
 
-            opt.extend(['-undefined', 'dynamic_lookup', '-bundle'])
+            #opt.extend(['-undefined', 'dynamic_lookup', '-bundle'])
         else:
             opt.append("-shared")
         if sys.platform[:5]=='sunos':
@@ -108,7 +109,11 @@
         if g2c is not None:
             opt.append(g2c)
         if sys.platform == 'darwin':
-            opt.append('cc_dynamic')
+            #opt.append('cc_dynamic')
+            import platform
+            opt = []
+            if platform.mac_ver()[0] < 10.4:
+                opt.append('cc_dynamic')
         return opt
 
     def get_flags_debug(self):
@@ -211,7 +216,8 @@
 class Gnu95FCompiler(GnuFCompiler):
 
     compiler_type = 'gnu95'
-    version_pattern = r'GNU Fortran 95 \(GCC (?P<version>[^\s*\)]+)'
+    version_pattern = r'GNU Fortran 95 ((\(GCC[^\)]*(\)\)|\)))|)\s*'\
+                      '(?P<version>[^\s*\)]+)'
 
     # 'gfortran --version' results:
     # Debian: GNU Fortran 95 (GCC 4.0.3 20051023 (prerelease) (Debian 4.0.2-3))
@@ -224,7 +230,8 @@
         'compiler_f77' : [fc_exe,"-Wall","-ffixed-form","-fno-second-underscore"],
         'compiler_f90' : [fc_exe,"-Wall","-fno-second-underscore"],
         'compiler_fix' : [fc_exe,"-Wall","-ffixed-form","-fno-second-underscore"],
-        'linker_so'    : [fc_exe,"-Wall"],
+        #'linker_so'    : [fc_exe,"-Wall"],
+        'linker_so'    : [fc_exe+" -undefined dynamic_lookup -bundle"],
         'archiver'     : ["ar", "-cr"],
         'ranlib'       : ["ranlib"],
         'linker_exe'   : [fc_exe,"-Wall"]
--- numpy/numpy/distutils/fcompiler/g95.py.orig	2006-01-23 06:25:18.000000000 -0700
+++ numpy/numpy/distutils/fcompiler/g95.py	2006-01-23 06:23:26.000000000 -0700
@@ -9,14 +9,16 @@
 class G95FCompiler(FCompiler):
 
     compiler_type = 'g95'
-    version_pattern = r'G95.*\(experimental\) \(g95!\) (?P<version>.*)\).*'
+    version_pattern = r'G95 ((\(GCC[^\)]*(\)\)|\)))|)\s*'\
+                      '(?P<version>[^\s*\)]+)'
 
     executables = {
         'version_cmd'  : ["g95", "--version"],
         'compiler_f77' : ["g95", "-ffixed-form"],
         'compiler_fix' : ["g95", "-ffixed-form"],
         'compiler_f90' : ["g95"],
-        'linker_so'    : ["g95","-shared"],
+        #'linker_so'    : ["g95","-shared"],
+        'linker_so'    : ["g95 -undefined dynamic_lookup -bundle"],
         'archiver'     : ["ar", "-cr"],
         'ranlib'       : ["ranlib"]
         }
--- numpy/numpy/distutils/fcompiler/ibm.py.orig	2006-01-23 06:27:47.000000000 -0700
+++ numpy/numpy/distutils/fcompiler/ibm.py	2006-01-23 06:22:55.000000000 -0700
@@ -4,18 +4,30 @@
 
 from numpy.distutils.fcompiler import FCompiler
 from distutils import log
+from numpy.distutils.exec_command import exec_command, find_executable
 
 class IbmFCompiler(FCompiler):
 
     compiler_type = 'ibm'
     version_pattern =  r'xlf\(1\)\s*IBM XL Fortran (Advanced Edition |)Version (?P<version>[^\s*]*)'
 
+    for fc_exe in map(find_executable,['xlf']):
+        if os.path.isfile(fc_exe):
+              break
+    for f90_exe in map(find_executable,['xlf90']):
+        if os.path.isfile(f90_exe):
+              break
+    for f95_exe in map(find_executable,['xlf95']):
+        if os.path.isfile(f95_exe):
+              break
+
     executables = {
-        'version_cmd'  : ["xlf"],
-        'compiler_f77' : ["xlf"],
-        'compiler_fix' : ["xlf90", "-qfixed"],
-        'compiler_f90' : ["xlf90"],
-        'linker_so'    : ["xlf95"],
+        'version_cmd'  : [fc_exe],
+        'compiler_f77' : [fc_exe],
+        'compiler_fix' : [f90_exe+" -qfixed"],
+        'compiler_f90' : [f90_exe],
+        #'linker_so'    : ["xlf95"],
+        'linker_so'    : [f95_exe+" -undefined dynamic_lookup -bundle"],
         'archiver'     : ["ar", "-cr"],
         'ranlib'       : ["ranlib"]
         }
@@ -31,9 +43,9 @@
             l.sort()
             l.reverse()
             l = [d for d in l if os.path.isfile(os.path.join(xlf_dir,d,'xlf.cfg'))]
-            if not l:
-                from distutils.version import LooseVersion
-                self.version = version = LooseVersion(l[0])
+            #if not l:
+            from distutils.version import LooseVersion
+            self.version = version = LooseVersion(l[0])
         return version
 
     def get_flags(self):
@@ -45,7 +57,8 @@
     def get_flags_linker_so(self):
         opt = []
         if sys.platform=='darwin':
-            opt.append('-Wl,-bundle,-flat_namespace,-undefined,suppress')
+            #opt.append('-Wl,-bundle,-flat_namespace,-undefined,suppress')
+            pass
         else:
             opt.append('-bshared')
         version = self.get_version(ok_status=[0,40])
Index: numpy/core/setup.py
===================================================================
--- numpy/numpy/core/setup.py	(.../tags/0.9.4)	(revision 1978)
+++ numpy/numpy/core/setup.py	(.../trunk)	(revision 1978)
@@ -1,6 +1,7 @@
 
 import imp
 import os
+import sys
 from os.path import join
 from glob import glob
 from distutils.dep_util import newer,newer_group
@@ -71,7 +72,12 @@
                 moredefs.append('HAVE_ISNAN')
             if config_cmd.check_func('isinf', **kws_args):
                 moredefs.append('HAVE_ISINF')
-
+                
+            if sys.version[:3] < '2.4':
+                kws_args['headers'].append('stdlib.h')
+                if config_cmd.check_func('strtod', **kws_args):
+                    moredefs.append(('PyOS_ascii_strtod', 'strtod'))
+                    
             if moredefs:
                 target_f = open(target,'a')
                 for d in moredefs:
Index: numpy/core/src/arraytypes.inc.src
===================================================================
--- numpy/numpy/core/src/arraytypes.inc.src	(.../tags/0.9.4)	(revision 1978)
+++ numpy/numpy/core/src/arraytypes.inc.src	(.../trunk)	(revision 1978)
@@ -775,6 +775,7 @@
 #fname=FLOAT,DOUBLE,LONGDOUBLE#
 #type=float,double,longdouble#
 */
+#if (PY_VERSION_HEX >= 0x02040000) || defined(PyOS_ascii_strtod)
 static int
 @fname@_fromstr(char *str, @type@ *ip, char **endptr, void *ignore)
 {
@@ -784,6 +785,9 @@
 	*ip = (@type@) result;
 	return 0;
 }
+#else
+#define @fname@_fromstr NULL
+#endif
 /**end repeat**/
 
