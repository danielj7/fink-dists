diff -Naur vim7.1.orig/src/Makefile vim7.1/src/Makefile
--- vim7.1.orig/src/Makefile	2007-08-13 11:22:13.000000000 -0700
+++ vim7.1/src/Makefile	2007-08-13 11:37:04.000000000 -0700
@@ -357,7 +357,7 @@
 # DARWIN - detecting Mac OS X
 # Uncomment this line when you want to compile a Unix version of Vim on
 # Darwin.  None of the Mac specific options or files will be used.
-#CONF_OPT_DARWIN = --disable-darwin
+CONF_OPT_DARWIN = --disable-darwin
 
 # Select the architecture supported.  Default is to build for the current
 # platform.  Use "both" for a universal binary.  That probably doesn't work
diff -Naur vim7.1.orig/src/auto/configure vim7.1/src/auto/configure
--- vim7.1.orig/src/auto/configure	2007-08-13 11:22:13.000000000 -0700
+++ vim7.1/src/auto/configure	2007-08-13 11:37:05.000000000 -0700
@@ -3005,11 +3005,11 @@
     OS_EXTRA_SCR="os_macosx.c os_mac_conv.c";
     OS_EXTRA_OBJ="objects/os_macosx.o objects/os_mac_conv.o"
         CPPFLAGS="$CPPFLAGS -DMACOS_X_UNIX -no-cpp-precomp"
-    if test "x$MACARCH" = "xboth"; then
+#    if test "x$MACARCH" = "xboth"; then
       CPPFLAGS="$CPPFLAGS -I/Developer/SDKs/MacOSX10.4u.sdk/Developer/Headers/FlatCarbon"
-    else
-      CPPFLAGS="$CPPFLAGS -I/Developer/Headers/FlatCarbon"
-    fi
+#    else
+#      CPPFLAGS="$CPPFLAGS -I/Developer/Headers/FlatCarbon"
+#    fi
 
                 echo "$as_me:$LINENO: checking for ANSI C header files" >&5
 echo $ECHO_N "checking for ANSI C header files... $ECHO_C" >&6
@@ -3427,7 +3427,7 @@
 if test -z "$have_local_include" -a -d /usr/local/include; then
   tt=`echo "$CPPFLAGS" | sed -e 's+-I/usr/local/include ++g' -e 's+-I/usr/local/include$++g'`
   if test "$tt" = "$CPPFLAGS"; then
-    CPPFLAGS="$CPPFLAGS -I/usr/local/include"
+    CPPFLAGS="$CPPFLAGS"
   fi
 fi
 
diff -Naur vim7.1.orig/src/os_unix.c vim7.1/src/os_unix.c
--- vim7.1.orig/src/os_unix.c	2007-08-13 11:22:15.000000000 -0700
+++ vim7.1/src/os_unix.c	2007-08-13 11:37:05.000000000 -0700
@@ -754,10 +754,12 @@
     {
 # ifdef HAVE_SIGALTSTACK
 #  ifdef __APPLE__
+#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1040
 	/* missing prototype.  Adding it to osdef?.h.in doesn't work, because
 	 * "struct sigaltstack" needs to be declared. */
 	extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));
 #  endif
+#  endif
 
 #  ifdef HAVE_SS_BASE
 	sigstk.ss_base = signal_stack;
