diff -ruN vigra-1.9.0-orig/vigranumpy/src/core/CMakeLists.txt vigra-1.9.0/vigranumpy/src/core/CMakeLists.txt
--- vigra-1.9.0-orig/config/VIGRA_ADD_NUMPY_MODULE.cmake	2012-11-06 07:34:42.000000000 -0500
+++ vigra-1.9.0/config/VIGRA_ADD_NUMPY_MODULE.cmake	2013-02-09 17:08:34.000000000 -0500
@@ -49,7 +49,7 @@
         set(LIBRARY_NAME ${target})
     ENDIF()
 
-    ADD_LIBRARY(${TARGET_NAME} SHARED ${SOURCES})    
+    ADD_LIBRARY(${TARGET_NAME} MODULE ${SOURCES})    
     
     IF(PART_OF_VIGRANUMPY)
         ADD_DEPENDENCIES(vigranumpy ${TARGET_NAME})
diff -ruN vigra-1.10.0-orig/include/vigra/multi_convolution.hxx vigra-1.10.0/include/vigra/multi_convolution.hxx
--- vigra-1.10.0-orig/include/vigra/multi_convolution.hxx	2013-11-18 10:48:16.000000000 -0600
+++ vigra-1.10.0/include/vigra/multi_convolution.hxx	2017-10-11 06:05:07.000000000 -0500
@@ -1362,7 +1362,7 @@
                   class T2, class S2>
         void
         gaussianGradientMultiArray(MultiArrayView<N, T1, S1> const & source,
-                                   MultiArrayView<N, TinyVector<T2, N>, S2> dest,
+                                   MultiArrayView<N, TinyVector<T2, int(N)>, S2> dest,
                                    double sigma,
                                    ConvolutionOptions<N> opt = ConvolutionOptions<N>());
 
@@ -1371,7 +1371,7 @@
                                   class T2, class S2>
         void
         gaussianGradientMultiArray(MultiArrayView<N, T1, S1> const & source,
-                                   MultiArrayView<N, TinyVector<T2, N>, S2> dest,
+                                   MultiArrayView<N, TinyVector<T2, int(N)>, S2> dest,
                                    ConvolutionOptions<N> opt);
     }
     \endcode
@@ -1517,7 +1517,7 @@
                           class T2, class S2>
 inline void
 gaussianGradientMultiArray(MultiArrayView<N, T1, S1> const & source,
-                           MultiArrayView<N, TinyVector<T2, N>, S2> dest,
+                           MultiArrayView<N, TinyVector<T2, int(N)>, S2> dest,
                            ConvolutionOptions<N> opt )
 {
     if(opt.to_point != typename MultiArrayShape<N>::type())
@@ -1541,7 +1541,7 @@
           class T2, class S2>
 inline void
 gaussianGradientMultiArray(MultiArrayView<N, T1, S1> const & source,
-                           MultiArrayView<N, TinyVector<T2, N>, S2> dest,
+                           MultiArrayView<N, TinyVector<T2, int(N)>, S2> dest,
                            double sigma,
                            ConvolutionOptions<N> opt = ConvolutionOptions<N>())
 {
@@ -1580,7 +1580,7 @@
     dest.init(0.0);
     
     typedef typename NumericTraits<T1>::RealPromote TmpType;
-    MultiArray<N, TinyVector<TmpType, N> > grad(dest.shape());
+    MultiArray<N, TinyVector<TmpType, int(N)> > grad(dest.shape());
     
     using namespace multi_math;
     
@@ -1686,7 +1686,7 @@
                                   class T2, class S2>
         void
         symmetricGradientMultiArray(MultiArrayView<N, T1, S1> const & source,
-                                    MultiArrayView<N, TinyVector<T2, N>, S2> dest,
+                                    MultiArrayView<N, TinyVector<T2, int(N)>, S2> dest,
                                     ConvolutionOptions<N> opt = ConvolutionOptions<N>());
     }
     \endcode
@@ -1801,7 +1801,7 @@
                           class T2, class S2>
 inline void
 symmetricGradientMultiArray(MultiArrayView<N, T1, S1> const & source,
-                            MultiArrayView<N, TinyVector<T2, N>, S2> dest,
+                            MultiArrayView<N, TinyVector<T2, int(N)>, S2> dest,
                             ConvolutionOptions<N> opt = ConvolutionOptions<N>())
 {
     if(opt.to_point != typename MultiArrayShape<N>::type())
@@ -2089,14 +2089,14 @@
         template <unsigned int N, class T1, class S1,
                                   class T2, class S2>
         void 
-        gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, N>, S1> const & vectorField,
+        gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, int(N)>, S1> const & vectorField,
                                      MultiArrayView<N, T2, S2> divergence,
                                      ConvolutionOptions<N> const & opt);
                                      
         template <unsigned int N, class T1, class S1,
                                   class T2, class S2>
         void 
-        gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, N>, S1> const & vectorField,
+        gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, int(N)>, S1> const & vectorField,
                                      MultiArrayView<N, T2, S2> divergence,
                                      double sigma,
                                      ConvolutionOptions<N> opt = ConvolutionOptions<N>());
@@ -2189,7 +2189,7 @@
 template <unsigned int N, class T1, class S1,
                           class T2, class S2>
 inline void 
-gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, N>, S1> const & vectorField,
+gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, int(N)>, S1> const & vectorField,
                              MultiArrayView<N, T2, S2> divergence,
                              ConvolutionOptions<N> const & opt)
 {
@@ -2203,7 +2203,7 @@
 template <unsigned int N, class T1, class S1,
                           class T2, class S2>
 inline void 
-gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, N>, S1> const & vectorField,
+gaussianDivergenceMultiArray(MultiArrayView<N, TinyVector<T1, int(N)>, S1> const & vectorField,
                              MultiArrayView<N, T2, S2> divergence,
                              double sigma,
                              ConvolutionOptions<N> opt = ConvolutionOptions<N>())
