diff -Naur filelight-1.0-beta6/build-helper.sh filelight-new/build-helper.sh
--- filelight-1.0-beta6/build-helper.sh	2005-06-17 09:55:08.000000000 -0400
+++ filelight-new/build-helper.sh	2005-06-17 10:20:06.000000000 -0400
@@ -8,13 +8,17 @@
 VERSION="$1";  shift
 REVISION="$1"; shift
 
+#FAILED="$LOGDIR/$NAME-$VERSION-$REVISION.failed"
+FAILED=build-failed
+
 rm -rf "$LOGDIR/$NAME-$VERSION-$REVISION.failed"
 
 date > "$LOGDIR/$NAME-$VERSION-$REVISION.$TYPE"
-("$@" || touch "$LOGDIR/$NAME-$VERSION-$REVISION.failed") 2>&1 | tee -a "$LOGDIR/$NAME-$VERSION-$REVISION.$TYPE"
+sh ./check_success.sh "$FAILED" "$@" 2>&1 \
+	| tee -a "$LOGDIR/$NAME-$VERSION-$REVISION.$TYPE"
 
-if [ -f "$LOGDIR/$NAME-$VERSION-$REVISION.failed" ]; then
+if [ -f "$FAILED" ]; then
 	echo "NAME-$VERSION-$REVISION $TYPE-build failed!"
-	rm -rf "$LOGDIR/$NAME-$VERSION-$REVISION.failed"
+	rm -rf "$FAILED"
 	exit 1
 fi
diff -Naur filelight-1.0-beta6/check_success.sh filelight-new/check_success.sh
--- filelight-1.0-beta6/check_success.sh	1969-12-31 19:00:00.000000000 -0500
+++ filelight-new/check_success.sh	2005-06-17 10:16:20.000000000 -0400
@@ -0,0 +1,3 @@
+#!/bin/sh
+FAILED=$1; shift
+"$@" || touch "$FAILED"
diff -Naur filelight-1.0-beta6/configure.in.in filelight-new/configure.in.in
--- filelight-1.0-beta6/configure.in.in	2004-11-23 16:52:02.000000000 -0500
+++ filelight-new/configure.in.in	2005-06-17 09:23:03.000000000 -0400
@@ -1,3 +1,5 @@
 #MIN_CONFIG
 AM_INIT_AUTOMAKE(filelight,1.0-beta6)
-
+AC_CHECK_HEADER(mntent.h, [
+ AC_DEFINE(HAVE_MNTENT_H, 1, [Define if you have getmntent and friends])
+])
diff -Naur filelight-1.0-beta6/src/part/Makefile.am filelight-new/src/part/Makefile.am
--- filelight-1.0-beta6/src/part/Makefile.am	2004-11-23 16:47:13.000000000 -0500
+++ filelight-new/src/part/Makefile.am	2005-06-17 08:39:47.000000000 -0400
@@ -18,4 +18,6 @@
    remoteLister.cpp \
    diskLister.cpp \
    disk.cpp \
-   summaryWidget.cpp
+   summaryWidget.cpp \
+   mntent_compat.cpp
+   
diff -Naur filelight-1.0-beta6/src/part/diskLister.cpp filelight-new/src/part/diskLister.cpp
--- filelight-1.0-beta6/src/part/diskLister.cpp	2004-11-23 15:58:51.000000000 -0500
+++ filelight-new/src/part/diskLister.cpp	2005-06-17 13:51:47.000000000 -0400
@@ -281,13 +281,15 @@
                && ( disk->fsType() != "swap" )
                && ( disk->mountPoint() != "/dev/swap" )
                && ( disk->mountPoint() != "/dev/pts" )
+               && ( disk->mountPoint() != "/dev" )
+               && ( disk->mountPoint() != "/.vol" )
                && ( disk->mountPoint().find( "/proc" ) == -1 ) ) {
             disk->setMounted( TRUE );    // its now mounted (df lists only mounted)
             replaceDeviceEntry( disk );
+         	disk->guessIconName();
          } else
             delete disk;
 
-         disk->guessIconName();
 
       } //if not header
    } //while further lines available
diff -Naur filelight-1.0-beta6/src/part/localLister.cpp filelight-new/src/part/localLister.cpp
--- filelight-1.0-beta6/src/part/localLister.cpp	2004-11-23 15:58:51.000000000 -0500
+++ filelight-new/src/part/localLister.cpp	2005-06-17 15:08:19.000000000 -0400
@@ -7,7 +7,7 @@
 #include "fileTree.h"
 #include <fstab.h>
 #include "localLister.h"
-#include <mntent.h>
+#include "mntent.h"
 #include <qapplication.h> //postEvent()
 #include <qfile.h>
 #include "scan.h"
@@ -243,7 +243,7 @@
       #define FS_MNTOPS fstab_ent->fs_mntops  // mount-options
 
       QStringList remoteFsTypes;
-      remoteFsTypes << "smbfs" << MNTTYPE_NFS;
+      remoteFsTypes << "smbfs" << MNTTYPE_NFS << "afpfs";
 
       while( (fstab_ent = getfsent()) != NULL )
       {
@@ -282,11 +282,10 @@
          if( str == "/" ) continue;
          str += "/";
 
-         if( remoteFsTypes.contains( FS_TYPE ) )
+         if( remoteFsTypes.contains( FS_TYPE ) ) {
             if( b = !s_remoteMounts.contains( str ) )
             s_remoteMounts.append( str ); //**** NO! can't be sure won't have trailing slash, need to do a check first dummy!!
-
-         else if( b = !s_localMounts.contains( str ) )
+         } else if( b = !s_localMounts.contains( str ) )
             s_localMounts.append( str ); //**** NO! can't be sure won't have trailing slash, need to do a check first dummy!!
 
          if( b ) kdDebug() << "MTAB: " << FS_TYPE << "\n";
diff -Naur filelight-1.0-beta6/src/part/mntent.h filelight-new/src/part/mntent.h
--- filelight-1.0-beta6/src/part/mntent.h	1969-12-31 19:00:00.000000000 -0500
+++ filelight-new/src/part/mntent.h	2005-06-17 08:38:29.000000000 -0400
@@ -0,0 +1,67 @@
+/* -*-C++-*-
+
+  mntent.h
+
+  Copyright (C) 2002 Alan Eldridge
+  
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 2, or (at your option)
+  any later version.
+  
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+  
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software Foundation,
+  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
+
+  $Id$
+
+  2002/09/08 alane@geeksrus.net
+*/
+
+#ifdef HAVE_MNTENT_H
+#include <mntent.h>
+#else
+
+#ifndef mntent_h_
+#define mntent_h_
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/param.h>
+#include <sys/ucred.h>
+#include <sys/mount.h>
+
+#define	MOUNTED	"dummy"
+#define MNTTYPE_NFS "nfs"
+
+const int MOPTSLEN (256 - (MNAMELEN * 2 + MFSNAMELEN + 2 * sizeof(int)));
+
+struct mntent {
+public:  
+  char	mnt_fsname[ MNAMELEN ];
+  char	mnt_dir[ MNAMELEN ];
+  char	mnt_type[ MFSNAMELEN ];
+  char	mnt_opts[ MOPTSLEN ];
+  int	mnt_freq, mnt_passno;
+private:
+  void clear();
+public:
+  mntent() {
+    clear();
+  }
+  struct mntent *from_statfs(struct statfs *pst);
+};
+
+FILE *setmntent(const char *szfn, char *szrw);
+struct mntent *getmntent(FILE *pf);
+char *hasmntopt(const struct mntent *pmnt, const char *szopt);
+int endmntent(FILE *pf);
+
+#endif /* mntent_h_ */
+#endif /* not HAVE_MNTENT_H */
diff -Naur filelight-1.0-beta6/src/part/mntent_compat.cpp filelight-new/src/part/mntent_compat.cpp
--- filelight-1.0-beta6/src/part/mntent_compat.cpp	1969-12-31 19:00:00.000000000 -0500
+++ filelight-new/src/part/mntent_compat.cpp	2005-06-17 10:57:38.000000000 -0400
@@ -0,0 +1,164 @@
+/* -*-C++-*-
+
+  mntentemu.c++
+
+  Copyright (C) 2002 Alan Eldridge
+  
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 2, or (at your option)
+  any later version.
+  
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+  
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software Foundation,
+  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
+
+  $Id: mntent_compat.cc,v 1.3 2002/09/08 18:42:20 alane Exp $
+
+  2002/09/08 alane@geeksrus.net
+*/
+
+#ifndef HAVE_MNTENT_H
+
+#include "config.h"
+#include "mntent.h"
+
+#include <string>
+
+// globals (yuck, but easier for debugging)
+
+mntent	G_mntent;
+int	G_mntpos;
+int	G_mntsize;
+bool	G_mntfOpen = false;
+struct statfs *G_pmntstat = 0;
+
+// map option flags to names
+
+struct optmap {
+  int fl;
+  std::string st;
+};
+
+static struct optmap omap[] = {
+  { MNT_SYNCHRONOUS,	"sync"		},
+  { MNT_NOEXEC,		"noexec"	},
+  { MNT_NOSUID,		"nosuid"	},
+  { MNT_NODEV,		"nodev"		},
+  { MNT_UNION,		"union"		},
+  { MNT_ASYNC,		"async"		},
+#ifdef MNT_NOATIME
+  { MNT_NOATIME,	"noatime"	},
+#endif
+#ifdef MNT_NOCLUSTERR
+  { MNT_NOCLUSTERR,	"noclusterr"	},
+#endif
+#ifdef MNT_NOCLUSTERW
+  { MNT_NOCLUSTERW,	"noclusterw"	},
+#endif
+#ifdef MNT_NOSYMFOLLOW
+  { MNT_NOSYMFOLLOW,	"nosymfollow"	},
+#endif
+#ifdef MNT_SUIDDIR
+  { MNT_SUIDDIR,	"suiddir"	},
+#endif
+  { 0, "noop" }
+};
+
+// zap everything for clarity
+
+void
+mntent::clear()
+{
+  memset(mnt_fsname, 0, sizeof(mnt_fsname));
+  memset(mnt_dir, 0, sizeof(mnt_dir));
+  memset(mnt_type, 0, sizeof(mnt_type));
+  memset(mnt_opts, 0, sizeof(mnt_opts));
+  mnt_freq = mnt_passno = 0;
+}
+
+// fake it from a statfs struct
+
+mntent *
+mntent::from_statfs(struct statfs *pst)
+{
+
+  clear();
+  strcpy(mnt_fsname, pst->f_mntfromname);
+  strcpy(mnt_dir, pst->f_mntonname);
+  strcpy(mnt_type, pst->f_fstypename);
+  mnt_freq = mnt_passno = 0;
+
+  std::string opts;
+  int fl = pst->f_flags;
+
+  opts += (fl & MNT_RDONLY) ? "ro" : "rw";
+  for (optmap *pmp = omap; pmp->fl != 0; pmp++) {
+    if ((fl & pmp->fl) != 0) {
+      opts += (" " + pmp->st);
+    }
+  }
+  strcpy(mnt_opts, opts.c_str());
+
+  return this;
+}
+
+// "rewind" the mtab file 
+
+FILE *
+setmntent(const char *, char *)
+{
+  if (!G_mntfOpen) {
+    G_mntfOpen = true;
+  }
+
+  G_mntpos = 0;
+  G_mntsize = getmntinfo(&G_pmntstat, MNT_NOWAIT);
+
+  return reinterpret_cast<FILE *>(1);
+}
+
+// return ptr to opt string if present
+
+char *
+hasmntopt(const mntent *pmnt, const char *szopt)
+{
+  std::string opt(szopt);
+  std::string mntopts(pmnt->mnt_opts);
+
+  std::string::size_type pos = mntopts.find(opt);
+  const char *szret = (pos == std::string::npos) ? "" : pmnt->mnt_opts + pos;
+
+  return const_cast<char *>(szret);
+}
+
+// get next mntent until all gone, then return 0
+
+struct mntent *
+getmntent(FILE *)
+{
+  if (!G_mntfOpen) {
+    return 0;
+  } else if (G_mntpos < G_mntsize) {
+    return G_mntent.from_statfs(G_pmntstat + G_mntpos++);
+  } else {
+    G_mntfOpen = false;
+    return 0;
+  }
+}
+
+// "close" the mtab file
+
+int 
+endmntent(FILE *)
+{
+  G_mntfOpen = false;
+  return 0;
+}
+
+#endif /* ifndef HAVE_MNTENT_H */
diff -Naur filelight-1.0-beta6/src/part/part.cpp filelight-new/src/part/part.cpp
--- filelight-1.0-beta6/src/part/part.cpp	2004-11-23 15:58:51.000000000 -0500
+++ filelight-new/src/part/part.cpp	2005-06-17 14:38:52.000000000 -0400
@@ -170,8 +170,7 @@
 KAboutData*
 Part::createAboutData()
 {
-    static KAboutData about( APP_NAME, I18N_NOOP( APP_PRETTYNAME ), VERSION );
-    return &about;
+    return new KAboutData( APP_NAME, I18N_NOOP( APP_PRETTYNAME ), VERSION );
 }
 
 bool
diff -Naur filelight-1.0-beta6/src/part/radialMap/sincos.h filelight-new/src/part/radialMap/sincos.h
--- filelight-1.0-beta6/src/part/radialMap/sincos.h	2004-11-23 14:38:48.000000000 -0500
+++ filelight-new/src/part/radialMap/sincos.h	2005-06-17 11:27:18.000000000 -0400
@@ -6,10 +6,10 @@
 
 #include <math.h>
 
-#if __GLIBC__ < 2 ||  __GLIBC__ == 2 && __GLIBC_MINOR__ < 1
+#if !defined(__GLIBC__) || __GLIBC__ < 2 ||  __GLIBC__ == 2 && __GLIBC_MINOR__ < 1
 
-   void
-   sincos( int angleRadians, int *Sin, int *Cos )
+   static void
+   sincos( double angleRadians, double *Sin, double *Cos )
    {
       *Sin = sin( angleRadians );
       *Cos = cos( angleRadians );
