diff -ruN qgis-2.8.0/python/plugins/processing/algs/grass/GrassUtils.py qgis-2.8.0-processing/python/plugins/processing/algs/grass/GrassUtils.py
--- qgis-2.8.0/python/plugins/processing/algs/grass/GrassUtils.py	2015-02-21 00:04:45.000000000 +0900
+++ qgis-2.8.0-processing/python/plugins/processing/algs/grass/GrassUtils.py	2015-02-27 15:36:34.000000000 +0900
@@ -83,25 +83,7 @@
 
     @staticmethod
     def grassPath():
-        if not isWindows() and not isMac():
-            return ''
-
-        folder = ProcessingConfig.getSetting(GrassUtils.GRASS_FOLDER)
-        if folder is None:
-            if isWindows():
-                testfolder = os.path.dirname(QgsApplication.prefixPath())
-                testfolder = os.path.join(testfolder, 'grass')
-                if os.path.isdir(testfolder):
-                    for subfolder in os.listdir(testfolder):
-                        if subfolder.startswith('grass'):
-                            folder = os.path.join(testfolder, subfolder)
-                            break
-            else:
-                folder = os.path.join(QgsApplication.prefixPath(), 'grass')
-                if not os.path.isdir(folder):
-                    folder = '/Applications/GRASS-6.4.app/Contents/MacOS'
-
-        return folder or ''
+        return '@PREFIX@/Applications/GRASS-6.4.app/Contents/MacOS'
 
     @staticmethod
     def grassWinShell():
@@ -242,23 +224,15 @@
 
     @staticmethod
     def prepareGrassExecution(commands):
-        if isWindows():
-            GrassUtils.createGrassScript(commands)
-            command = ['cmd.exe', '/C ', GrassUtils.grassScriptFilename()]
-        else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc'
-            os.putenv('GISRC', gisrc)
-            os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
-            os.putenv('GRASS_BATCH_JOB', GrassUtils.grassBatchJobFilename())
-            GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
-            os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac():
-                command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
-                    + GrassUtils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass64 ' + GrassUtils.grassMapsetFolder() \
-                    + '/PERMANENT'
+        gisrc = userFolder() + os.sep + 'processing.gisrc'
+        os.putenv('GISRC', gisrc)
+        os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
+        os.putenv('GRASS_BATCH_JOB', GrassUtils.grassBatchJobFilename())
+        GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
+        os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
+                 | stat.S_IREAD | stat.S_IWRITE)
+        command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
+             + GrassUtils.grassMapsetFolder() + '/PERMANENT'
 
         return command
 
@@ -353,20 +327,6 @@
 
     @staticmethod
     def checkGrassIsInstalled(ignorePreviousState=False):
-        if isWindows():
-            path = GrassUtils.grassPath()
-            if path == '':
-                return GrassUtils.tr(
-                    'GRASS folder is not configured.\nPlease configure '
-                    'it before running GRASS algorithms.')
-            cmdpath = os.path.join(path, 'bin', 'r.out.gdal.exe')
-            if not os.path.exists(cmdpath):
-                return GrassUtils.tr(
-                    'The specified GRASS folder does not contain a valid '
-                    'set of GRASS modules. Please, go to the Processing '
-                    'settings dialog, and check that the GRASS folder is '
-                    'correctly configured')
-
         if not ignorePreviousState:
             if GrassUtils.isGrassInstalled:
                 return
diff -ruN qgis-2.8.0/python/plugins/processing/algs/grass7/Grass7Utils.py qgis-2.8.0-processing/python/plugins/processing/algs/grass7/Grass7Utils.py
--- qgis-2.8.0/python/plugins/processing/algs/grass7/Grass7Utils.py	2015-02-21 00:04:45.000000000 +0900
+++ qgis-2.8.0-processing/python/plugins/processing/algs/grass7/Grass7Utils.py	2015-03-31 14:50:37.000000000 +0900
@@ -81,26 +81,7 @@
 
     @staticmethod
     def grassPath():
-        if not isWindows() and not isMac():
-            return ''
-
-        folder = ProcessingConfig.getSetting(Grass7Utils.GRASS_FOLDER)
-        if folder is None:
-            if isWindows():
-                testfolder = os.path.dirname(str(QgsApplication.prefixPath()))
-                testfolder = os.path.join(testfolder, 'grass7')
-                if os.path.isdir(testfolder):
-                    for subfolder in os.listdir(testfolder):
-                        if subfolder.startswith('grass7'):
-                            folder = os.path.join(testfolder, subfolder)
-                            break
-            else:
-                folder = os.path.join(str(QgsApplication.prefixPath()), 'grass7'
-                                      )
-                if not os.path.isdir(folder):
-                    folder = '/Applications/GRASS-7.0.app/Contents/MacOS'
-
-        return folder
+        return '@PREFIX@/Applications/GRASS-7.0.app/Contents/MacOS'
 
     @staticmethod
     def grassWinShell():
@@ -240,23 +221,19 @@
 
     @staticmethod
     def prepareGrass7Execution(commands):
-        if isWindows():
-            Grass7Utils.createGrass7Script(commands)
-            command = ['cmd.exe', '/C ', Grass7Utils.grassScriptFilename()]
+        gisrc = userFolder() + os.sep + 'processing.gisrc7'
+        os.putenv('GISRC', gisrc)
+        os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
+        os.putenv('GRASS_BATCH_JOB', Grass7Utils.grassBatchJobFilename())
+        Grass7Utils.createGrass7BatchJobFileFromGrass7Commands(commands)
+        os.chmod(Grass7Utils.grassBatchJobFilename(), stat.S_IEXEC
+                  | stat.S_IREAD | stat.S_IWRITE)
+        if isMac() and os.path.exists(Grass7Utils.grassPath() + os.sep + 'grass70.sh'):
+             command = Grass7Utils.grassPath() + os.sep + 'grass70.sh ' \
+                 + Grass7Utils.grassMapsetFolder() + '/PERMANENT'
         else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc7'
-            os.putenv('GISRC', gisrc)
-            os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
-            os.putenv('GRASS_BATCH_JOB', Grass7Utils.grassBatchJobFilename())
-            Grass7Utils.createGrass7BatchJobFileFromGrass7Commands(commands)
-            os.chmod(Grass7Utils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac() and os.path.exists(Grass7Utils.grassPath() + os.sep + 'grass70.sh'):
-                command = Grass7Utils.grassPath() + os.sep + 'grass70.sh ' \
-                    + Grass7Utils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass70 ' + Grass7Utils.grassMapsetFolder() \
-                    + '/PERMANENT'
+            command = 'grass70 ' + Grass7Utils.grassMapsetFolder() \
+                 + '/PERMANENT'
 
         return command
 
@@ -350,47 +327,8 @@
 
     @staticmethod
     def checkGrass7IsInstalled(ignorePreviousState=False):
-        if isWindows():
-            path = Grass7Utils.grassPath()
-            if path == '':
-                return Grass7Utils.tr(
-                    'GRASS GIS 7 folder is not configured. Please configure '
-                    'it before running GRASS GIS 7 algorithms.')
-            cmdpath = os.path.join(path, 'bin', 'r.out.gdal.exe')
-            if not os.path.exists(cmdpath):
-                return Grass7Utils.tr(
-                    'The specified GRASS GIS 7 folder does not contain a valid '
-                    'set of GRASS GIS 7 modules.\nPlease, go to the Processing '
-                    'settings dialog, and check that the GRASS GIS 7\n'
-                    'folder is correctly configured')
-
-        if not ignorePreviousState:
-            if Grass7Utils.isGrass7Installed:
-                return
-        try:
-            from processing import runalg
-            result = runalg(
-                'grass7:v.voronoi',
-                points(),
-                False,
-                False,
-                '270778.60198,270855.745301,4458921.97814,4458983.8488',
-                -1,
-                0.0001,
-                0,
-                None,
-            )
-            if not os.path.exists(result['output']):
-                return Grass7Utils.tr(
-                    'It seems that GRASS GIS 7 is not correctly installed and '
-                    'configured in your system.\nPlease install it before '
-                    'running GRASS GIS 7 algorithms.')
-        except:
-            return Grass7Utils.tr(
-                'Error while checking GRASS GIS 7 installation. GRASS GIS 7 '
-                'might not be correctly configured.\n')
-
         Grass7Utils.isGrass7Installed = True
+        return
 
     @staticmethod
     def tr(string, context=''):
