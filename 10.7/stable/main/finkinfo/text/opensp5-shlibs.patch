diff -Nurd -x'*~' OpenSP-1.5.2.orig/lib/MessageTable.cxx OpenSP-1.5.2/lib/MessageTable.cxx
--- OpenSP-1.5.2.orig/lib/MessageTable.cxx	2005-07-21 10:05:17.000000000 -0400
+++ OpenSP-1.5.2/lib/MessageTable.cxx	2011-03-12 17:02:31.000000000 -0500
@@ -94,12 +94,7 @@
 #else /* not SP_NO_MESSAGE_TEXT */
 
 #ifdef SP_HAVE_GETTEXT
-extern "C" {
-extern char *dgettext(const char *, const char *);
-extern char *gettext(const char *);
-extern char *textdomain(const char *);
-extern char *bindtextdomain(const char *, const char *);
-}
+#include <libintl.h>
 
 #include <stdlib.h>
 
--- OpenSP-1.5.2/include/Ptr.h.orig	2013-07-17 10:03:40.000000000 -0400
+++ OpenSP-1.5.2/include/Ptr.h	2013-07-17 10:04:13.000000000 -0400
@@ -69,8 +69,8 @@
   const T *operator->() const { return Ptr<T>::pointer(); }
   const T &operator*() const { return *Ptr<T>::pointer(); }
   void swap(ConstPtr<T> &p) { Ptr<T>::swap(p); }
-  Ptr<T>::isNull;
-  Ptr<T>::clear;
+  using Ptr<T>::isNull;
+  using Ptr<T>::clear;
   Boolean operator==(const Ptr<T> &p) const { return Ptr<T>::operator==(p); }
   Boolean operator!=(const Ptr<T> &p) const { return Ptr<T>::operator!=(p); }
   Boolean operator==(const ConstPtr<T> &p) const {
--- OpenSP-1.5.2/include/IList.h.orig	2013-07-17 10:04:19.000000000 -0400
+++ OpenSP-1.5.2/include/IList.h	2013-07-17 10:04:41.000000000 -0400
@@ -26,8 +26,8 @@
   void swap(IList<T> &list) { IListBase::swap(list); }
   T *head() const { return (T *)IListBase::head(); }
   T *get() { return (T *)IListBase::get(); }
-  IListBase::clear;
-  IListBase::empty;
+  using IListBase::clear;
+  using IListBase::empty;
 friend class IListIter<T>;
 private:
   IList(const IList<T> &);	// undefined
--- OpenSP-1.5.2/include/IListIter.h.orig	2013-07-17 10:04:55.000000000 -0400
+++ OpenSP-1.5.2/include/IListIter.h	2013-07-17 10:05:12.000000000 -0400
@@ -17,8 +17,8 @@
   IListIter(const IList<T> &list) : IListIterBase(list) { }
   T *cur() const { return (T *)IListIterBase::cur(); }
   
-  IListIterBase::next;
-  IListIterBase::done;
+  using IListIterBase::next;
+  using IListIterBase::done;
 };
 
 #ifdef SP_NAMESPACE
--- OpenSP-1.5.2/lib/Parser.h.orig	2013-07-17 10:12:36.000000000 -0400
+++ OpenSP-1.5.2/lib/Parser.h	2013-07-17 10:14:29.000000000 -0400
@@ -62,16 +62,16 @@
   Parser(const SgmlParser::Params &);
   Event *nextEvent();
   void parseAll(EventHandler &, const volatile sig_atomic_t *cancelPtr);
-  ParserState::sdPointer;
-  ParserState::instanceSyntaxPointer;
-  ParserState::prologSyntaxPointer;
-  ParserState::activateLinkType;
-  ParserState::allLinkTypesActivated;
-  ParserState::entityManager;
-  ParserState::entityCatalog;
-  ParserState::baseDtd;
-  ParserState::options;
-  ParserState::instantiateDtd;
+  using ParserState::sdPointer;
+  using ParserState::instanceSyntaxPointer;
+  using ParserState::prologSyntaxPointer;
+  using ParserState::activateLinkType;
+  using ParserState::allLinkTypesActivated;
+  using ParserState::entityManager;
+  using ParserState::entityCatalog;
+  using ParserState::baseDtd;
+  using ParserState::options;
+  using ParserState::instantiateDtd;
   friend class PiAttspecParser;
 private:
   Parser(const Parser &);	// undefined
--- OpenSP-1.5.2/include/Vector.cxx.orig	2013-07-17 10:10:13.000000000 -0400
+++ OpenSP-1.5.2/include/Vector.cxx	2013-07-17 10:11:35.000000000 -0400
@@ -131,7 +131,7 @@
   for (const T *p = p1; p != p2; p++)
     ((X *)p)->~X();
   if (p2 != ptr_ + size_)
-    memmove((T *)p1, p2, ((const T *)(ptr_ + size_) - p2)*sizeof(T));
+    memmove((void*)(T *)p1, (void*)p2, ((const T *)(ptr_ + size_) - p2)*sizeof(T));
   size_ -= p2 - p1;
   return (T *)p1;
 }
@@ -147,7 +147,7 @@
   void *p = ::operator new(newAlloc * sizeof(T));
   alloc_ = newAlloc;
   if (ptr_) {
-    memcpy(p, ptr_, size_*sizeof(T));
+    memcpy(p, (void*)ptr_, size_*sizeof(T));
     ::operator delete((void *)ptr_);
   }
   ptr_ = (T *)p;
--- OpenSP-1.5.2/include/Vector.cxx.orig	2013-07-17 10:23:32.000000000 -0400
+++ OpenSP-1.5.2/include/Vector.cxx	2013-07-17 10:25:04.000000000 -0400
@@ -87,7 +87,7 @@
   size_t n = q2 - q1;
   reserve(size_ + n);
   if (i != size_)
-    memmove(ptr_ + i + n, ptr_ + i, (size_ - i)*sizeof(T));
+    memmove((void*)(ptr_ + i + n), (void*)(ptr_ + i), (size_ - i)*sizeof(T));
   for (T *pp = ptr_ + i; q1 != q2; q1++, pp++) {
     (void)new (pp) T(*q1);
     size_++;
--- OpenSP-1.5.2/lib/parseDecl.cxx.orig	2013-07-17 10:26:12.000000000 -0400
+++ OpenSP-1.5.2/lib/parseDecl.cxx	2013-07-17 10:28:19.000000000 -0400
@@ -3226,7 +3226,7 @@
   IdLinkRuleGroup *group = defComplexLpd().lookupCreateIdLink(id);
   size_t nRules = group->nLinkRules();
   if ((nRules == 1 && group->linkRule(0).attributes().nSpec() == 0)
-      || nRules >= 1 && rule.attributes().nSpec() == 0)
+      || (nRules >= 1 && rule.attributes().nSpec() == 0))
     message(ParserMessages::multipleIdLinkRuleAttribute,
 	    StringMessageArg(id));
   group->addLinkRule(rule);
@@ -3239,7 +3239,7 @@
   size_t nRules = linkSet->nLinkRules(sourceElement);
   if ((nRules == 1
        && linkSet->linkRule(sourceElement, 0).attributes().nSpec() == 0)
-      || nRules >= 1 && linkRule->attributes().nSpec() == 0)
+      || (nRules >= 1 && linkRule->attributes().nSpec() == 0))
     message(ParserMessages::multipleLinkRuleAttribute,
 	    StringMessageArg(sourceElement->name()));
   linkSet->addLinkRule(sourceElement, linkRule);
