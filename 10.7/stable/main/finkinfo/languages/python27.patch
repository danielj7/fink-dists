diff -ru Python-2.7.7.orig/Lib/_osx_support.py Python-2.7.7/Lib/_osx_support.py
--- Python-2.7.7.orig/Lib/_osx_support.py	2014-05-31 14:58:38.000000000 -0400
+++ Python-2.7.7/Lib/_osx_support.py	2014-06-29 08:08:10.000000000 -0400
@@ -450,8 +450,16 @@
         # case and disallow installs.
         cflags = _config_vars.get(_INITPRE+'CFLAGS',
                                     _config_vars.get('CFLAGS', ''))
-        if ((macrelease + '.') >= '10.4.' and
-            '-arch' in cflags.strip()):
+        if macrelease:
+            try:
+                macrelease = tuple(int(i) for i in macrelease.split('.')[0:2])
+            except ValueError:
+                macrelease = (10, 0)
+        else:
+            # assume no universal support
+            macrelease = (10, 0)
+
+        if (macrelease >= (10, 4)) and '-arch' in cflags.strip():
             # The universal build will build fat binaries, but not on
             # systems before 10.4
 
diff -ru Python-2.7.7.orig/Lib/ctypes/macholib/dyld.py Python-2.7.7/Lib/ctypes/macholib/dyld.py
--- Python-2.7.7.orig/Lib/ctypes/macholib/dyld.py	2014-05-31 14:58:38.000000000 -0400
+++ Python-2.7.7/Lib/ctypes/macholib/dyld.py	2014-06-29 08:07:26.000000000 -0400
@@ -26,6 +26,7 @@
 
 DEFAULT_LIBRARY_FALLBACK = [
     os.path.expanduser("~/lib"),
+    "@PREFIX@/lib",
     "/usr/local/lib",
     "/lib",
     "/usr/lib",
diff -ru Python-2.7.7.orig/Lib/distutils/tests/test_build_ext.py Python-2.7.7/Lib/distutils/tests/test_build_ext.py
--- Python-2.7.7.orig/Lib/distutils/tests/test_build_ext.py	2014-05-31 14:58:38.000000000 -0400
+++ Python-2.7.7/Lib/distutils/tests/test_build_ext.py	2014-06-29 08:08:10.000000000 -0400
@@ -479,8 +479,16 @@
 
         # get the deployment target that the interpreter was built with
         target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
-        target = tuple(map(int, target.split('.')))
-        target = '%02d%01d0' % target
+        target = tuple(map(int, target.split('.')[0:2]))
+        # format the target value as defined in the Apple
+        # Availability Macros.  We can't use the macro names since
+        # at least one value we test with will not exist yet.
+        if target[1] < 10:
+            # for 10.1 through 10.9.x -> "10n0"
+            target = '%02d%01d0' % target
+        else:
+            # for 10.10 and beyond -> "10nn00"
+            target = '%02d%02d00' % target
         deptarget_ext = Extension(
             'deptarget',
             [deptarget_c],
diff -ru Python-2.7.7.orig/Lib/platform.py Python-2.7.7/Lib/platform.py
--- Python-2.7.7.orig/Lib/platform.py	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Lib/platform.py	2014-06-29 08:07:26.000000000 -0400
@@ -816,6 +816,15 @@
     if info is not None:
         return info
 
+    # If that doesn't work fall back to posix.uname
+    import posix
+    major,minor,patch=string.split(posix.uname()[2],'.')
+    release = '%s.%s.%s' %('10',int(major)-4, minor)
+    if posix.uname()[4]=='Power Macintosh':
+        machine='PowerPC'
+    else:
+        machine='i386'
+
     # If that also doesn't work return the default values
     return release,versioninfo,machine
 
diff -ru Python-2.7.7.orig/Lib/sysconfig.py Python-2.7.7/Lib/sysconfig.py
--- Python-2.7.7.orig/Lib/sysconfig.py	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Lib/sysconfig.py	2014-06-29 08:07:26.000000000 -0400
@@ -303,12 +303,6 @@
             msg = msg + " (%s)" % e.strerror
         raise IOError(msg)
 
-    # On AIX, there are wrong paths to the linker scripts in the Makefile
-    # -- these paths are relative to the Python source, but when installed
-    # the scripts are in another directory.
-    if _PYTHON_BUILD:
-        vars['LDSHARED'] = vars['BLDSHARED']
-
     # There's a chicken-and-egg situation on OS X with regards to the
     # _sysconfigdata module after the changes introduced by #15298:
     # get_config_vars() is called by get_platform() as part of the
diff -ru Python-2.7.7.orig/Lib/test/test__osx_support.py Python-2.7.7/Lib/test/test__osx_support.py
--- Python-2.7.7.orig/Lib/test/test__osx_support.py	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Lib/test/test__osx_support.py	2014-06-29 08:08:10.000000000 -0400
@@ -109,7 +109,9 @@
 
     def test__supports_universal_builds(self):
         import platform
-        self.assertEqual(platform.mac_ver()[0].split('.') >= ['10', '4'],
+        mac_ver_tuple = tuple(int(i) for i in
+                            platform.mac_ver()[0].split('.')[0:2])
+        self.assertEqual(mac_ver_tuple >= (10, 4),
                             _osx_support._supports_universal_builds())
 
     def test__find_appropriate_compiler(self):
diff -ru Python-2.7.7.orig/Lib/test/test_posix.py Python-2.7.7/Lib/test/test_posix.py
--- Python-2.7.7.orig/Lib/test/test_posix.py	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Lib/test/test_posix.py	2014-06-29 08:08:10.000000000 -0400
@@ -520,7 +520,7 @@
         if sys.platform == 'darwin':
             import sysconfig
             dt = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET') or '10.0'
-            if float(dt) < 10.6:
+            if tuple(int(n) for n in dt.split('.')[0:2]) < (10, 6):
                 raise unittest.SkipTest("getgroups(2) is broken prior to 10.6")
 
         # 'id -G' and 'os.getgroups()' should return the same
diff -ru Python-2.7.7.orig/Makefile.pre.in Python-2.7.7/Makefile.pre.in
--- Python-2.7.7.orig/Makefile.pre.in	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Makefile.pre.in	2014-06-29 08:07:26.000000000 -0400
@@ -484,7 +484,7 @@
 	fi
 
 libpython$(VERSION).dylib: $(LIBRARY_OBJS)
-	 $(CC) -dynamiclib -Wl,-single_module $(LDFLAGS) -undefined dynamic_lookup -Wl,-install_name,$(prefix)/lib/libpython$(VERSION).dylib -Wl,-compatibility_version,$(VERSION) -Wl,-current_version,$(VERSION) -o $@ $(LIBRARY_OBJS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
+	 $(CC) -dynamiclib -Wl,-single_module $(LDFLAGS) @LIBTOOL_CRUFT@ -o $@ $(LIBRARY_OBJS) $(SHLIBS) $(LIBC) $(LDLAST)
 
 
 libpython$(VERSION).sl: $(LIBRARY_OBJS)
@@ -872,7 +872,7 @@
 # Install the interpreter with $(VERSION) affixed
 # This goes into $(exec_prefix)
 altbininstall:	$(BUILDPYTHON)
-	@for i in $(BINDIR) $(LIBDIR); \
+	@for i in $(BINDIR) $(LIBDIR) $(LIBPL); \
 	do \
 		if test ! -d $(DESTDIR)$$i; then \
 			echo "Creating directory $$i"; \
@@ -885,9 +885,9 @@
 		if test -n "$(DLLLIBRARY)" ; then \
 			$(INSTALL_SHARED) $(DLLLIBRARY) $(DESTDIR)$(BINDIR); \
 		else \
-			$(INSTALL_SHARED) $(LDLIBRARY) $(DESTDIR)$(LIBDIR)/$(INSTSONAME); \
+			$(INSTALL_SHARED) $(LDLIBRARY) $(DESTDIR)$(LIBPL)/$(INSTSONAME); \
 			if test $(LDLIBRARY) != $(INSTSONAME); then \
-				(cd $(DESTDIR)$(LIBDIR); $(LN) -sf $(INSTSONAME) $(LDLIBRARY)) \
+				(cd $(DESTDIR)$(LIBPL); $(LN) -sf $(INSTSONAME) $(LDLIBRARY)) \
 			fi \
 		fi; \
 	else	true; \
diff -ru Python-2.7.7.orig/Misc/python-config.in Python-2.7.7/Misc/python-config.in
--- Python-2.7.7.orig/Misc/python-config.in	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Misc/python-config.in	2014-06-29 08:07:26.000000000 -0400
@@ -46,12 +46,10 @@
     elif opt in ('--libs', '--ldflags'):
         libs = getvar('LIBS').split() + getvar('SYSLIBS').split()
         libs.append('-lpython'+pyver)
-        # add the prefix/lib/pythonX.Y/config dir, but only if there is no
-        # shared library in prefix/lib/.
+        # add the prefix/lib/pythonX.Y/config dir (fink keeps shared
+        # library there too)
         if opt == '--ldflags':
-            if not getvar('Py_ENABLE_SHARED'):
-                libs.insert(0, '-L' + getvar('LIBPL'))
-            if not getvar('PYTHONFRAMEWORK'):
-                libs.extend(getvar('LINKFORSHARED').split())
+            libs.insert(0, '-L' + getvar('LIBPL'))
+            libs.extend(getvar('LINKFORSHARED').split())
         print ' '.join(libs)
 
diff -ru Python-2.7.7.orig/Misc/python.pc.in Python-2.7.7/Misc/python.pc.in
--- Python-2.7.7.orig/Misc/python.pc.in	2014-05-31 14:58:39.000000000 -0400
+++ Python-2.7.7/Misc/python.pc.in	2014-06-29 08:07:26.000000000 -0400
@@ -1,6 +1,6 @@
 prefix=@prefix@
 exec_prefix=@exec_prefix@
-libdir=@libdir@
+libdir=@libdir@/python@VERSION@/config
 includedir=@includedir@
 
 Name: Python
diff -ru Python-2.7.7.orig/Modules/dbmmodule.c Python-2.7.7/Modules/dbmmodule.c
--- Python-2.7.7.orig/Modules/dbmmodule.c	2014-05-31 14:58:40.000000000 -0400
+++ Python-2.7.7/Modules/dbmmodule.c	2014-06-29 08:07:26.000000000 -0400
@@ -19,7 +19,7 @@
 static char *which_dbm = "GNU gdbm";  /* EMX port of GDBM */
 #endif
 #elif defined(HAVE_GDBM_NDBM_H)
-#include <gdbm/ndbm.h>
+#include <ndbm.h>
 static char *which_dbm = "GNU gdbm";
 #elif defined(HAVE_GDBM_DASH_NDBM_H)
 #include <gdbm-ndbm.h>
diff -ru Python-2.7.7.orig/configure Python-2.7.7/configure
--- Python-2.7.7.orig/configure	2014-05-31 14:58:40.000000000 -0400
+++ Python-2.7.7/configure	2014-06-29 08:26:09.000000000 -0400
@@ -5386,7 +5386,7 @@
 	  ;;
     Darwin*)
     	LDLIBRARY='libpython$(VERSION).dylib'
-	BLDLIBRARY='-L. -lpython$(VERSION)'
+	BLDLIBRARY="`pwd`/$LDLIBRARY"
 	RUNSHARED=DYLD_LIBRARY_PATH=`pwd`${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}
 	;;
     AIX*)
@@ -6045,8 +6045,14 @@
 
 	    # Calculate the right deployment target for this build.
 	    #
-	    cur_target=`sw_vers -productVersion | sed 's/\(10\.[0-9]*\).*/\1/'`
-	    if test ${cur_target} '>' 10.2; then
+		cur_target_major=`sw_vers -productVersion | \
+				sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
+		cur_target_minor=`sw_vers -productVersion | \
+				sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
+		cur_target="${cur_target_major}.${cur_target_minor}"
+		if test ${cur_target_major} -eq 10 && \
+		   test ${cur_target_minor} -ge 3
+		then
 		    cur_target=10.3
 		    if test ${enable_universalsdk}; then
 			    if test "${UNIVERSAL_ARCHS}" = "all"; then
@@ -8060,8 +8066,8 @@
 	#ARCH_RUN_32BIT="true"
     fi
 
-    LIBTOOL_CRUFT=$LIBTOOL_CRUFT" -lSystem -lSystemStubs -arch_only ${MACOSX_DEFAULT_ARCH}"
-    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(PYTHONFRAMEWORKINSTALLDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
+    LIBTOOL_CRUFT=$LIBTOOL_CRUFT" -lSystem -lSystemStubs"
+    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(BINLIBDEST)/config/$(INSTSONAME)'
     LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -compatibility_version $(VERSION) -current_version $(VERSION)';;
 esac
 
@@ -8208,20 +8214,8 @@
 			LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
 		fi ;;
 	Darwin/*)
-		# Use -undefined dynamic_lookup whenever possible (10.3 and later).
-		# This allows an extension to be used in any Python
-
-		if test ${MACOSX_DEPLOYMENT_TARGET} '>' 10.2
-		then
-			if test "${enable_universalsdk}"; then
-				LDFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}"
-			fi
-			LDSHARED='$(CC) -bundle -undefined dynamic_lookup'
-			LDCXXSHARED='$(CXX) -bundle -undefined dynamic_lookup'
-			BLDSHARED="$LDSHARED"
-		else
-			LDSHARED='$(CC) -bundle'
-			LDCXXSHARED='$(CXX) -bundle'
+			LDSHARED='$(CC) $(LDFLAGS) -bundle'
+			LDCXXSHARED='$(CXX) $(LDFLAGS) -bundle'
 			if test "$enable_framework" ; then
 				# Link against the framework. All externals should be defined.
 				BLDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
@@ -8229,11 +8223,10 @@
 				LDCXXSHARED="$LDCXXSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 			else
 				# No framework, use the Python app as bundle-loader
-				BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
-				LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
-				LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+				BLDSHARED="$LDSHARED "'$(BLDLIBRARY)'
+				LDSHARED="$LDSHARED "'-L$(BINLIBDEST)/config -lpython$(VERSION)'
+				LDCXXSHARED="$LDCXXSHARED "'-L$(BINLIBDEST)/config -lpython$(VERSION)'
 			fi
-		fi
 		;;
 	Linux*|GNU*|QNX*)
 		LDSHARED='$(CC) -shared'
@@ -8623,7 +8616,7 @@
 if test "x$ac_cv_lib_intl_textdomain" = xyes; then :
 
 $as_echo "#define WITH_LIBINTL 1" >>confdefs.h
-
+LIBS="-lintl $LIBS"
 fi
 
 
@@ -14115,7 +14108,7 @@
 
 # first curses configure check
 ac_save_cppflags="$CPPFLAGS"
-CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
+CPPFLAGS="$CPPFLAGS -I@PREFIX@/include/ncursesw"
 
 for ac_header in curses.h ncurses.h
 do :
@@ -14473,7 +14466,7 @@
 
 if test $ac_sys_system = Darwin
 then
-	LIBS="$LIBS -framework CoreFoundation"
+	LIBS="$LIBS -Wl,-framework,CoreFoundation"
 fi
 
 
diff -ru Python-2.7.7.orig/setup.py Python-2.7.7/setup.py
--- Python-2.7.7.orig/setup.py	2014-05-31 14:58:40.000000000 -0400
+++ Python-2.7.7/setup.py	2014-06-29 08:08:10.000000000 -0400
@@ -264,13 +264,17 @@
                                               longest, g)
 
         if missing:
+            num_missing=len(missing)
             print
             print ("Python build finished, but the necessary bits to build "
                    "these modules were not found:")
             print_three_column(missing)
             print ("To find the necessary bits, look in setup.py in"
                    " detect_modules() for the module's name.")
+            print ("(Fink package build should have 5 missing)")
             print
+            if num_missing != 5:
+                sys.exit(1)
 
         if self.failed:
             failed = self.failed[:]
@@ -278,6 +282,7 @@
             print "Failed to build these modules:"
             print_three_column(failed)
             print
+            sys.exit(1)
 
     def build_extension(self, ext):
 
@@ -733,7 +738,9 @@
         if host_platform == 'darwin':
             os_release = int(os.uname()[2].split('.')[0])
             dep_target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
-            if dep_target and dep_target.split('.') < ['10', '5']:
+            if (dep_target and
+                    (tuple(int(n) for n in dep_target.split('.')[0:2])
+                        < (10, 5) ) ):
                 os_release = 8
             if os_release < 9:
                 # MacOSX 10.4 has a broken readline. Don't try to build
@@ -921,53 +928,8 @@
         # construct a list of paths to look for the header file in on
         # top of the normal inc_dirs.
         db_inc_paths = [
-            '/usr/include/db4',
-            '/usr/local/include/db4',
-            '/opt/sfw/include/db4',
-            '/usr/include/db3',
-            '/usr/local/include/db3',
-            '/opt/sfw/include/db3',
-            # Fink defaults (http://fink.sourceforge.net/)
-            '/sw/include/db4',
-            '/sw/include/db3',
+            '@PREFIX@/include/db4'
         ]
-        # 4.x minor number specific paths
-        for x in gen_db_minor_ver_nums(4):
-            db_inc_paths.append('/usr/include/db4%d' % x)
-            db_inc_paths.append('/usr/include/db4.%d' % x)
-            db_inc_paths.append('/usr/local/BerkeleyDB.4.%d/include' % x)
-            db_inc_paths.append('/usr/local/include/db4%d' % x)
-            db_inc_paths.append('/pkg/db-4.%d/include' % x)
-            db_inc_paths.append('/opt/db-4.%d/include' % x)
-            # MacPorts default (http://www.macports.org/)
-            db_inc_paths.append('/opt/local/include/db4%d' % x)
-        # 3.x minor number specific paths
-        for x in gen_db_minor_ver_nums(3):
-            db_inc_paths.append('/usr/include/db3%d' % x)
-            db_inc_paths.append('/usr/local/BerkeleyDB.3.%d/include' % x)
-            db_inc_paths.append('/usr/local/include/db3%d' % x)
-            db_inc_paths.append('/pkg/db-3.%d/include' % x)
-            db_inc_paths.append('/opt/db-3.%d/include' % x)
-
-        if cross_compiling:
-            db_inc_paths = []
-
-        # Add some common subdirectories for Sleepycat DB to the list,
-        # based on the standard include directories. This way DB3/4 gets
-        # picked up when it is installed in a non-standard prefix and
-        # the user has added that prefix into inc_dirs.
-        std_variants = []
-        for dn in inc_dirs:
-            std_variants.append(os.path.join(dn, 'db3'))
-            std_variants.append(os.path.join(dn, 'db4'))
-            for x in gen_db_minor_ver_nums(4):
-                std_variants.append(os.path.join(dn, "db4%d"%x))
-                std_variants.append(os.path.join(dn, "db4.%d"%x))
-            for x in gen_db_minor_ver_nums(3):
-                std_variants.append(os.path.join(dn, "db3%d"%x))
-                std_variants.append(os.path.join(dn, "db3.%d"%x))
-
-        db_inc_paths = std_variants + db_inc_paths
         db_inc_paths = [p for p in db_inc_paths if os.path.exists(p)]
 
         db_ver_inc_map = {}
@@ -1093,12 +1055,7 @@
         # We hunt for #define SQLITE_VERSION "n.n.n"
         # We need to find >= sqlite version 3.0.8
         sqlite_incdir = sqlite_libdir = None
-        sqlite_inc_paths = [ '/usr/include',
-                             '/usr/include/sqlite',
-                             '/usr/include/sqlite3',
-                             '/usr/local/include',
-                             '/usr/local/include/sqlite',
-                             '/usr/local/include/sqlite3',
+        sqlite_inc_paths = [ '@PREFIX@/include'
                            ]
         if cross_compiling:
             sqlite_inc_paths = []
@@ -1112,7 +1069,7 @@
         if host_platform == 'darwin':
             sysroot = macosx_sdk_root()
 
-        for d_ in inc_dirs + sqlite_inc_paths:
+        for d_ in sqlite_inc_paths:
             d = d_
             if host_platform == 'darwin' and is_macosx_sdk_path(d):
                 d = os.path.join(sysroot, d[1:])
@@ -1144,11 +1101,9 @@
             sqlite_dirs_to_check = [
                 os.path.join(sqlite_incdir, '..', 'lib64'),
                 os.path.join(sqlite_incdir, '..', 'lib'),
-                os.path.join(sqlite_incdir, '..', '..', 'lib64'),
-                os.path.join(sqlite_incdir, '..', '..', 'lib'),
             ]
             sqlite_libfile = self.compiler.find_library_file(
-                                sqlite_dirs_to_check + lib_dirs, 'sqlite3')
+                                sqlite_dirs_to_check, 'sqlite3')
             if sqlite_libfile:
                 sqlite_libdir = [os.path.abspath(os.path.dirname(sqlite_libfile))]
 
@@ -1268,7 +1223,7 @@
                         if self.compiler.find_library_file(lib_dirs,
                                                                'gdbm_compat'):
                             gdbm_libs.append('gdbm_compat')
-                        if find_file("gdbm/ndbm.h", inc_dirs, []) is not None:
+                        if find_file("ndbm.h", inc_dirs, []) is not None:
                             print "building dbm using gdbm"
                             dbmext = Extension(
                                 'dbm', ['dbmmodule.c'],
@@ -1346,7 +1301,7 @@
                 # _curses_panel.so must link with panelw.
                 panel_library = 'panelw'
             curses_libs = [curses_library]
-            curses_incs = find_file('curses.h', inc_dirs,
+            curses_incs = find_file('curses.h', ["@PREFIX/include"],
                                     [os.path.join(d, 'ncursesw') for d in inc_dirs])
             exts.append( Extension('_curses', ['_cursesmodule.c'],
                                    include_dirs = curses_incs,
@@ -2092,7 +2047,8 @@
                         sources=sources,
                         depends=depends)
         ext_test = Extension('_ctypes_test',
-                             sources=['_ctypes/_ctypes_test.c'])
+                             sources=['_ctypes/_ctypes_test.c'],
+                             extra_compile_args=['-O0'])
         self.extensions.extend([ext, ext_test])
 
         if not '--with-system-ffi' in sysconfig.get_config_var("CONFIG_ARGS"):
