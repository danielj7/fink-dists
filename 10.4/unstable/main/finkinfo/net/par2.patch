diff -Naur par2cmdline-0.4.orig/letype.h par2cmdline-0.4.new/letype.h
--- par2cmdline-0.4.orig/letype.h	2010-03-02 09:02:28.000000000 -0800
+++ par2cmdline-0.4.new/letype.h	2010-03-02 09:05:28.000000000 -0800
@@ -28,44 +28,15 @@
 
 #else
 
-class leu16
+struct leu16
 {
-public:
-  leu16(void);
-
-  leu16(const leu16 &other);
-  leu16& operator=(const leu16 &other);
-
-  leu16(const u16 &other);
   leu16& operator=(const u16 &other);
 
   operator u16(void) const;
 
-protected:
   u16 value;
 };
 
-inline leu16::leu16(void)
-{
-}
-
-inline leu16::leu16(const leu16 &other)
-: value(other.value)
-{
-}
-
-inline leu16& leu16::operator =(const leu16 &other)
-{
-  value = other.value;
-  return *this;
-}
-
-inline leu16::leu16(const u16 &other)
-{
-  ((unsigned char*)&value)[0] = (unsigned char)((other >> 0) & 0xff);
-  ((unsigned char*)&value)[1] = (unsigned char)((other >> 8) & 0xff);
-}
-
 inline leu16& leu16::operator=(const u16 &other)
 {
   ((unsigned char*)&value)[0] = (unsigned char)((other >> 0) & 0xff);
@@ -81,46 +52,15 @@
 }
 
 
-class leu32
+struct leu32
 {
-public:
-  leu32(void);
-
-  leu32(const leu32 &other);
-  leu32& operator=(const leu32 &other);
-
-  leu32(const u32 &other);
   leu32& operator=(const u32 &other);
 
   operator u32(void) const;
 
-protected:
   u32 value;
 };
 
-inline leu32::leu32(void)
-{
-}
-
-inline leu32::leu32(const leu32 &other)
-: value(other.value)
-{
-}
-
-inline leu32& leu32::operator =(const leu32 &other)
-{
-  value = other.value;
-  return *this;
-}
-
-inline leu32::leu32(const u32 &other)
-{
-  ((unsigned char*)&value)[0] = (unsigned char)((other >> 0) & 0xff);
-  ((unsigned char*)&value)[1] = (unsigned char)((other >> 8) & 0xff);
-  ((unsigned char*)&value)[2] = (unsigned char)((other >> 16) & 0xff);
-  ((unsigned char*)&value)[3] = (unsigned char)((other >> 24) & 0xff);
-}
-
 inline leu32& leu32::operator=(const u32 &other)
 {
   ((unsigned char*)&value)[0] = (unsigned char)((other >> 0) & 0xff);
@@ -140,50 +80,15 @@
 }
 
 
-class leu64
+struct leu64
 {
-public:
-  leu64(void);
-
-  leu64(const leu64 &other);
-  leu64& operator=(const leu64 &other);
-
-  leu64(const u64 &other);
   leu64& operator=(const u64 &other);
 
   operator u64(void) const;
 
-protected:
   u64 value;
 };
 
-inline leu64::leu64(void)
-{
-}
-
-inline leu64::leu64(const leu64 &other)
-: value(other.value)
-{
-}
-
-inline leu64& leu64::operator =(const leu64 &other)
-{
-  value = other.value;
-  return *this;
-}
-
-inline leu64::leu64(const u64 &other)
-{
-  ((unsigned char*)&value)[0] = (unsigned char)((other >> 0) & 0xff);
-  ((unsigned char*)&value)[1] = (unsigned char)((other >> 8) & 0xff);
-  ((unsigned char*)&value)[2] = (unsigned char)((other >> 16) & 0xff);
-  ((unsigned char*)&value)[3] = (unsigned char)((other >> 24) & 0xff);
-  ((unsigned char*)&value)[4] = (unsigned char)((other >> 32) & 0xff);
-  ((unsigned char*)&value)[5] = (unsigned char)((other >> 40) & 0xff);
-  ((unsigned char*)&value)[6] = (unsigned char)((other >> 48) & 0xff);
-  ((unsigned char*)&value)[7] = (unsigned char)((other >> 56) & 0xff);
-}
-
 inline leu64& leu64::operator=(const u64 &other)
 {
   ((unsigned char*)&value)[0] = (unsigned char)((other >> 0) & 0xff);
diff -Naur par2cmdline-0.4.orig/md5.h par2cmdline-0.4.new/md5.h
--- par2cmdline-0.4.orig/md5.h	2010-03-02 09:02:28.000000000 -0800
+++ par2cmdline-0.4.new/md5.h	2010-03-02 09:05:28.000000000 -0800
@@ -20,6 +20,13 @@
 #ifndef __MD5_H__
 #define __MD5_H__
 
+#ifdef WIN32
+#pragma pack(push, 1)
+#define PACKED
+#else
+#define PACKED __attribute__ ((packed))
+#endif
+
 // This file defines the MD5Hash and MD5Context objects which are used
 // to compute and manipulate the MD5 Hash values for a block of data.
 
@@ -35,12 +42,11 @@
 
 // MD5 Hash value
 
-class MD5Hash
-{
-public:
-  // Constructor does not initialise the value
-  MD5Hash(void) {};
+struct MD5Hash;
+ostream& operator<<(ostream &s, const MD5Hash &hash);
 
+struct MD5Hash
+{
   // Comparison operators
   bool operator==(const MD5Hash &other) const;
   bool operator!=(const MD5Hash &other) const;
@@ -54,13 +60,8 @@
   friend ostream& operator<<(ostream &s, const MD5Hash &hash);
   string print(void) const;
 
-  // Copy and assignment
-  MD5Hash(const MD5Hash &other);
-  MD5Hash& operator=(const MD5Hash &other);
-
-public:
   u8 hash[16]; // 16 byte MD5 Hash value
-};
+} PACKED;
 
 // Intermediate computation state
 
@@ -144,16 +145,9 @@
   return !other.operator<(*this);
 }
 
-inline MD5Hash::MD5Hash(const MD5Hash &other)
-{
-  memcpy(&hash, &other.hash, sizeof(hash));
-}
-
-inline MD5Hash& MD5Hash::operator=(const MD5Hash &other)
-{
-  memcpy(&hash, &other.hash, sizeof(hash));
-
-  return *this;
-}
+#ifdef WIN32
+#pragma pack(pop)
+#endif
+#undef PACKED
 
 #endif // __MD5_H__
diff -Naur par2cmdline-0.4.orig/reedsolomon.cpp par2cmdline-0.4.new/reedsolomon.cpp
--- par2cmdline-0.4.orig/reedsolomon.cpp	2010-03-02 09:02:28.000000000 -0800
+++ par2cmdline-0.4.new/reedsolomon.cpp	2010-03-02 09:05:28.000000000 -0800
@@ -51,7 +51,7 @@
   }
 }
 
-bool ReedSolomon<Galois8>::SetInput(const vector<bool> &present)
+template<> bool ReedSolomon<Galois8>::SetInput(const vector<bool> &present)
 {
   inputcount = (u32)present.size();
 
@@ -80,7 +80,7 @@
   return true;
 }
 
-bool ReedSolomon<Galois8>::SetInput(u32 count)
+template<> bool ReedSolomon<Galois8>::SetInput(u32 count)
 {
   inputcount = count;
 
@@ -101,7 +101,7 @@
   return true;
 }
 
-bool ReedSolomon<Galois8>::Process(size_t size, u32 inputindex, const void *inputbuffer, u32 outputindex, void *outputbuffer)
+template<> bool ReedSolomon<Galois8>::Process(size_t size, u32 inputindex, const void *inputbuffer, u32 outputindex, void *outputbuffer)
 {
   // Look up the appropriate element in the RS matrix
   Galois8 factor = leftmatrix[outputindex * (datapresent + datamissing) + inputindex];
@@ -189,7 +189,7 @@
 
 // Set which of the source files are present and which are missing
 // and compute the base values to use for the vandermonde matrix.
-bool ReedSolomon<Galois16>::SetInput(const vector<bool> &present)
+template<> bool ReedSolomon<Galois16>::SetInput(const vector<bool> &present)
 {
   inputcount = (u32)present.size();
 
@@ -233,7 +233,7 @@
 
 // Record that the specified number of source files are all present
 // and compute the base values to use for the vandermonde matrix.
-bool ReedSolomon<Galois16>::SetInput(u32 count)
+template<> bool ReedSolomon<Galois16>::SetInput(u32 count)
 {
   inputcount = count;
 
@@ -267,7 +267,7 @@
   return true;
 }
 
-bool ReedSolomon<Galois16>::Process(size_t size, u32 inputindex, const void *inputbuffer, u32 outputindex, void *outputbuffer)
+template<> bool ReedSolomon<Galois16>::Process(size_t size, u32 inputindex, const void *inputbuffer, u32 outputindex, void *outputbuffer)
 {
   // Look up the appropriate element in the RS matrix
 
