--- cheesetracker-0.9.9/common/plugins/effects/custom/custom_fx_param_list.cpp	Thu Apr 22 23:21:14 2004
+++ cheesetracker-0.9.9-new/common/plugins/effects/custom/custom_fx_param_list.cpp	Mon Sep 13 09:04:31 2004
@@ -51,7 +51,7 @@
 	properties.resize( properties.size() + 1 );
 	Element &e = properties[ properties.size() -1 ];
 
-	e.type=Element::TYPE_FLOAT;
+	e.type=Element::TYPE_F;
 	e.float_v=p_default;
 	e.bridge = new Float_Property_Bridge(p_name,&e.float_v,p_min,p_max,p_identifier);
 	
@@ -63,7 +63,7 @@
 	properties.resize( properties.size() + 1 );
 	Element &e = properties[ properties.size() -1 ];
 
-	e.type=Element::TYPE_INT;
+	e.type=Element::TYPE_I;
 	e.int_v=p_default;
 	e.bridge = new Int_Property_Bridge(p_name,&e.int_v,p_min,p_max,p_identifier);
 	
@@ -74,7 +74,7 @@
 	properties.resize( properties.size() + 1 );
 	Element &e = properties[ properties.size() -1 ];
 
-	e.type=Element::TYPE_BOOL;
+	e.type=Element::TYPE_B;
 	e.bool_v=p_default;
 	e.bridge = new Bool_Property_Bridge(p_name,&e.bool_v,p_identifier);
 }
@@ -84,7 +84,7 @@
 	properties.resize( properties.size() + 1 );
 	Element &e = properties[ properties.size() -1 ];
 
-	e.type=Element::TYPE_INT;
+	e.type=Element::TYPE_I;
 	e.int_v=p_default;
 	e.bridge = new Options_Property_Bridge(p_name,&e.int_v,p_options,p_option_count,p_identifier);
 
@@ -97,7 +97,7 @@
 		return;
 	}
 	
-	if (properties[p_index].type!=Element::TYPE_FLOAT) {
+	if (properties[p_index].type!=Element::TYPE_F) {
 		ERROR("Wrong property type");
 		return;
 	}
@@ -112,7 +112,7 @@
 		return;
 	}
 	
-	if (properties[p_index].type!=Element::TYPE_BOOL) {
+	if (properties[p_index].type!=Element::TYPE_B) {
 		ERROR("Wrong property type");
 		return;
 	}
@@ -128,7 +128,7 @@
 		return;
 	}
 
-	if (properties[p_index].type!=Element::TYPE_INT) {
+	if (properties[p_index].type!=Element::TYPE_I) {
 		ERROR("Wrong property type");
 		return;
 	}
@@ -144,7 +144,7 @@
 		return 0;
 	}
 	
-	if (properties[p_index].type!=Element::TYPE_FLOAT) {
+	if (properties[p_index].type!=Element::TYPE_F) {
 		ERROR("Wrong property type");
 		return 0;
 	}
@@ -159,7 +159,7 @@
 		return false;
 	}
 	
-	if (properties[p_index].type!=Element::TYPE_BOOL) {
+	if (properties[p_index].type!=Element::TYPE_B) {
 		ERROR("Wrong property type");
 		return false;
 	}
@@ -173,7 +173,7 @@
 		return 0;
 	}
 	
-	if (properties[p_index].type!=Element::TYPE_INT) {
+	if (properties[p_index].type!=Element::TYPE_I) {
 		ERROR("Wrong property type");
 		return 0;
 	}
--- cheesetracker-0.9.9/common/plugins/effects/custom/custom_fx_param_list.h	Thu Apr 22 23:21:14 2004
+++ cheesetracker-0.9.9-new/common/plugins/effects/custom/custom_fx_param_list.h	Mon Sep 13 09:04:31 2004
@@ -23,9 +23,9 @@
         struct Element {
 		
 		enum Type {
-			TYPE_FLOAT,
-			TYPE_BOOL,
-			TYPE_INT
+			TYPE_F,
+			TYPE_B,
+			TYPE_I
 		};
 		
 		Type type;
@@ -39,7 +39,7 @@
 		Property_Bridge *bridge;
 		
 		Element() { 
-			type=TYPE_INT;
+			type=TYPE_I;
 			int_v=0;
 		}		
 	};
--- cheesetracker-0.9.9/common/plugins/effects/ladspa/ladspa_effect.cpp	Thu Apr 22 23:21:13 2004
+++ cheesetracker-0.9.9-new/common/plugins/effects/ladspa/ladspa_effect.cpp	Mon Sep 13 09:04:31 2004
@@ -92,7 +92,7 @@
 
 			if (LADSPA_IS_HINT_TOGGLED(hints[i].HintDescriptor)) {
 
-				new_prop->type=Property::TYPE_BOOL;
+				new_prop->type=Property::TYPE_B;
 				new_prop->bridge = new Bool_Property_Bridge(port_name,&new_prop->bridged.bool_control,port_var_name);
 				properties.push_back(new_prop);
 
@@ -164,13 +164,13 @@
 			}
 			if (is_int) {
 
-				new_prop->type=Property::TYPE_INT;
+				new_prop->type=Property::TYPE_I;
 				new_prop->bridge = new Int_Property_Bridge(port_name,&new_prop->bridged.int_control,(int)min,(int)max,port_var_name);
 				new_prop->bridged.int_control=(int)def;
 
 			} else {
 
-				new_prop->type=Property::TYPE_FLOAT;
+				new_prop->type=Property::TYPE_F;
 				new_prop->bridge = new Float_Property_Bridge(port_name,&new_prop->bridged.float_control,min,max,port_var_name);
 				new_prop->bridged.float_control=(int)def;
 			}
@@ -384,13 +384,13 @@
 	for (int i=0;i<(int)properties.size();i++) {
 
 		switch(parameters->properties[i]->type) {
-                        case LADSPA_Effect_Parameters::Property::TYPE_INT: {
+                        case LADSPA_Effect_Parameters::Property::TYPE_I: {
                        		properties[i].ladspa_control=(float)parameters->properties[i]->bridged.int_control;
 			} break;
-                        case LADSPA_Effect_Parameters::Property::TYPE_BOOL: {
+                        case LADSPA_Effect_Parameters::Property::TYPE_B: {
                        		properties[i].ladspa_control=parameters->properties[i]->bridged.bool_control?1.0f:0.0f;
 			} break;
-                        case LADSPA_Effect_Parameters::Property::TYPE_FLOAT: {
+                        case LADSPA_Effect_Parameters::Property::TYPE_F: {
                        		properties[i].ladspa_control=parameters->properties[i]->bridged.float_control;
 			} break;
 		}
--- cheesetracker-0.9.9/common/plugins/effects/ladspa/ladspa_effect.h	Thu Apr 22 23:21:13 2004
+++ cheesetracker-0.9.9-new/common/plugins/effects/ladspa/ladspa_effect.h	Mon Sep 13 09:04:31 2004
@@ -49,9 +49,9 @@
 		struct Property {	
 			
 			enum Type {
-				TYPE_INT,
-				TYPE_BOOL,
-				TYPE_FLOAT
+				TYPE_I,
+				TYPE_B,
+				TYPE_F
 			};
 			
 			Type type;
@@ -65,7 +65,7 @@
 			Property_Bridge *bridge;
 			
 			Property() {
-				type=TYPE_FLOAT;
+				type=TYPE_F;
 				bridge=NULL;
 				memset(&bridged,0,sizeof(ParamControl));				
 			}
--- cheesetracker-0.9.9/common/property_server/mremotecmd.h	Thu Apr 22 23:21:25 2004
+++ cheesetracker-0.9.9-new/common/property_server/mremotecmd.h	Mon Sep 13 09:04:12 2004
@@ -9,7 +9,6 @@
 #include <sys/time.h>
 #include <sys/stat.h>
 #include <sys/ipc.h>
-#include <sys/msg.h>
 #include <fcntl.h>
 #include <netinet/in.h>
 
--- cheesetracker-0.9.9/SConstruct	Fri Apr 23 01:51:57 2004
+++ cheesetracker-0.9.9-patched/SConstruct	Mon May  3 20:05:42 2004
@@ -54,7 +54,8 @@
 env.detect = detect.Detect()
 
 if os.environ.has_key('DISTCC_HOSTS'):
-	env['CXX'] = os.environ['CXX']
+	if os.environ.has_key('CXX'):
+		env['CXX'] = os.environ['CXX']
 	env['ENV']['DISTCC_HOSTS'] = os.environ['DISTCC_HOSTS']
 	env['ENV']['HOME'] = os.environ['HOME']
 
@@ -104,8 +105,9 @@
 
 if (env.detect.os_is_macosx):
 	env.Append(CXXFLAGS=['-DMACOSX_ENABLED']);
-	env.Append(LINKFLAGS=['-framework','CoreAudio'])
+	env.Append(CXXFLAGS=['-DRTAUDIO_ENABLED']);
+	env.Append(LINKFLAGS=['-arch','@FINKARCH@','-framework','CoreAudio','-lz.1.1.3'])
-	env.Append(CPPFLAGS=['-I/sw/include']);
+	env.Append(CPPFLAGS=['-arch','@FINKARCH@','-I@FINKPREFIX@/include']);
 
 if (env.detect.is_oss_installed):
 	env.Append(CXXFLAGS=['-DOSS_ENABLED']);
--- cheesetracker-0.9.9/cheesetracker/interface__QT/interface.cpp	Thu Apr 22 23:21:30 2004
+++ cheesetracker-0.9.9-patched/cheesetracker/interface__QT/interface.cpp	Mon May  3 21:04:55 2004
@@ -481,33 +481,57 @@
 Interface::Interface(QWidget *p_widget) : QTabWidget(p_widget) {
 
 	pattern_editor = new  Pattern_Edit_Widget(this);
-	addTab(pattern_editor,QPixmap((const char**)icon_patterns_xpm) ,"Patterns");
+#ifdef __APPLE__
+	addTab(pattern_editor,"Patterns");
+#else
+	addTab(pattern_editor,QPixmap((const char**)icon_patterns_xpm),"Patterns");
+#endif
 	pattern_editor ->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 	QObject::connect( pattern_editor, SIGNAL(instrument_changed(int)), this, SLOT(selected_instrument_in_pattern(int)) );
 
 
 	sample_editor = new Sample_Edit(this);
+#ifdef __APPLE__
+	addTab(sample_editor,"Samples");
+#else
 	addTab(sample_editor,QPixmap((const char**)icon_sample_xpm),"Samples");
+#endif
 	sample_editor->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 	QObject::connect( sample_editor, SIGNAL(selected_sample_signal(int)), this, SLOT(selected_sample_in_editor(int)) );
 
 	instrument_editor = new Instrument_Edit(this);
+#ifdef __APPLE__
+	addTab(instrument_editor,"Instruments");
+#else
 	addTab(instrument_editor,QPixmap((const char**)icon_envelope_xpm),"Instruments");
+#endif
 	instrument_editor ->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 
 	order_and_defaults_editor = new Order_And_Defaults_Editor(this);
+#ifdef __APPLE__
+	addTab(order_and_defaults_editor,"Order && Defaults");
+#else
 	addTab(order_and_defaults_editor,QPixmap((const char**)icon_variables_xpm),"Order && Defaults");
+#endif
 	order_and_defaults_editor->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 
 
 	variables_editor = new Variables_Edit(this);
 
+#ifdef __APPLE__
+	addTab(variables_editor,"Variables");
+#else
 	addTab(variables_editor,QPixmap((const char**)icon_tempo_xpm),"Variables");
+#endif
 	variables_editor->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 
         buffers_editor = new Mixer_Effects_Manager(this);
 	buffers_editor->set_mixer(&tracker.mixer);
+#ifdef __APPLE__
+	addTab(buffers_editor,"Buffers");
+#else
 	addTab(buffers_editor,QPixmap((const char**)icon_vumeter_xpm),"Buffers");
+#endif
 
 	timer=new QTimer(this);
 	QObject::connect( timer, SIGNAL(timeout()), this, SLOT(widget_update_timer()) );
--- cheesetracker-0.9.9/cheesetracker/interface__QT/pattern_edit.cpp	Thu Apr 22 23:21:31 2004
+++ cheesetracker-0.9.9-patched/cheesetracker/interface__QT/pattern_edit.cpp	Mon May  3 20:46:52 2004
@@ -101,7 +101,7 @@
 #if defined(MACOSX_ENABLED)
 	font.setFamily("Bitstream Vera Sans Mono");
 	font.setPointSize(11);
-#elseif defined(CYGWIN_ENABLED)
+#elif defined(CYGWIN_ENABLED)
 
 	font.setFamily("Terminal");
 	font.setPointSize(10);
--- cheesetracker-0.9.9/cheesetracker/interface__QT/settings_window.cpp	Thu Apr 22 23:21:31 2004
+++ cheesetracker-0.9.9-patched/cheesetracker/interface__QT/settings_window.cpp	Mon May  3 21:04:55 2004
@@ -143,7 +143,11 @@
 
 	QHBox *auxhbox = new QHBox(sections);
 
+#ifdef __APPLE__
+	sections->addTab(auxhbox,"Audio");
+#else
 	sections->addTab(auxhbox,QPixmap((const char**)icon_audio_config_xpm),"Audio");
+#endif
 
 	audio_config = new Audio_Config(auxhbox);
 	audio_config->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
@@ -154,12 +158,20 @@
 
 
 	color_list = new CColor_List(sections);
+#ifdef __APPLE__
+	sections->addTab(color_list,"Colors");
+#else
 	sections->addTab(color_list,QPixmap((const char**)icon_colors_xpm),"Colors");
+#endif
 	color_list->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 
 	Tracker_Instance::init_keyboard();
         keyboard_config = new Keyboard_Input_Config(sections);
+#ifdef __APPLE__
+	sections->addTab(keyboard_config,"Keyboard");
+#else
 	sections->addTab(keyboard_config,QPixmap((const char**)icon_keys_xpm),"Keyboard");
+#endif
 	keyboard_config->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
 
 
@@ -294,7 +306,11 @@
 
 	interface_settings = new Interface_Settings(sections);
 	interface_settings->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,QSizePolicy::Expanding));
+#ifdef __APPLE__
+	sections->addTab(interface_settings,"Interface");
+#else
 	sections->addTab(interface_settings,QPixmap((const char**)icon_interface_xpm),"Interface");
+#endif
         QObject::connect(button_close,SIGNAL(clicked()),this,SLOT(hide()));
 
 
--- cheesetracker-0.9.9/cheesetracker/interface__QT/table_base.cpp	Thu Apr 22 23:21:31 2004
+++ cheesetracker-0.9.9-patched/cheesetracker/interface__QT/table_base.cpp	Mon May  3 20:46:52 2004
@@ -73,7 +73,7 @@
 #if defined(MACOSX_ENABLED)
 	font.setFamily("Bitstream Vera Sans Mono");
 	font.setPointSize(11);
-#elseif defined(CYGWIN_ENABLED)
+#elif defined(CYGWIN_ENABLED)
 
 	font.setFamily("Terminal");
 	font.setPointSize(10);
--- cheesetracker-0.9.9/common/drivers/posix/tcp_client_posix.cpp	Thu Apr 22 23:21:26 2004
+++ cheesetracker-0.9.9-patched/common/drivers/posix/tcp_client_posix.cpp	Fri Apr 23 17:28:52 2004
@@ -2,6 +2,14 @@
 
 #include "tcp_client_posix.h"
 
+#ifndef socklen_t
+#define socklen_t unsigned int
+#endif
+
+#ifndef MSG_NOSIGNAL
+#define MSG_NOSIGNAL (socklen_t)0
+#endif
+
 #define INFO(a,b) WARN(a b)
 
 void TcpClientPosix::connect_to_host(string p_host,int p_port) {
--- cheesetracker-0.9.9/common/drivers/posix/tcp_server_posix.cpp	Thu Apr 22 23:21:26 2004
+++ cheesetracker-0.9.9-patched/common/drivers/posix/tcp_server_posix.cpp	Fri Apr 23 17:28:52 2004
@@ -2,6 +2,14 @@
 
 #include "tcp_server_posix.h"
 
+#ifndef socklen_t
+#define socklen_t unsigned int
+#endif
+
+#ifndef MSG_NOSIGNAL
+#define MSG_NOSIGNAL (socklen_t)0
+#endif
+
 bool TcpServerPosix::start_listening() {
 
 	int yes=1;
--- cheesetracker-0.9.9/common/drivers/rtaudio/rt_audio.h	Thu Apr 22 23:21:27 2004
+++ cheesetracker-0.9.9-patched/common/drivers/rtaudio/rt_audio.h	Mon May  3 21:11:17 2004
@@ -51,7 +51,10 @@
 # define RTAUDIO_ENABLED
 #endif
 
+#ifndef __APPLE__
+// disable for everything but Mac for now
 #undef RTAUDIO_ENABLED
+#endif
 
 #ifdef RTAUDIO_ENABLED
 
--- cheesetracker-0.9.9/common/property_server/mremotecmd.cpp	Thu Apr 22 23:21:25 2004
+++ cheesetracker-0.9.9-patched/common/property_server/mremotecmd.cpp	Mon May  3 21:10:12 2004
@@ -1,3 +1,5 @@
+#ifndef __APPLE__
+
 #include "mremotecmd.h"
 
 int fifo_open_read(char *fifoname) {
@@ -179,4 +181,4 @@
   return(res);
 }
                                                                                                                
-
+#endif
diff -ur cheesetracker-0.9.9.orig/cheesetracker/trackercore/saver.cpp cheesetracker-0.9.9/cheesetracker/trackercore/saver.cpp
--- cheesetracker-0.9.9.orig/cheesetracker/trackercore/saver.cpp	2004-04-23 03:21:32.000000000 +0000
+++ cheesetracker-0.9.9/cheesetracker/trackercore/saver.cpp	2006-03-10 13:15:44.000000000 +0000
@@ -35,11 +35,7 @@
 
 #include "saver.h"
 
-namespace Audio {
-
-
 Saver::Saver(){
 }
 Saver::~Saver(){
 }
-}; // end of namespace declaration
diff -ur cheesetracker-0.9.9.orig/common/components/audio/resampler_manager.h cheesetracker-0.9.9/common/components/audio/resampler_manager.h
--- cheesetracker-0.9.9.orig/common/components/audio/resampler_manager.h	2004-04-23 03:21:22.000000000 +0000
+++ cheesetracker-0.9.9/common/components/audio/resampler_manager.h	2006-03-10 12:56:38.000000000 +0000
@@ -34,7 +34,7 @@
 
 public:
 
-	static Resampler_Manager * Resampler_Manager::get_resampler_manager();
+	static Resampler_Manager * get_resampler_manager();
 	int get_resampler_count();
 	Resampler * get_resampler(int p_index);
 
diff -ur cheesetracker-0.9.9.orig/common/components/data/property_bridges.h cheesetracker-0.9.9/common/components/data/property_bridges.h
--- cheesetracker-0.9.9.orig/common/components/data/property_bridges.h	2004-04-23 03:21:24.000000000 +0000
+++ cheesetracker-0.9.9/common/components/data/property_bridges.h	2006-03-10 12:56:38.000000000 +0000
@@ -41,7 +41,7 @@
   */
 
   #define BRIDGE_COPY_VALUE(T) \
-	virtual bool T::copy_value(const Property_Bridge& rvalue) {\
+	virtual bool copy_value(const Property_Bridge& rvalue) {\
 		T* rcast = dynamic_cast<T*>((T*)&rvalue);\
 		if (rcast) {\
 			set(rcast->get());\
diff -ur cheesetracker-0.9.9.orig/common/drivers/posix/sound_driver_jack.h cheesetracker-0.9.9/common/drivers/posix/sound_driver_jack.h
--- cheesetracker-0.9.9.orig/common/drivers/posix/sound_driver_jack.h	2004-04-23 03:21:26.000000000 +0000
+++ cheesetracker-0.9.9/common/drivers/posix/sound_driver_jack.h	2006-03-10 12:57:44.000000000 +0000
@@ -72,7 +72,7 @@
 
 	int jack_callback_nframes;
 
-	Sound_Driver::Status Sound_Driver_JACK::process();
+	Sound_Driver::Status process();
 
         static int process_jack_callback(jack_nframes_t nframes,void *arg);
         static int jack_set_mixfreq(jack_nframes_t nframes,void *arg);
