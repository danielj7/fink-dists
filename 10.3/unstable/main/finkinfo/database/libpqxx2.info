Package: libpqxx2
Version: 2.6.8
Revision: 11
Description: PostgreSQL C++ interface
License: BSD
Maintainer: Benjamin Reed <libpqxx2@fink.racoonfink.com>

Depends: %N-shlibs (= %v-%r)
BuildDepends: postgresql82-dev, system-openssl-dev
Provides: libpqxx2-dev
Conflicts: libpqxx
Replaces: libpqxx, postgresql73-dev, postgresql74-dev, postgresql80-dev, postgresql81-dev
GCC: 3.3

Source: http://thaiopensource.org/download/software/libpqxx/libpqxx-%v.tar.gz
Source-MD5: cb818ca7698955bcea8b7ba1b7962811
Patch: %n.patch
PatchScript: 	perl -pi -e 's,hardcode_direct=yes,hardcode_direct=no,g' configure

ConfigureParams: --mandir=%p/share/man --enable-shared
CompileScript: <<
#!/bin/sh -ev

	export lt_cv_sys_max_cmd_len=65536 PG_CONFIG=%p/bin/pg_config-8.2
	export CPPFLAGS="-I%p/lib/system-openssl/include -I%p/include/postgresql -I%p/include -DHAVE_OPTRESET -fno-common"
	export LDFLAGS="-L%p/lib/system-openssl/lib -L%p/lib"

	./configure %c
	make CC="g++" CXX="g++" CPP="g++ -E"
<<

InstallScript: <<
#!/bin/sh -ev

	make -j1 install DESTDIR=%d
	install -d -m 755 %i/share/doc/%N
	mv doc/html/* %i/share/doc/%N/
	find %i/share/doc/%N -type d -name CVS -exec rm -rf {} \; || :
<<
DocFiles: AUTHORS COPYING ChangeLog INSTALL NEWS README* TODO VERSION
SplitOff: <<
	Package: %N-shlibs
	Description: Shared libraries for the PostgreSQL C++ interface
	Depends: postgresql82-shlibs
	Files: lib/libpqxx.*.dylib
	Shlibs: %p/lib/libpqxx.2.dylib 9.0.0 %n (>= 2.6.8-1)
<<

Homepage: http://pqxx.org/
DescDetail: <<
Welcome to libpqxx, a C++ API to the PostgreSQL database management system.

There are many similar libraries for PostgreSQL and for other databases,
some of them database-independent.   Most of these, however, are fairly
C-like in their programming style, and fail to take advantage of the full
power of the C++ language as it has matured since the acceptance of the
Standard in 1996.  What libpqxx brings you is effective use of templates to
reduce the inconvenience of dealing with type conversions; of standard C++
strings to keep you from having to worry about buffer allocation and
overflow attacks; of exceptions to take the tedious and error-prone
plumbing around error handling out of your hands; of constructors and
destructors to bring resource management under control; and even basic
object-orientation to give you some extra reliability features that would
be hard to get with most other database interfaces.
<<

