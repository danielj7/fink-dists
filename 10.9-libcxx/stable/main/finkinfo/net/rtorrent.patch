--- rtorrent-0.8.9-orig/rak/allocators.h	2011-06-21 22:37:15.000000000 -0700
+++ rtorrent-0.8.9/rak/allocators.h	2011-06-21 22:42:44.000000000 -0700
@@ -77,8 +77,15 @@
 
   static pointer alloc_size(size_type size) {
     pointer ptr = NULL;
+#ifdef	HAVE_POSIX_MEMALIGN
     int __UNUSED result = posix_memalign((void**)&ptr, LT_SMP_CACHE_BYTES, size);
 
+#elif	defined(__APPLE__)
+	// apple-darwin's malloc is already Altivec-aligned (16B)
+	ptr = static_cast<pointer>(malloc(size));
+#else
+#error	"Missing equivalent of posix_memalign()."
+#endif
     return ptr;
   }
 
--- rtorrent-0.9.2-orig/src/thread_base.h	2011-06-21 23:12:25.000000000 -0700
+++ rtorrent-0.9.2/src/thread_base.h	2011-06-21 23:33:19.000000000 -0700
@@ -37,6 +37,24 @@
 #ifndef LIBTORRENT_THREAD_BASE_H
 #define LIBTORRENT_THREAD_BASE_H
 
+#if (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2))
+#if defined(__APPLE__)
+#define	USE_DARWIN_ATOMICS
+#endif
+#endif
+
+#ifdef	USE_DARWIN_ATOMICS
+#include <libkern/OSAtomic.h>
+#define	__sync_add_and_fetch(x, y)	OSAtomicAdd32Barrier(y, (int32_t*)x)
+#define	__sync_sub_and_fetch(x, y)	OSAtomicAdd32Barrier(-(y), (int32_t*)x)
+#define	__sync_and_and_fetch(x, y)	OSAtomicAnd32Barrier(y, (uint32_t*)x)
+#define	__sync_or_and_fetch(x, y)	OSAtomicOr32Barrier(y, (uint32_t*)x)
+#define	__sync_lock_test_and_set(x, y)	OSAtomicTestAndSetBarrier(y, x)
+#define	__sync_bool_compare_and_swap(x, y, z)	OSAtomicCompareAndSwap32Barrier(y, z, (int32_t*)x)
+#define	__sync_fetch_and_or(x, y)	( __sync_or_and_fetch(x, y), *x )
+#define	__sync_fetch_and_and(x, y)	( __sync_and_and_fetch(x, y), *x )
+#endif
+
 #include <pthread.h>
 #include <sys/types.h>
 #include <torrent/common.h>
--- rtorrent-0.8.9-orig/src/control.h	2011-06-27 11:08:48.000000000 -0700
+++ rtorrent-0.8.9/src/control.h	2011-06-27 11:10:06.000000000 -0700
@@ -43,6 +43,9 @@
 #include <rak/priority_queue_default.h>
 #include <torrent/torrent.h>
 
+#include <libkern/OSAtomic.h>
+#define	__sync_synchronize	OSMemoryBarrier
+
 namespace ui {
   class Root;
 }
--- rtorrent-0.8.9-orig/src/rpc/command_impl.h	2011-06-27 12:20:31.000000000 -0700
+++ rtorrent-0.8.9/src/rpc/command_impl.h	2011-06-27 12:23:22.000000000 -0700
@@ -92,7 +92,8 @@
 
 inline torrent::Object*
 command_base::push_stack(const torrent::Object::list_type& args, stack_type* stack) {
-  return push_stack(args.data(), args.data() + args.size(), stack);
+  // vector<>::data() was introduced by ISO C++ DR 464
+  return push_stack(&args.front(), &args.front() + args.size(), stack);
 }
 
 inline void
--- rtorrent-0.8.9-orig/src/rpc/object_storage.h	2011-06-27 12:33:21.000000000 -0700
+++ rtorrent-0.8.9/src/rpc/object_storage.h	2011-06-27 12:33:38.000000000 -0700
@@ -78,7 +78,7 @@
   using base_type::end;
   using base_type::size;
   using base_type::empty;
-  using base_type::key_eq;
+  using base_type::key_equal;
   using base_type::bucket;
   using base_type::bucket_count;
   using base_type::max_bucket_count;
--- rtorrent-0.8.9-orig/src/thread_base.cc	2011-07-16 16:41:13.000000000 -0700
+++ rtorrent-0.8.9/src/thread_base.cc	2011-07-16 16:45:34.000000000 -0700
@@ -79,7 +79,7 @@
     if (itr == max_capacity())
       throw torrent::internal_error("Overflowed thread_queue.");
 
-    __sync_bool_compare_and_swap(itr, NULL, v);
+    __sync_bool_compare_and_swap(reinterpret_cast<ssize_t*>(itr), NULL, reinterpret_cast<ssize_t>(v));
     unlock();
   }
 
--- rtorrent-0.8.9-orig/src/thread_worker.cc	2011-07-16 16:45:44.000000000 -0700
+++ rtorrent-0.8.9/src/thread_worker.cc	2011-07-16 16:46:43.000000000 -0700
@@ -69,7 +69,7 @@
 
 bool
 ThreadWorker::set_scgi(rpc::SCgi* scgi) {
-  if (!__sync_bool_compare_and_swap(&m_safe.scgi, NULL, scgi))
+  if (!__sync_bool_compare_and_swap(reinterpret_cast<ssize_t*>(&m_safe.scgi), NULL, reinterpret_cast<ssize_t>(scgi)))
     return false;
 
   change_xmlrpc_log();
--- rtorrent-0.9.2-orig/test/rpc/object_storage_test.cc	2012-08-03 17:35:38.000000000 -0700
+++ rtorrent-0.9.2/test/rpc/object_storage_test.cc	2012-08-03 17:35:10.000000000 -0700
@@ -9,7 +9,7 @@
 
 void
 ObjectStorageTest::test_basics() {
-  rpc::object_storage::iterator itr;
+  rpc::object_storage::iterator itr(m_storage.begin());
 
   CPPUNIT_ASSERT(m_storage.empty());
   
--- rtorrent-0.9.6-orig/src/rpc/command.h	2015-09-03 12:03:30.000000000 -0700
+++ rtorrent-0.9.6/src/rpc/command.h	2016-04-01 19:08:17.000000000 -0700
@@ -41,14 +41,10 @@
 #include <limits>
 #include <inttypes.h>
 #include <torrent/object.h>
-#include <tr1/functional>
 
 #include <torrent/object.h>
 #include <torrent/data/file_list_iterator.h>
 
-// Move into config.h or something.
-namespace tr1 { using namespace std::tr1; }
-
 namespace core {
   class Download;
 }
@@ -111,7 +107,7 @@
 class command_base;
 
 typedef const torrent::Object (*command_base_call_type)(command_base*, target_type, const torrent::Object&);
-typedef tr1::function<torrent::Object (target_type, const torrent::Object&)> base_function;
+typedef std::function<torrent::Object (target_type, const torrent::Object&)> base_function;
 
 template <typename tmpl> struct command_base_is_valid {};
 template <command_base_call_type tmpl_func> struct command_base_is_type {};
@@ -250,7 +246,7 @@
 }
 
 #define COMMAND_BASE_TEMPLATE_TYPE(func_type, func_parm)                \
-  template <typename T, int proper = target_type_id<T>::proper_type> struct func_type { typedef tr1::function<func_parm> type; }; \
+  template <typename T, int proper = target_type_id<T>::proper_type> struct func_type { typedef std::function<func_parm> type; }; \
                                                                         \
   template <> struct command_base_is_valid<func_type<target_type>::type>                { static const int value = 1; }; \
   template <> struct command_base_is_valid<func_type<core::Download*>::type>            { static const int value = 1; }; \
--- rtorrent-0.9.6-orig/src/display/window_file_list.cc	2016-04-01 20:23:17.000000000 -0700
+++ rtorrent-0.9.6/src/display/window_file_list.cc	2016-04-01 20:23:26.000000000 -0700
@@ -37,6 +37,7 @@
 #include "config.h"
 
 #include <stdio.h>
+#include <locale>
 #include <torrent/path.h>
 #include <torrent/data/file.h>
 #include <torrent/data/file_list.h>
--- rtorrent-0.9.6-orig/src/signal_handler.cc	2016-04-01 20:25:00.000000000 -0700
+++ rtorrent-0.9.6/src/signal_handler.cc	2016-04-01 20:25:18.000000000 -0700
@@ -37,6 +37,7 @@
 #include "config.h"
 
 #include <signal.h>
+#include <string>
 #include <stdexcept>
 #include "rak/error_number.h"
 #include "signal_handler.h"
--- rtorrent-0.9.6-orig/src/core/manager.cc	2016-04-02 00:45:31.000000000 -0700
+++ rtorrent-0.9.6/src/core/manager.cc	2016-04-02 00:46:12.000000000 -0700
@@ -74,6 +74,11 @@
 
 namespace core {
 
+const int Manager::create_start;
+const int Manager::create_tied;
+const int Manager::create_quiet;
+const int Manager::create_raw_data;
+
 void
 Manager::push_log(const char* msg) {
   m_log_important->lock_and_push_log(msg, strlen(msg), 0);
--- rtorrent-0.9.6-orig/src/rpc/exec_file.cc	2016-04-02 00:49:19.000000000 -0700
+++ rtorrent-0.9.6/src/rpc/exec_file.cc	2016-04-02 00:50:30.000000000 -0700
@@ -52,6 +52,13 @@
 
 // Close m_logFd.
 
+const unsigned int ExecFile::max_args;
+const unsigned int ExecFile::buffer_size;
+const int ExecFile::flag_expand_tilde;
+const int ExecFile::flag_throw;
+const int ExecFile::flag_capture;
+const int ExecFile::flag_background;
+
 int
 ExecFile::execute(const char* file, char* const* argv, int flags) {
   // Write the execued command and its parameters to the log fd.
--- rtorrent-0.9.6-orig/src/rpc/object_storage.cc	2016-04-02 00:52:41.000000000 -0700
+++ rtorrent-0.9.6/src/rpc/object_storage.cc	2016-04-02 00:53:51.000000000 -0700
@@ -44,6 +44,20 @@
 
 namespace rpc {
 
+const unsigned int object_storage::flag_generic_type;
+const unsigned int object_storage::flag_bool_type;
+const unsigned int object_storage::flag_value_type;
+const unsigned int object_storage::flag_string_type;
+const unsigned int object_storage::flag_list_type;
+const unsigned int object_storage::flag_function_type;
+const unsigned int object_storage::flag_multi_type;
+const unsigned int object_storage::mask_type;
+const unsigned int object_storage::flag_constant;
+const unsigned int object_storage::flag_static;
+const unsigned int object_storage::flag_private;
+const unsigned int object_storage::flag_rlookup;
+const size_t object_storage::key_size;
+
 object_storage::local_iterator
 object_storage::find_local(const torrent::raw_string& key) {
   std::size_t n = hash_fixed_key_type::hash(key.data(), key.size()) % bucket_count();
