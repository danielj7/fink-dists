diff -ruN qgis-2.16.0-orig/CMakeLists.txt qgis-2.16.0/CMakeLists.txt
--- qgis-2.16.0-orig/CMakeLists.txt	2016-07-11 03:11:23.000000000 +0900
+++ qgis-2.16.0/CMakeLists.txt	2016-07-11 03:32:03.000000000 +0900
@@ -582,9 +582,9 @@
     # need to find non-system frameworks
     # cmake bug #0007250 - CMAKE_SHARED_LINKER_FLAGS ignored when creating
     # a framework, so these need to be manually handled with LINK_FLAGS options
-    SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -F/Library/Frameworks")
-    SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -F/Library/Frameworks")
-    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -F/Library/Frameworks")
+    # SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -F/Library/Frameworks")
+    # SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -F/Library/Frameworks")
+    # SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -F/Library/Frameworks")
 
   ELSE (APPLE)
     # UNIX
diff -ruN qgis-2.16.0-orig/cmake/FindOSGEARTH.cmake qgis-2.16.0/cmake/FindOSGEARTH.cmake
--- qgis-2.16.0-orig/cmake/FindOSGEARTH.cmake	2016-07-11 03:11:23.000000000 +0900
+++ qgis-2.16.0/cmake/FindOSGEARTH.cmake	2016-07-11 03:34:00.000000000 +0900
@@ -10,7 +10,7 @@
 # directory, and source directory, respectively
 # OSGEARTHDIR or OSGEARTH_SOURCE_DIR: osg source directory, typically OpenSceneGraph
 # OSGEARTH_DIR or OSGEARTH_BUILD_DIR: osg build directory, place in which you've
-#    built osg via cmake 
+#    built osg via cmake
 
 # Header files are presumed to be included like
 # #include <osgEarth/Common>
@@ -27,15 +27,7 @@
         $ENV{OSGEARTHDIR}
         $ENV{OSGEARTH_DIR}
         $ENV{OSGEO4W_ROOT}
-        /usr/local/
-        /usr/
-        /sw/ # Fink
-        /opt/local/ # DarwinPorts
-        /opt/csw/ # Blastwave
-        /opt/
-        [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session\ Manager\\Environment;OSGEARTH_ROOT]/
-        ~/Library/Frameworks
-        /Library/Frameworks
+        @PREFIX@/ # Fink
     PATH_SUFFIXES
         /include/
 )
@@ -111,7 +103,7 @@
     SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${OSGEARTHUTIL_LIBRARY})
     IF(APPLE)
         # no extra LDFLAGS used in link test, may fail in OS X SDK
-        SET(CMAKE_REQUIRED_LIBRARIES "-F/Library/Frameworks" ${CMAKE_REQUIRED_LIBRARIES})
+        # SET(CMAKE_REQUIRED_LIBRARIES "-F/Library/Frameworks" ${CMAKE_REQUIRED_LIBRARIES})
     ENDIF(APPLE)
     CHECK_CXX_SOURCE_COMPILES("
 #include <osgEarthUtil/Controls>
diff -ruN qgis-2.16.0-orig/cmake/FindQScintilla.cmake qgis-2.16.0/cmake/FindQScintilla.cmake
--- qgis-2.16.0-orig/cmake/FindQScintilla.cmake	2016-07-11 03:11:23.000000000 +0900
+++ qgis-2.16.0/cmake/FindQScintilla.cmake	2016-07-11 03:34:55.000000000 +0900
@@ -25,7 +25,7 @@
 ELSE(EXISTS QSCINTILLA_VERSION_STR)
 
   FIND_PATH(QSCINTILLA_INCLUDE_DIR
-    NAMES Qsci/qsciglobal.h
+    NAMES qsciglobal.h
     PATHS
       ${Qt5Core_INCLUDE_DIRS}
       "${QT_INCLUDE_DIR}"
@@ -62,7 +62,7 @@
   IF(QSCINTILLA_INCLUDE_DIR AND NOT EXISTS QSCINTILLA_VERSION_STR)
     # get QScintilla2 version from header, is optinally retrieved via bindings
     # with Qsci PyQt4 module
-    FILE(READ ${QSCINTILLA_INCLUDE_DIR}/Qsci/qsciglobal.h qsci_header)
+    FILE(READ ${QSCINTILLA_INCLUDE_DIR}/qsciglobal.h qsci_header)
     STRING(REGEX REPLACE "^.*QSCINTILLA_VERSION_STR +\"([^\"]+)\".*$" "\\1" QSCINTILLA_VERSION_STR "${qsci_header}")
   ENDIF(QSCINTILLA_INCLUDE_DIR AND NOT EXISTS QSCINTILLA_VERSION_STR)
 
diff -ruN qgis-2.16.0-orig/images/icons/mac/browser/CMakeLists.txt qgis-2.16.0/images/icons/mac/browser/CMakeLists.txt
--- qgis-2.16.0-orig/images/icons/mac/browser/CMakeLists.txt	2016-07-11 03:11:27.000000000 +0900
+++ qgis-2.16.0/images/icons/mac/browser/CMakeLists.txt	2016-07-11 03:38:25.000000000 +0900
@@ -6,4 +6,4 @@
 # create alias now, so alias file gets correct icon, delete first if any exist
 SET (BROWSERNAME "QGIS Browser")
 INSTALL (CODE "EXECUTE_PROCESS(COMMAND /usr/bin/find \"$ENV{DESTDIR}${QGIS_INSTALL_PREFIX}\" -name \"${BROWSERNAME}*\" -maxdepth 1 -type f -delete)")
-INSTALL (CODE "EXECUTE_PROCESS(COMMAND /usr/bin/osascript -e \"tell application \\\"Finder\\\" to make alias file to POSIX file \\\"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${QGIS_BIN_DIR}/${BROWSERNAME}.app\\\" at POSIX file \\\"$ENV{DESTDIR}${QGIS_INSTALL_PREFIX}/\\\"\")")
+#INSTALL (CODE "EXECUTE_PROCESS(COMMAND /usr/bin/osascript -e \"tell application \\\"Finder\\\" to make alias file to POSIX file \\\"$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${QGIS_BIN_DIR}/${BROWSERNAME}.app\\\" at POSIX file \\\"$ENV{DESTDIR}${QGIS_INSTALL_PREFIX}/\\\"\")")
diff -ruN qgis-2.16.0-orig/python/plugins/processing/algs/grass/GrassUtils.py qgis-2.16.0/python/plugins/processing/algs/grass/GrassUtils.py
--- qgis-2.16.0-orig/python/plugins/processing/algs/grass/GrassUtils.py	2016-07-11 03:11:32.000000000 +0900
+++ qgis-2.16.0/python/plugins/processing/algs/grass/GrassUtils.py	2016-07-11 03:41:21.000000000 +0900
@@ -251,25 +251,17 @@
     def prepareGrassExecution(commands):
         env = os.environ.copy()
 
-        if isWindows():
-            GrassUtils.createGrassScript(commands)
-            command = ['cmd.exe', '/C ', GrassUtils.grassScriptFilename()]
-        else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc'
-            env['GISRC'] = gisrc
-            env['GRASS_MESSAGE_FORMAT'] = 'gui'
-            env['GRASS_BATCH_JOB'] = GrassUtils.grassBatchJobFilename()
-            if 'GISBASE' in env:
-                del env['GISBASE']
-            GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
-            os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac():
-                command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
+        gisrc = userFolder() + os.sep + 'processing.gisrc'
+        env['GISRC'] = gisrc
+        env['GRASS_MESSAGE_FORMAT'] = 'gui'
+        env['GRASS_BATCH_JOB'] = GrassUtils.grassBatchJobFilename()
+        if 'GISBASE' in env:
+            del env['GISBASE']
+        GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
+        os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
+                  | stat.S_IREAD | stat.S_IWRITE)
+        command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
                     + GrassUtils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass64 ' + GrassUtils.grassMapsetFolder() \
-                    + '/PERMANENT'
 
         return command, env
 
diff -ruN qgis-2.16.0-orig/python/plugins/processing/algs/grass7/Grass7Utils.py qgis-2.16.0/python/plugins/processing/algs/grass7/Grass7Utils.py
--- qgis-2.16.0-orig/python/plugins/processing/algs/grass7/Grass7Utils.py	2016-07-11 03:11:33.000000000 +0900
+++ qgis-2.16.0/python/plugins/processing/algs/grass7/Grass7Utils.py	2016-07-11 03:45:06.000000000 +0900
@@ -230,25 +230,17 @@
     def prepareGrass7Execution(commands):
         env = os.environ.copy()
 
-        if isWindows():
-            Grass7Utils.createGrass7Script(commands)
-            command = ['cmd.exe', '/C ', Grass7Utils.grassScriptFilename()]
-        else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc7'
-            env['GISRC'] = gisrc
-            env['GRASS_MESSAGE_FORMAT'] = 'plain'
-            env['GRASS_BATCH_JOB'] = Grass7Utils.grassBatchJobFilename()
-            if 'GISBASE' in env:
-                del env['GISBASE']
-            Grass7Utils.createGrass7BatchJobFileFromGrass7Commands(commands)
-            os.chmod(Grass7Utils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac() and os.path.exists(Grass7Utils.grassPath() + os.sep + '*grass.sh*'):
-                command = Grass7Utils.grassPath() + os.sep + '*grass.sh* ' \
-                    + Grass7Utils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass70 ' + Grass7Utils.grassMapsetFolder() \
-                    + '/PERMANENT'
+        gisrc = userFolder() + os.sep + 'processing.gisrc7'
+        env['GISRC'] = gisrc
+        env['GRASS_MESSAGE_FORMAT'] = 'plain'
+        env['GRASS_BATCH_JOB'] = Grass7Utils.grassBatchJobFilename()
+        if 'GISBASE' in env:
+            del env['GISBASE']
+        Grass7Utils.createGrass7BatchJobFileFromGrass7Commands(commands)
+        os.chmod(Grass7Utils.grassBatchJobFilename(), stat.S_IEXEC
+                 | stat.S_IREAD | stat.S_IWRITE)
+        command = Grass7Utils.grassPath() + os.sep + 'grass.sh ' \
+            + Grass7Utils.grassMapsetFolder() + '/PERMANENT'
 
         return command, env
 
