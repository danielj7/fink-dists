Info2: <<
Package: datetime-format-mail-pm%type_pkg[perl]
Version: 0.3001
Revision: 2
Architecture: (%type_pkg[perl] = 581) powerpc, (%type_pkg[perl] = 584) powerpc
Distribution: (%type_pkg[perl] = 581) 10.4, (%type_pkg[perl] = 584) 10.4, (%type_pkg[perl] = 586) 10.4, (%type_pkg[perl] = 586) 10.5, (%type_pkg[perl] = 5100) 10.5, (%type_pkg[perl] = 5100) 10.6, (%type_pkg[perl] = 5123) 10.7, (%type_pkg[perl] = 588) 10.4, (%type_pkg[perl] = 588) 10.5, (%type_pkg[perl] = 588) 10.6
Description: Convert between DateTime and RFC2822/822
Type: perl(5.8.1 5.8.4 5.8.6 5.8.8 5.10.0 5.12.3)
License: Artistic
Maintainer: Benjamin Reed <datetime-format-mail-pm@fink.raccoonfink.com>

Depends: <<
	fink (>= 0.29.7-1),
	perl%type_pkg[perl]-core,
	datetime-pm%type_pkg[perl] (>= 0.55-1),
	params-validate-pm%type_pkg[perl] (>= 0.67-1),
	test-simple-pm%type_pkg[perl]
<<
BuildDepends: <<
	perl%type_pkg[perl]-core,
	fink (>= 0.30.2-1),
	module-build-pm%type_pkg[perl],
	datetime-pm%type_pkg[perl] (>= 0.55-1),
	params-validate-pm%type_pkg[perl] (>= 0.67-1),
	test-simple-pm%type_pkg[perl]
<<

Source: mirror:cpan:modules/by-module/DateTime/DateTime-Format-Mail-%v.tar.gz
Source-MD5: 15e36249e866463bd0237262a8e43b16

UseMaxBuildJobs: true
DefaultScript: ModuleBuild

InstallScript: <<
	%{default_script}
	mv %i/share/man %i/lib/perl5/%type_raw[perl]
	find %d -name .packlist -exec rm -rf {} \;
<<
DocFiles: AUTHORS COPYING CREDITS Changes META.yml README

Homepage: http://search.cpan.org/dist/DateTime-Format-Mail
DescDetail: <<
RFCs 2822 and 822 specify date formats to be used by email.  This module
parses and emits such dates.

RFC2822 (April 2001) introduces a slightly different format of date than that
used by RFC822 (August 1982).  The main correction is that the preferred
format is more limited, and thus easier to parse programmatically.

Despite the ease of generating and parsing perfectly valid RFC822 and RFC2822
people still get it wrong. So this module provides four things for those
handling mail dates:

* A strict parser that will only accept RFC2822 dates, so you can see where
  you're right.
* A strict formatter, so you can generate the right stuff to begin with.
* A loose parser, so you can take the misbegotten output from other programs
  and turn it into something useful. This includes various minor errors as
  well as some somewhat more bizarre mistakes.  Those regarded as invalid are
  just a bit too strange to allow.
* Interoperation with the rest of the DateTime suite.  These are a collection
  of modules to handle dates in a modern and accurate fashion.  In particular,
  they make it trivial to parse, manipulate and then format dates.  Shifting
  timezones is a doddle, and converting between formats is a cinch.
<<
<<

