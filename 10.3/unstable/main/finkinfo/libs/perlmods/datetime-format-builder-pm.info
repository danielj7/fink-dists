Info2: <<
Package: datetime-format-builder-pm%type_pkg[perl]
Version: 0.7807
Revision: 11
Description: Create DateTime parser classes and objects
Type: perl(5.6.0 5.8.0 5.8.1 5.8.4 5.8.6)
License: Artistic
Maintainer: Benjamin Reed <datetime-format-builder-pm@fink.racoonfink.com>

Depends: <<
	class-factory-util-pm (>= 1.6-1),
	datetime-pm%type_pkg[perl] (>= 0.12-1),
	datetime-format-strptime-pm%type_pkg[perl] (>= 1.04-1),
	fink (>= 0.26.0-1),
	params-validate-pm%type_pkg[perl] (>= 0.72-1),
	perl%type_pkg[perl]-core
<<
BuildDepends: <<
	class-factory-util-pm (>= 1.6-1),
	datetime-pm%type_pkg[perl] (>= 0.12-1),
	datetime-format-strptime-pm%type_pkg[perl] (>= 1.04-1),
	fink (>= 0.26.0-1),
	module-build-pm%type_pkg[perl],
	params-validate-pm%type_pkg[perl] (>= 0.72-1),
	perl%type_pkg[perl]-core
<<

Source: mirror:cpan:authors/id/D/DR/DROLSKY/DateTime-Format-Builder-%v.tar.gz
Source-MD5: 4f6ee670cab944db0492e70ca8df3be3

CompileScript: <<
#!/bin/sh -ex
	exec 2>&1
	perlversion=%type_raw[perl]
	eval "`perl$perlversion -V:archname`"
	perl$perlversion Build.PL \
		--install_path arch=%i/lib/perl5/$perlversion/$archname \
		--install_path bin=%i/bin \
		--install_path bindoc=%i/lib/perl5/$perlversion/man/man1 \
		--install_path lib=%i/lib/perl5/$perlversion \
		--install_path libdoc=%i/lib/perl5/$perlversion/man/man3 \
		--install_path script=%i/bin
	./Build
	./Build test
<<

UpdatePOD: true
InstallScript: <<
	./Build install
	find %d -name .packlist -exec rm -rf {} \;
	install -d -m 755 %i/share/doc/%N
	mv examples %i/share/doc/%N/
<<
DocFiles: AUTHORS Artistic COPYING CREDITS Changes INSTALL LICENCE MANIFEST README SIGNATURE

Homepage: http://search.cpan.org/dist/DateTime-Format-Builder
DescDetail: <<
DateTime::Format::Builder creates DateTime parsers.  Many string
formats of dates and times are simple and just require a basic
regular expression to extract the relevant information.  Builder
provides a simple way to do this without writing reams of
structural code.

Builder provides a number of methods, most of which you'll never
need, or at least rarely need.  They're provided more for
exposing of the module's innards to any subclasses, or for when
you need to do something slightly beyond what I expected.
<<
<<

