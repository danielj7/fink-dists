Info2: <<
Package: smart-comments-pm
Version: 1.0.3
Revision: 1
Description: Comments that do more than just sit there
License: Artistic
Maintainer: Steve Huff <hakamadare@users.sourceforge.net>
Type: perl
Source: mirror:cpan:authors/id/D/DC/DCONWAY/Smart-Comments-v%v.tar.gz
Source-MD5: 899c141a4f0d624d7daaac71b6a428fd
SourceDirectory: Smart-Comments-v%v
UpdatePOD: true
DocFiles: README Changes
BuildDepends: fink (>= 0.24.12)
BuildDependsOnly: false
InfoTest: <<
 TestScript: make test || exit 2
 TestDepends: test-pod-pm
<<
Depends: perl588-core
Provides: smart-comments-pm
DescDetail: <<
 Smart comments provide an easy way to insert debugging and tracking code into
 a program. They can report the value of a variable, track the progress of a
 loop, and verify that particular assertions are true.

 Best of all, when you're finished debugging, you don't have to remove them.
 Simply commenting out the use Smart::Comments line turns them back into
 regular comments. Leaving smart comments in your code is smart because if you
 needed them once, you'll almost certainly need them again later.  
<<
DescUsage: <<
 The module is loaded like any other:

    use Smart::Comments;

 When loaded it filters the remaining code up to the next:

    no Smart::Comments;

 directive, replacing any smart comments with smart code that implements the
 comments behaviour.

 If you're debugging an application you can also invoke it with the module from
 the command-line:

    perl -MSmart::Comments $application.pl

 Of course, this only enables smart comments in the application file itself,
 not in any modules that the application loads.

 You can also specify particular levels of smartness, by including one or more
 markers as arguments to the use:

    use Smart::Comments '###', '####';

 These arguments tell the module to filter only those comments that start with
 the same number of #'s. So the above use statement would "activate" any smart
 comments of the form:

    ###   Smart...

    ####  Smarter...

 but not those of the form:

    ##### Smartest...

 This facility is useful for differentiating progress bars (see "Progress
 Bars"), which should always be active, from debugging comments (see "Debugging
 via Comments"), which should not:

    #### Debugging here...

    for (@values) {         ### Progress: 0...  100
        do_stuff();
    }

 Note that, for simplicity, all smart comments described below will be written
 with three #'s; in all such cases, any number of #'s greater than three could
 be used instead.

 For more detailed documentation, `perldoc Smart::Comments`.
<<
Homepage: http://search.cpan.org/dist/Smart-Comments/
<<
