Package: smlnj
Version: 110.53
Revision: 1
Description: Standard ML compiler, tools, & libraries
Maintainer: Likai Liu <liulk@cs.bu.edu>
Homepage: http://www.smlnj.org/
License: BSD
Provides: smlnj-burg, smlnj-ckit, smlnj-cml, smlnj-runtime
Conflicts: smlnj-burg, smlnj-ckit, smlnj-cml, smlnj-runtime
Replaces: smlnj-burg, smlnj-ckit, smlnj-cml, smlnj-runtime
Suggests: sml-mode
CustomMirror: <<
 Primary: http://smlnj.cs.uchicago.edu/dist/working/
<<
SourceDirectory: config
Source: mirror:custom:%v/config.tgz
Source-MD5: bae475ec6e449b2e398b48515ed275b8
SourceRename: %n-%v-config.tgz
Source2: mirror:custom:%v/boot.ppc-unix.tgz
Source2-MD5: 6934a77b3d31c2ba6f49e7279c89f273
Source2Rename: %n-%v-boot.ppc-unix.tgz
Source3: mirror:custom:%v/runtime.tgz
Source3-MD5: b1bf4dfbd779750fff5deaa58f261dc1
Source3Rename: %n-%v-runtime.tgz
Source4: mirror:custom:%v/ml-yacc.tgz
Source4-MD5: efd735dd0994dae69f7e34bcc1675633
Source4Rename: %n-%v-ml-yacc.tgz
Source5: mirror:custom:%v/ml-lex.tgz
Source5-MD5: c9d75150ca36ac9b028013bba0a2d7d2
Source5Rename: %n-%v-ml-lex.tgz
Source6: mirror:custom:%v/ml-burg.tgz
Source6-MD5: 9568ab57d8933b8a40f532cf7fb8d6df
Source6Rename: %n-%v-ml-burg.tgz
Source7: mirror:custom:%v/smlnj-lib.tgz
Source7-MD5: b2c4e3b180af49b30e3190e26948247b
Source7Rename: %n-%v-smlnj-lib.tgz
Source8: mirror:custom:%v/cm.tgz
Source8-MD5: ab1b035b8e83864c8d5a671f5d739b12
Source8Rename: %n-%v-cm.tgz
Source9: mirror:custom:%v/cml.tgz
Source9-MD5: 659e15d344ef307e19aa27ec209c8f0b
Source9Rename: %n-%v-cml.tgz
Source10: mirror:custom:%v/eXene.tgz
Source10-MD5: 7e0c258cfcc240fcdafbd2191d55c93a
Source10Rename: %n-%v-eXene.tgz
Source11: mirror:custom:%v/ckit.tgz
Source11-MD5: 631772d441bff78254c39e396f9f5501
Source11Rename: %n-%v-ckit.tgz
Source12: mirror:custom:%v/MLRISC.tgz
Source12-MD5: f7ea57e954c1a8d1ad8a1a57bba64bb7
Source12Rename: %n-%v-MLRISC.tgz
Source13: mirror:custom:%v/ml-nlffi-lib.tgz
Source13-MD5: bbf7394d7bd50cd413c3e3e860a2aa9f
Source13Rename: %n-%v-ml-nlffi-lib.tgz
Source14: mirror:custom:%v/ml-nlffigen.tgz
Source14-MD5: 5a811d439656d84edca29c2978b12753
Source14Rename: %n-%v-ml-nlffigen.tgz
DocFiles: LICENSE
PatchScript: <<
#!/bin/sh

echo Setting up build directory ...

# setting up a plain text version of LICENSE
cat <<EOF > LICENSE
STANDARD ML OF NEW JERSEY COPYRIGHT NOTICE, LICENSE AND DISCLAIMER.
http://www.smlnj.org/license.html

Copyright (c) 1989-1998 by Lucent Technologies

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both the copyright notice and this permission
notice and warranty disclaimer appear in supporting documentation,
and that the name of Lucent Technologies, Bell Labs or any Lucent
entity not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.

Lucent disclaims all warranties with regard to this software,
including all implied warranties of merchantability and fitness. In
no event shall Lucent be liable for any special, indirect or
consequential damages or any damages whatsoever resulting from loss
of use, data or profits, whether in an action of contract,
negligence or other tortious action, arising out of or in
connection with the use or performance of this software. 

EOF

# move the directories already unpacked by fink to where smlnj installer
# expects them. we're in build directory specified by SourceDirectory right
# now (%b).

# WARNING: double check with "%b/config/unpack" for where each directory goes.
# The following are the ones that happen to rest in $SRCDIR by coincidence.
dirs="runtime compiler cm system ml-yacc ml-lex ml-burg ml-nlffigen MLRISC smlnj-lib cml eXene ml-nlffi-lib"

mkdir ../src

for d in $dirs; do
	[ -d "../$d" ] && mv ../$d ../src/$d
done

targets="ml-yacc ml-lex ml-burg smlnj-lib cml cml-lib eXene mlrisc ckit mlrisc-tools ml-nlffigen ml-nlffi-lib"

echo Selecting targets: $targets

# enable the packages we need. leave already enabled ones enabled.
for t in $targets; do
	perl -pi.bak -e "s,#request $t,request $t," targets
done
<<
CompileScript: (cd .. && config/install.sh)
InstallScript: <<
#!/bin/sh
# heap and run go to %i/lib/smlnj/bin, library goes to %i/lib/smlnj/lib

echo Making directories: %i/bin %i/lib/smlnj
mkdir -p %i/bin
mkdir -p %i/lib/smlnj

echo Install heaps and executable images ...
mv ../bin %i/lib/smlnj/bin

echo Install smlnj-script in %i/bin ...

# architecture suffix and alloc size only needs to be determined once
ARCH_N_OPSYS=`%i/lib/smlnj/bin/.arch-n-opsys`
if [ "$?" != "0" ]; then
  echo "unable to determine architecture/operating system"
  exit 1
fi
eval $ARCH_N_OPSYS

cat <<EOF > %i/bin/smlnj-script
#!/bin/sh
export SMLNJ_HOME=%p/lib/smlnj
export CM_PATHCONFIG=\$SMLNJ_HOME/lib/pathconfig
HEAPDIR=\$SMLNJ_HOME/bin/.heap
RUNDIR=\$SMLNJ_HOME/bin/.run

ALLOC=512k
APP=\`basename -- \$0\`
case \$APP in
    smlnj-script)
        echo "Please do not run \"smlnj-script\" directly."
        echo "It should be symlinked to an application name."
        exit 1
        ;;
esac

RUN="\$RUNDIR/run.$ARCH-$OPSYS"
exec \$RUN @SMLcmdname=\$0 @SMLload=\$HEAPDIR/\$APP @SMLalloc=\$ALLOC "\$@"
EOF

chmod 0755 %i/bin/smlnj-script

apps="ml-burg ml-lex ml-yacc ml-nlffigen sml"

echo Install symlinks for the executables: $apps

cd %i/bin
for run in $apps; do
	ln -sf smlnj-script $run
done

## smlnj 110.53 seems to have fixed this.
#echo Fix absolute symlinks in \$SMLNJ_HOME/bin ...
#
#cd %i/lib/smlnj/bin
#for run in $apps; do
#	rm $run; ln -sf ./.run-sml $run
#done

echo Install smlnj libraries ...
cd %b
mv ../lib %i/lib/smlnj/lib
<<
DescDetail: <<
SML/NJ is an implementation of the Standard ML programming language,
produced and maintained by researchers at Bell Labs, Princeton, Yale,
and AT&T Research.  Standard ML has many features, including type
safety, algebraic data types with pattern matching, higher-order
functions, and a sophisticated module system. It is especially
well-suited for writing compilers and other language processors.

This package includes the interactive compiler (sml), the compilation
manager (CM), compiler generation tools (ml-lex, ml-yacc), the Basis
library, and the SML/NJ library.

Install this package if you want to program in SML.
<<
DescPackaging: <<
Based on Christopher League's smlnj*.info package info.

Command line programs are placed under %p/bin, symlinked to smlnj-script, a
launcher based on Christopher League's packaging. The launcher executes smlnj
runtime with a given application's heap image. You can also find command line
programs in %p/lib/smlnj/bin, where the symlinks are made to a launcher script
generated by the smlnj installer. These symlinks are provided so Compilation
Manager can find them. They're not used directly by the user. The heap images
and runtime are placed in %p/lib/smlnj/bin/{.heap|.run} respectively. Heap
images and runtime executables are placed with the usual ARCH-OS extension.

SML/NJ libraries are placed in %p/lib/smlnj/lib, so "pathconfig" should be
updated when new libraries are installed.

eXene does not depend on X11R6 development files to compile or run. It is
completely implemented in SML.

When the source package builds, PatchScript moves the sub-packages that are
already unpacked by Fink to where SML/NJ installer can find them. However, the
locations are arbitrary. Package maintainer needs to double check with
%b/config/unpack to find out where exactly each package goes.

TODO: maybe someday do a spilt package?
<<

