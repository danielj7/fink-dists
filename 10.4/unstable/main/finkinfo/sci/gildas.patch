diff --exclude='*~' -ruN gildas-src-feb10a/admin/Makefile gildas-src-feb10a.patched/admin/Makefile
--- gildas-src-feb10a/admin/Makefile	2007-12-12 11:23:47.000000000 +0100
+++ gildas-src-feb10a.patched/admin/Makefile	2010-02-15 16:04:39.000000000 +0100
@@ -33,31 +33,31 @@
 integ: integ-message
 
 integ-message:
-	@(echo)
-	@(echo "Compilation succeeded! Bye.")
-	@(echo)
+#	@(echo)
+#	@(echo "Compilation succeeded! Bye.")
+#	@(echo)
 
 default-install: install-message
 
 install-message:
-	@(echo)
-	@(echo "***************************************************************************")
-	@(echo "Installation succeeded!")
-	@(echo)
-	@(echo "bash users: You should add in your ~/.bash_profile the following lines")
-	@(echo "    export GAG_ROOT_DIR=$(gagexedir)")
-	@(echo "    export GAG_EXEC_SYSTEM=$(GAG_EXEC_SYSTEM)")
-	@(echo '    source $$GAG_ROOT_DIR/etc/bash_profile')
-	@(echo)
-	@(echo "csh users:  You should add in your ~/.login the following lines")
-	@(echo "    setenv GAG_ROOT_DIR $(gagexedir)")
-	@(echo "    setenv GAG_EXEC_SYSTEM $(GAG_EXEC_SYSTEM)")
-	@(echo '    source $$GAG_ROOT_DIR/etc/login')
-	@(echo)
-	@(echo "You should then exit this xterm and open a new one to reset your path.")
-	@(echo "GILDAS should be ready for use (e.g. type greg @ gag_demo:demo).")
-	@(echo "Bye.")
-	@(echo "***************************************************************************")
-	@(echo)
+#	@(echo)
+#	@(echo "***************************************************************************")
+#	@(echo "Installation succeeded!")
+#	@(echo)
+#	@(echo "bash users: You should add in your ~/.bash_profile the following lines")
+#	@(echo "    export GAG_ROOT_DIR=$(gagexedir)")
+#	@(echo "    export GAG_EXEC_SYSTEM=$(GAG_EXEC_SYSTEM)")
+#	@(echo '    source $$GAG_ROOT_DIR/etc/bash_profile')
+#	@(echo)
+#	@(echo "csh users:  You should add in your ~/.login the following lines")
+#	@(echo "    setenv GAG_ROOT_DIR $(gagexedir)")
+#	@(echo "    setenv GAG_EXEC_SYSTEM $(GAG_EXEC_SYSTEM)")
+#	@(echo '    source $$GAG_ROOT_DIR/etc/login')
+#	@(echo)
+#	@(echo "You should then exit this xterm and open a new one to reset your path.")
+#	@(echo "GILDAS should be ready for use (e.g. type greg @ gag_demo:demo).")
+#	@(echo "Bye.")
+#	@(echo "***************************************************************************")
+#	@(echo)
 
 ###########################################################################
diff --exclude='*~' -ruN gildas-src-feb10a/admin/Makefile.build gildas-src-feb10a.patched/admin/Makefile.build
--- gildas-src-feb10a/admin/Makefile.build	2009-11-27 10:05:06.000000000 +0100
+++ gildas-src-feb10a.patched/admin/Makefile.build	2010-02-15 16:04:39.000000000 +0100
@@ -313,6 +313,10 @@
 
 -lm:
 
+-lLAPACK:
+
+-lBLAS:
+
 # Required by ASDM libs:
 -lstdc++:
 
diff --exclude='*~' -ruN gildas-src-feb10a/admin/Makefile.build.orig gildas-src-feb10a.patched/admin/Makefile.build.orig
--- gildas-src-feb10a/admin/Makefile.build.orig	1970-01-01 01:00:00.000000000 +0100
+++ gildas-src-feb10a.patched/admin/Makefile.build.orig	2009-11-27 10:05:06.000000000 +0100
@@ -0,0 +1,319 @@
+###########################################################################
+#
+# Makefile system for GILDAS softwares (J.Pety 2003-2007).
+#
+# Please be careful: element order often matters in makefiles.
+#
+###########################################################################
+#
+# Target and implicit rules definitions
+# They are customized in specialized makefiles
+#
+###########################################################################
+# Variables
+
+ALL_CPPFLAGS = $(GLOBAL_CPPFLAGS) $(LOCAL_CPPFLAGS) $(OPTION_CPPFLAGS) $(CPPFLAGS)
+ALL_SLDFLAGS = $(GLOBAL_SLDFLAGS) $(LOCAL_SLDFLAGS) $(OPTION_SLDFLAGS) $(SLDFLAGS)
+ALL_FLDFLAGS = $(GLOBAL_FLDFLAGS) $(LOCAL_FLDFLAGS) $(OPTION_FLDFLAGS) $(FLDFLAGS)
+ALL_CLDFLAGS = $(GLOBAL_CLDFLAGS) $(LOCAL_CLDFLAGS) $(OPTION_CLDFLAGS) $(CLDFLAGS)
+ALL_CFLAGS = $(LOCAL_CFLAGS) $(OPTION_CFLAGS) $(CFLAGS) $(GLOBAL_CFLAGS)
+ALL_FFLAGS = $(LOCAL_FFLAGS) $(OPTION_FFLAGS) $(FFLAGS) $(GLOBAL_FFLAGS)
+
+INTEG_TARGETS = $(TARGETS)
+INSTALL_TARGETS = $(patsubst $(gagintdir)%,$(gagexedir)%,$(TARGETS))
+
+###########################################################################
+# First, recursive targets
+
+# Standards
+.PHONY: default integ check install uninstall clean distclean
+
+default: integ
+
+integ: builddirs integdirs $(INTEG_TARGETS)
+
+check:
+
+default-install: integ installdirs $(INSTALL_TARGETS)
+
+uninstall: 
+	$(RM) $(INSTALL_TARGETS)
+
+clean:
+	$(RM) $(DIRTY) $(GLOBAL_DIRTY)
+	-$(RMDIR) $(buildrootdir)
+
+distclean: clean
+	$(RM) $(ALMOST_DIRTY) $(GLOBAL_ALMOST_DIRTY)
+
+integ-clean: 
+	$(RM) $(buildrootdir)
+
+# Tasks
+.PHONY: task-list
+
+task-list:
+
+# Doc targets
+.PHONY: doc hlp tex dvi ps pdf html install-hlp install-ps	\
+install-pdf install-html
+
+doc: pdf
+
+hlp: $(DOC_HLP)
+
+tex: default $(DOC_TEX)
+
+dvi: default tex $(DOC_DVI)
+
+ps: default dvi $(DOC_PS)
+
+pdf: default tex $(DOC_PDF)
+
+html: default tex $(DOC_HTML)
+
+install-doc: doc installdirs install-hlp install-pdf
+
+install-hlp: hlp installdirs $(INSTALL_HLP)
+
+install-ps: ps installdirs $(INSTALL_PS)
+
+install-pdf: pdf installdirs $(INSTALL_PDF)
+
+install-html: html installdirs $(INSTALL_HTML)
+
+# Administration
+.PHONY: depend interfaces interfaces-clean format
+
+depend:
+	if [ ! -z "$(LIB_C_OBJECTS)" ]; then \
+	  ((cvs edit Makefile || exit 0) && \
+	   $(MAKEDEPEND) -Y $(LOCAL_CFLAGS) -I$(execincdir) $(patsubst %.o,%.c,$(LIB_C_OBJECTS)) 2> /dev/null && \
+	   ((echo "/DO NOT DELETE" && \
+	   echo ".,\$$s/\(.*\.o\):/$(DEPEND_SUBST):/" && \
+           echo "/DO NOT DELETE" && \
+	   echo ".,\$$s%$(execincdir)%\$$(execincdir)%g" && \
+	   echo "w" && \
+	   echo "q") | ed Makefile || true) && \
+	   $(ECHO) >> Makefile && \
+	   $(ECHO) "###########################################################################" >> Makefile) \
+	  || exit 1; \
+	fi
+
+interfaces:
+
+interfaces-clean:
+
+format:
+
+###########################################################################
+# Second, non-recursive targets
+
+# Directories
+.PHONY: builddirs integdirs installdirs
+
+builddirs: $(builddirs)
+
+integdirs: $(integdirs)
+
+installdirs: $(installdirs)
+
+$(builddirs) $(integdirs) $(installdirs):
+	$(MKDIR) $@
+
+# Misc.
+work.pcl:
+	echo work.pc > work.pcl
+	if [ -e $(execincdir)/work.pc ]; then echo $(execincdir)/work.pc >> work.pcl; fi
+
+###########################################################################
+# Third, administrative targets
+
+include $(gagadmdir)/Makefile.admin
+
+###########################################################################
+# General implicit rules
+
+# When there is an error, erase intermediate files
+.ERASE_ON_ERROR:
+.SUFFIXES:
+.SUFFIXES: .fpp .f .f90pp .f90 .inc .incpp .c .h 
+.SUFFIXES: .o .a .so .sl .dylib .exe .hlp
+ifdef GAG_USE_DEBUG
+  .PRECIOUS: $(builddir)/%.f $(builddir)/%.inc
+else
+  .PRECIOUS:
+endif
+
+# First erase annoying default implicit rules.
+%.o : %.fpp
+%.o : %.f90pp
+%.o : %.f
+%.o : %.f90
+%.o : %.mod
+%.o : %.c
+(%.o) : %.fpp
+(%.o) : %.f90pp
+(%.o) : %.mod
+
+# Preprocessing
+$(builddir)/%.inc : %.incpp
+	$(CPP) $(ALL_CPPFLAGS) $< | grep -v \#pragma > $@
+$(builddir)/%.f90 : %.f90
+	$(CPP) $(ALL_CPPFLAGS) $< | grep -v \#pragma > $@
+$(builddir)/%.f90 : %.f90pp
+	$(CPP) $(ALL_CPPFLAGS) $< | grep -v \#pragma > $@
+$(builddir)/%.f : %.f
+	$(CPP) $(ALL_CPPFLAGS) $< | grep -v \#pragma > $@
+$(builddir)/%.f : %.fpp
+	$(CPP) $(ALL_CPPFLAGS) $< | grep -v \#pragma > $@
+
+# Compilation
+ifeq ($(FC),xlf)
+  $(builddir)/%.o : $(builddir)/%.f90
+	  xlf90 -c $(ALL_FFLAGS) -qsuffix=f=f90 $< -o $@
+else
+  $(builddir)/%.o : $(builddir)/%.f90
+	  $(FC) -c $(ALL_FFLAGS) $< -o $@
+endif
+$(builddir)/%.o : $(builddir)/%.f
+	$(FC) -c $(ALL_FFLAGS) $< -o $@
+$(builddir)/%.o : %.c
+	$(CC) -c $(ALL_CFLAGS) $< -o $@
+$(builddir)/%.o : %.cpp
+	$(COMPILE.cc) $(ALL_CFLAGS) $< -o $@
+
+# Archive libraries
+(%.o) : $(builddir)/%.o
+	$(AR) cr $@ $<
+$(libdir)/%.a: $(AR_LIB_OBJECTS)
+	$(RANLIB) $@
+
+# Shared libraries
+$(libdir)/%.so: %.a
+	(cd $(builddir) && $(AR) x $(AR_NAME))
+	(cd $(builddir) && $(FC) $(ALL_SLDFLAGS) $(ALL_FLDFLAGS) $(LIB_OBJECTS) \
+	-o $@ $(FLDLIBS) $(LIB_DEPENDS) $(ADD_LIBS) $(SYS_LIBS))
+	# -Xlinker --no-undefined 
+	$(RM) $(builddir)/*.o
+$(libdir)/%.sl: 
+	ld  $(ALL_FLDFLAGS) -b -o $@ $(AR_NAME) $(FLDLIBS) \
+	    $(LIB_DEPENDS) $(ADD_LIBS) $(SYS_LIBS)
+$(libdir)/%.dll: win-$(LIB_IDENTITY).def
+	sed -r '/\t/s/;(\w+,)?$(GAG_OS_KIND)(,\w+)?;//i' win-$(LIB_IDENTITY).def > $(builddir)/win-$(LIB_IDENTITY)-und.def
+	(cd $(builddir) && $(AR) x $(AR_NAME))
+	(cd $(builddir) && $(FC) $(ALL_SLDFLAGS) -Wl,--out-implib,$@.a $(ALL_FLDFLAGS) $(LIB_OBJECTS) \
+	win-$(LIB_IDENTITY)-und.def -o $@ $(FLDLIBS) $(LIB_DEPENDS) $(ADD_LIBS) $(SYS_LIBS))
+	$(RM) $(builddir)/*.o
+
+# python links
+$(pythondir)/py%.$(SO_EXT): $(libdir)/$(SO_BASE)%.$(SO_EXT)
+	-$(RM) $@
+	ln -s ../lib/$(SO_BASE)$*.$(SO_EXT) $@
+
+# Dummy rules for modules just so that make consider the module a valid dependency
+# when first parsing the makefiles. This rule should never be applied as the modules
+# are a by-product of the compilation of the object
+$(builddir)/%.mod:
+	echo "dummy" > /dev/null
+
+# Executables
+$(bindir)/% : $(builddir)/%.o
+	$(FC) $(ALL_FLDFLAGS) $< $(OBJECTS) -o $@ \
+	      $(FLDLIBS) $(LOAD_LIBS) $(ADD_LIBS) $(SYS_LIBS)
+$(libexecdir)/% : $(builddir)/%.o
+	$(CC) $(ALL_CLDFLAGS) $< -o $@ $(CLDLIBS) \
+	$(LOAD_LIBS) $(ADD_LIBS) $(SYS_LIBS)
+
+# Copy into integration branch
+$(pythondir)/%: %
+	$(CP) $< $@
+
+$(includedir)/%: %
+	$(CP) $< $@
+
+$(execincdir)/%.inc: %.inc
+	$(CP) $< $@
+
+$(execincdir)/$(LIB_IDENTITY)/%.h: %.h
+	$(CP) $< $@
+
+$(execincdir)/%: $(builddir)/%
+	$(CP) $< $@
+
+$(prodir)/%: %
+	$(CP) $< $@
+
+$(demodir)/%: %
+	$(CP) $< $@
+
+$(datadir)/%: %
+	$(CP) $< $@
+
+$(configdir)/%: %
+	$(CP) $< $@
+
+$(configdir)/%: %.src
+	$(SEDSRC) $< > $@
+
+# Tasks
+$(taskdir)/%.exe: $(builddir)/%.o
+	$(FC) $(ALL_FLDFLAGS) $< -o $@  $(FLDLIBS) $(LOAD_LIBS) \
+	$(ADD_LIBS) $(SYS_LIBS)
+
+$(taskdir)/%.init: %.init
+	$(CP) $< $@
+
+$(taskdir)/%.check: %.check
+	$(CP) $< $@
+
+$(taskdir)/%.hlp: %.nroff
+	$(NROFF) $< > $@
+
+# Help
+$(helpdir)/%.hlp: %.nroff
+	$(NROFF) $< > $@
+
+$(pdfdir)/%.pdf: %.pdf
+	$(MV) $< $@
+
+$(dvidir)/%.dvi: %.dvi
+	$(MV) $< $@
+
+$(psdir)/%.ps: %.dvi
+	$(DVIPS) $< -o $@
+
+$(htmldir)/%-html: %.tex .latex2html-init
+	if [ ! -d "$@" ]; then \
+	$(MKDIR) $@; \
+	fi
+	$(LATEX2HTML) -dir $@ $<
+
+ifeq ($(GAG_OS_KIND),mingw)
+$(builddir)/%.o: %.rc
+	windres.exe $? `echo $@ | sed 's%/cygdrive/\(.\)%\1:%'`
+endif
+
+# Installation
+$(gagexedir)/%: $(gagintdir)/%
+	$(CP) $< $@
+
+###########################################################################
+# The following targets are there to avoid make error (target search) when 
+# only the shared libraries are installed (i.e. the corresponding archive 
+# libraries are missing).
+
+-lX11:
+
+-lXt:
+
+-lXm:
+
+-lz:
+
+-lm:
+
+# Required by ASDM libs:
+-lstdc++:
+
+###########################################################################
diff --exclude='*~' -ruN gildas-src-feb10a/admin/Makefile.def gildas-src-feb10a.patched/admin/Makefile.def
--- gildas-src-feb10a/admin/Makefile.def	2009-11-06 16:03:38.000000000 +0100
+++ gildas-src-feb10a.patched/admin/Makefile.def	2010-02-15 16:04:39.000000000 +0100
@@ -553,7 +553,7 @@
 ###########################################################################
 # Kernel libraries
 
-LEGACY_LIBS = -lslatec -llapack -lblas
+LEGACY_LIBS = -lslatec -lLAPACK -lBLAS
 GAG_LIBS = -lggui -lgcore -lgwcs -lgio -lgsys -lginc
 
 ifeq ($(GAG_USE_XML),yes)
diff --exclude='*~' -ruN gildas-src-feb10a/admin/Makefile.def.orig gildas-src-feb10a.patched/admin/Makefile.def.orig
--- gildas-src-feb10a/admin/Makefile.def.orig	1970-01-01 01:00:00.000000000 +0100
+++ gildas-src-feb10a.patched/admin/Makefile.def.orig	2009-11-06 16:03:38.000000000 +0100
@@ -0,0 +1,732 @@
+###########################################################################
+#
+# Makefile system for GILDAS softwares (J.Pety 2003-2007).
+#
+# Please be careful: element order often matters in makefiles.
+#
+###########################################################################
+#
+# Default definitions
+#
+###########################################################################
+
+SHELL = /bin/sh
+
+###########################################################################
+# Redefinition of gagadmdir from gagsrcdir for some dirty reason (JP)
+
+ifeq ($(gagusedir),)
+  gagadmdir = $(gagsrcdir)/admin
+endif
+
+###########################################################################
+# Definitions of build, integration and installation directories
+
+buildrootdir = ./built
+builddir = $(buildrootdir)/$(GAG_EXEC_SYSTEM)
+moddir = $(builddir)
+
+prefix = $(gagintdir)
+
+# First: system independant files
+configdir  = $(prefix)/etc
+includedir = $(prefix)/include
+prodir     = $(prefix)/pro
+demodir    = $(prefix)/demo
+docdir     = $(prefix)/doc
+helpdir    = $(docdir)/hlp
+htmldir    = $(docdir)/html
+pdfdir     = $(docdir)/pdf
+dvidir     = $(docdir)/dvi
+psdir      = $(docdir)/ps
+tasktexdir = $(docdir)/tasks
+
+# Second: system dependant files
+exec_prefix = $(prefix)/$(GAG_EXEC_SYSTEM)
+execincdir  = $(exec_prefix)/include
+datadir     = $(exec_prefix)/data
+bindir      = $(exec_prefix)/bin
+taskdir     = $(exec_prefix)/tasks
+libdir      = $(exec_prefix)/lib
+pythondir   = $(exec_prefix)/python
+libexecdir  = $(exec_prefix)/libexec
+ifneq ($(gagusedir),)
+    useincdir = $(gagusedir)/$(GAG_EXEC_SYSTEM)/include
+endif
+
+builddirs = $(buildrootdir) $(builddir)
+
+integdirs = $(prefix) $(includedir) $(prodir) $(demodir) $(docdir)	\
+$(helpdir) $(htmldir) $(pdfdir) $(dvidir) $(psdir) $(tasktexdir)	\
+$(exec_prefix) $(execincdir) $(datadir) $(bindir) $(taskdir) $(libdir)	\
+$(pythondir) $(libexecdir) $(configdir)
+
+installdirs = $(patsubst $(gagintdir)%,$(gagexedir)%,$(integdirs))
+
+###########################################################################
+# Default compilation flags
+
+# 
+CLDLIBS = $(GAG_LIB_FLAGS)
+FLDLIBS = $(GAG_LIB_FLAGS)
+
+# The following variables are provided to the user so that he can override
+# the preprocessing, compilation and linking options defined by default
+# later in this file. User can modify them here.
+CPPFLAGS = $(GAG_CPPFLAGS)
+SLDFLAGS = $(GAG_SLDFLAGS)
+FLDFLAGS = $(GAG_FLDFLAGS)
+CLDFLAGS = $(GAG_CLDFLAGS)
+FFLAGS = $(GAG_FFLAGS)
+CFLAGS = $(GAG_CFLAGS)
+
+# The following variables are for mandatory GLOBAL definitions.
+# They should be modified only in this file.
+GLOBAL_CPPFLAGS = 
+GLOBAL_SLDFLAGS = 
+GLOBAL_FLDFLAGS = 
+GLOBAL_CLDFLAGS = 
+GLOBAL_FFLAGS = 
+GLOBAL_CFLAGS = 
+
+# The following variables are for mandatory LOCAL definitions.
+# They should be modified only in the local Makefiles
+LOCAL_CPPFLAGS = 
+LOCAL_SLDFLAGS = 
+LOCAL_FLDFLAGS = 
+LOCAL_CLDFLAGS = 
+LOCAL_FFLAGS = 
+LOCAL_CFLAGS = 
+
+# The following variables are for optional definitions (e.g. warnings).
+# They can be modified everywhere, even though modifications should be
+# well motivated to avoid creating entropy 
+OPTION_CPPFLAGS = 
+OPTION_SLDFLAGS = 
+OPTION_FLDFLAGS = 
+OPTION_CLDFLAGS = 
+OPTION_FFLAGS =
+OPTION_CFLAGS =
+
+###########################################################################
+# Compiler/linker features
+
+# Build of 32 bits binaries under 64 bits systems (default no)
+LOCAL_FEATURES += GAG_USE_32BITS
+GAG_USE_32BITS =
+
+# Fortran compiler adds an ending underscore on routine names
+LOCAL_FEATURES += GAG_USE_UNDERSCORE
+GAG_USE_UNDERSCORE = yes
+
+# Debug mode
+LOCAL_FEATURES += GAG_USE_DEBUG
+GAG_USE_DEBUG =
+
+# Static library mode
+LOCAL_FEATURES += GAG_USE_STATICLINK
+ifeq ($(GAG_OS_KIND),linux)
+  GAG_USE_STATICLINK =
+else
+  GAG_USE_STATICLINK = yes
+endif
+
+###########################################################################
+# System features
+
+# Use posix semaphores and shared memories
+LOCAL_FEATURES += GAG_USE_POSIX
+GAG_USE_POSIX = yes
+
+# Use posix threads
+LOCAL_FEATURES += GAG_USE_THREADS
+ifeq ($(GAG_OS_KIND),linux)
+  GAG_USE_THREADS = #yes
+else
+  GAG_USE_THREADS =
+endif
+
+# Launch keyboard in a thread instead of a process
+LOCAL_FEATURES += GAG_USE_KEYBOARD_PROCESS
+GAG_USE_KEYBOARD_PROCESS =
+
+# Use python
+LOCAL_FEATURES += GAG_USE_PYTHON
+ifeq ($(PYTHON_PRESENT),yes)
+  GAG_USE_PYTHON = yes
+else
+  GAG_USE_PYTHON =
+endif
+
+###########################################################################
+# Config features
+
+# Split configs and convert to uppercase
+LOCAL_GAG_CONFIG = $(shell echo $(GAG_CONFIG)|sed 's/-/\n/g;s/\(.*\)/\U\1/g')
+LOCAL_CONFIGS = $(filter-out NO_%, $(LOCAL_GAG_CONFIG))
+LOCAL_NO_CONFIGS = $(patsubst NO_%, %, $(filter NO_%, $(LOCAL_GAG_CONFIG)))
+
+# Add features
+LOCAL_CONF_FEATURES = $(patsubst %, GAG_USE_%, $(LOCAL_CONFIGS))
+LOCAL_NO_CONF_FEATURES = $(patsubst %, GAG_USE_%, $(LOCAL_NO_CONFIGS))
+$(foreach conf, $(LOCAL_CONF_FEATURES), $(eval $(conf)=yes))
+$(foreach conf, $(LOCAL_NO_CONF_FEATURES), $(eval $(conf)=))
+LOCAL_FEATURES := $(sort $(LOCAL_FEATURES) $(LOCAL_CONF_FEATURES) $(LOCAL_NO_CONF_FEATURES))
+
+###########################################################################
+# Default command definitions
+
+NROFF = nroff -Tascii
+LATEX = latex
+DVIPS = dvips
+BIBTEX = bibtex
+MAKEINDEX = makeindex
+PDF_LATEX = pdflatex --interaction nonstopmode
+LATEX2HTML = latex2html
+
+PS2EPSI = ps2epsi
+EPS2PDF = epstopdf
+
+CP      = cp -fr
+MV      = mv -f
+RM      = rm -rf
+RMDIR   = rmdir
+MKDIR	= mkdir
+
+CVS2CL = cvs2cl.pl
+CVS2CLFLAGS = --show-dead --no-common-dir --separate-header --window 600 \
+	--branches
+
+AR = ar
+RANLIB = ranlib
+
+MAKEDEPEND = makedepend
+ECHO = echo
+
+###########################################################################
+# Other defaults
+
+LINEAR = lapack
+GLOBAL_DIRTY = $(builddir) *~ TAGS ChangeLog* Makefile.bak
+
+###########################################################################
+# Site specific Makefile
+
+-include $(gagadmdir)/Makefile.site
+
+###########################################################################
+# Fortran preprocessing
+
+# Preprocessor command
+CPP = cpp
+ifeq ($(GAG_OS_KIND),solaris)
+  CPP = /usr/ccs/lib/cpp
+endif
+ifeq ($(GAG_OS_KIND),aix)
+  CPP = /usr/ccs/lib/cpp
+endif
+
+# Preprocessor generic flags
+GLOBAL_CPPFLAGS += -P -traditional -C 
+
+# Preprocessor MACHINE dependent flags
+ifeq ($(GAG_MACHINE),i386)
+  GLOBAL_CPPFLAGS += -DIEEE="ieee"
+endif
+ifeq ($(GAG_MACHINE),pc)
+  GLOBAL_CPPFLAGS += -DIEEE="ieee"
+endif
+ifeq ($(GAG_MACHINE),x86_64)
+  GLOBAL_CPPFLAGS += -DIEEE="ieee"
+  ifneq ($(GAG_USE_32BITS),yes)
+    # Compilation in 64 bits mode
+    GLOBAL_CPPFLAGS += -DBITS64="bits64"
+  endif
+endif
+ifeq ($(GAG_MACHINE),alpha)
+  GLOBAL_CPPFLAGS += -DIEEE="ieee" -DBITS64="bits64"
+endif
+ifeq ($(GAG_MACHINE),hp)
+  GLOBAL_CPPFLAGS += -DEEEI="eeei"
+endif
+ifeq ($(GAG_MACHINE),sparc)
+  GLOBAL_CPPFLAGS += -DEEEI="eeei"
+endif
+ifeq ($(GAG_MACHINE),rs6000)
+  GLOBAL_CPPFLAGS += -DEEEI="eeei"
+endif
+ifeq ($(GAG_MACHINE),powerpc)
+  GLOBAL_CPPFLAGS += -DEEEI="eeei"
+endif
+
+# Preprocessor OS dependent flags
+ifeq ($(GAG_OS_KIND),linux)
+  GLOBAL_CPPFLAGS += -DLINUX="linux"
+endif
+ifeq ($(GAG_OS_KIND),cygwin)
+  GLOBAL_CPPFLAGS += -DCYGWIN="cygwin"
+endif
+ifeq ($(GAG_OS_KIND),darwin)
+  GLOBAL_CPPFLAGS += -DDARWIN="darwin"
+endif
+ifeq ($(GAG_OS_KIND),hpux)
+  GLOBAL_CPPFLAGS += -DHPUX="hpux"
+endif
+ifeq ($(GAG_OS_KIND),solaris)
+  GLOBAL_CPPFLAGS += -DSOLARIS="solaris"
+endif
+ifeq ($(GAG_OS_KIND),aix)
+  GLOBAL_CPPFLAGS += -DAIX -D_AIX
+endif
+
+# Preprocessor FC dependent flags
+ifeq ($(GAG_COMPILER),ifort)
+  GLOBAL_CPPFLAGS += -DIFORT="ifort"
+endif
+ifeq ($(GAG_COMPILER),g95)
+  GLOBAL_CPPFLAGS += -DG95="g95"
+endif
+ifeq ($(GAG_COMPILER),gfortran)
+  GLOBAL_CPPFLAGS += -DGFORTRAN="gfortran"
+endif
+ifeq ($(GAG_COMPILER),lf95)
+  GLOBAL_CPPFLAGS += -DLF95="lf95"
+endif
+ifeq ($(GAG_COMPILER),xlf)
+  GLOBAL_CPPFLAGS += -DXLF="xlf"
+endif
+
+# Preprocessor flags depending of external libraries
+ifeq ($(FFTW3_PRESENT),yes)
+  GLOBAL_CPPFLAGS += -DFFTW="yes"
+endif
+ifeq ($(CFITSIO_PRESENT),yes)
+  GLOBAL_CPPFLAGS += -DCFITSIO="yes"
+endif
+ifeq ($(SDM_PRESENT),yes)
+  GLOBAL_CPPFLAGS += -DSDM="yes"
+endif
+ifeq ($(NEWATM_PRESENT),yes)
+  GLOBAL_CPPFLAGS += -DATM2003="atm2003"
+endif
+
+###########################################################################
+# C compilation
+
+# C compiler name
+CC = gcc
+ifeq ($(GAG_OS_KIND),hpux)
+  CC = c89
+endif
+ifeq ($(GAG_OS_KIND),aix)
+  CC = xlc
+endif
+ifeq ($(GAG_OS_KIND),osf)
+  CC = cc
+endif
+ifeq ($(GAG_OS_KIND),solaris)
+  CC = cc
+endif
+
+# Generic flags
+GLOBAL_CFLAGS += $(GAG_INC_FLAGS)
+GLOBAL_CFLAGS += -I$(execincdir)
+ifneq ($(useincdir),)
+    GLOBAL_CFLAGS += -I$(useincdir)
+endif
+
+# GCC flags
+ifeq ($(CC),gcc)
+  # Generic to GCC
+  GLOBAL_CFLAGS += -pipe -fPIC
+  OPTION_CFLAGS += -Wall
+  ifeq ($(GAG_USE_32BITS),yes)
+    GLOBAL_CFLAGS += -m32
+    GLOBAL_CLDFLAGS = -m32 # This one is probably unused => To be checked
+  endif
+endif
+
+# HPUX C89 flags
+ifeq ($(CC),c89)
+  GLOBAL_CFLAGS += -DGAG_SYSV +DA1.1 +Z -D_HPUX_SOURCE
+endif
+
+# XLF flags
+ifeq ($(CC),xlf)
+  GLOBAL_CFLAGS += -DGAG_SYSV -D_ALL_SOURCE -qmaxmem=-1
+endif
+
+# CC flags
+ifeq ($(CC),cc)
+  # Under OSF
+  ifeq ($(GAG_OS_KIND),osf)
+    GLOBAL_CFLAGS += -DGAG_SYSV -std0
+  endif
+  # Under solaris
+  ifeq ($(GAG_OS_KIND),solaris)
+    GLOBAL_CFLAGS += -DGAG_SYSV -DSOLARIS -ftrap=%none -fns
+    OPTION_CFLAGS += -w
+  endif
+endif
+
+# OS dependent flags
+ifeq ($(GAG_OS_KIND),linux)
+  GLOBAL_CFLAGS += -Dlinux
+endif
+ifeq ($(GAG_OS_KIND),cygwin)
+  GLOBAL_CFLAGS += -Dcygwin
+endif
+ifeq ($(GAG_OS_KIND),darwin)
+  GLOBAL_CFLAGS += -Ddarwin
+endif
+
+# External library flags
+ifeq ($(PNG_PRESENT),yes)
+  GLOBAL_CFLAGS += -DPNG="yes"
+endif
+
+###########################################################################
+# Fortran compilation and link
+
+# Fortran compiler name
+FC = $(GAG_COMPILER)
+
+# Fortran compiler library name
+FL= $(GAG_COMPILER_LIBS)
+
+# Generic flags
+GLOBAL_FFLAGS += -I./ -I$(builddir) -I$(execincdir)
+ifneq ($(useincdir),)
+    GLOBAL_FFLAGS += -I$(useincdir)
+endif
+
+# G95 flags
+ifeq ($(FC),g95)
+  ifneq ($(GAG_USE_UNDERSCORE),yes)
+    GLOBAL_FFLAGS += -fno-underscoring
+  else
+    GLOBAL_FFLAGS += -fno-second-underscore
+  endif
+  # The "-std=f95" switch in the definition of OPTION_FFLAGS is desirable but
+  # rejects some equivalence statements...
+  GLOBAL_FFLAGS += -fmod=$(moddir) -pipe -no-cpp -fno-backslash
+  OPTION_FFLAGS += -fimplicit-none -Wall -Wno=155,140,115,101 -Wimplicit-none -Wunused-vars -Wuninitialized
+  GLOBAL_SLDFLAGS += -shared -Xlinker -export-dynamic
+  ifeq ($(GAG_MACHINE),x86_64)
+    # 64 bit specific flags
+    # -i4: Set kinds of integers without specification (i.e. at declaration
+    #      time) to kind=4 (32 bits)
+    GLOBAL_FFLAGS += -i4
+    ifeq ($(GAG_USE_32BITS),yes)
+      # Directly tell the assembler to produce 32 bits objects.
+      GLOBAL_FFLAGS += -Wa,--32
+      GLOBAL_FLDFLAGS += -Wl,-m,elf_i386
+    endif
+  else
+    # 32 bit specific flags
+    ifneq ($(GAG_MACHINE),powerpc)
+      GLOBAL_FFLAGS += -malign-double
+    endif
+  endif
+  ifeq ($(GAG_OS_KIND),cygwin)
+    GLOBAL_FFLAGS += -mcygwin
+  else
+    GLOBAL_FFLAGS += -fPIC
+  endif
+endif
+
+# GFORTRAN flags
+ifeq ($(FC),gfortran)
+  ifneq ($(GAG_USE_UNDERSCORE),yes)
+    GLOBAL_FFLAGS += -fno-underscoring
+  else
+    GLOBAL_FFLAGS += -fno-second-underscore
+  endif
+  GLOBAL_FFLAGS += -J$(moddir) -pipe -fno-backslash -fno-range-check
+  OPTION_FFLAGS += -fimplicit-none -Wuninitialized -Wunused-variable
+  GLOBAL_SLDFLAGS += -shared -Xlinker -export-dynamic
+  ifeq ($(GAG_MACHINE),x86_64)
+    # 64 bit specific flags
+    # Assume that integers without specification (i.e. at declaration
+    # time) are kind=4 (32 bits)?
+    ifeq ($(GAG_USE_32BITS),yes)
+      # This is not supported yet! Have to find the correct options...
+      GLOBAL_FFLAGS +=
+      GLOBAL_FLDFLAGS +=
+    endif
+  endif
+  ifeq ($(GAG_OS_KIND),cygwin)
+    GLOBAL_FFLAGS += -mcygwin
+  else
+    GLOBAL_FFLAGS += -fPIC
+  endif
+endif
+
+# IFORT flags
+ifeq ($(FC),ifort)
+  ifneq ($(GAG_USE_UNDERSCORE),yes)
+    GLOBAL_FFLAGS += -assume nounderscore
+  endif
+  GLOBAL_FFLAGS += -module $(moddir) -mp -nbs -fPIC
+  OPTION_FFLAGS += -implicitnone
+  GLOBAL_SLDFLAGS += -shared -nofor_main -Xlinker -export-dynamic
+  ifeq ($(GAG_MACHINE),x86_64)
+    # 64 bit specific flags
+    GLOBAL_FFLAGS += -i4
+    ifeq ($(GAG_USE_32BITS),yes)
+      GLOBAL_FLDFLAGS += -Wl,-m,elf_i386
+    endif
+  endif
+endif
+
+# IFC flags
+ifeq ($(FC),ifc)
+  GLOBAL_FFLAGS += -mp -nbs
+  OPTION_FFLAGS += -u 
+  GLOBAL_FLDFLAGS += -Vaxlib
+  PCL = work.pcl
+endif
+
+# LF95 flags
+ifeq ($(FC),lf95)
+  GLOBAL_FFLAGS += -M $(moddir) --mod .:$(moddir):$(execincdir) -KPIC
+  OPTION_FFLAGS += --in --chk=u --trace --swm 1041
+  GLOBAL_SLDFLAGS += --shared $(FL) -Wl,-export-dynamic
+endif
+
+# PGF90 flags
+ifeq ($(FC),pgf90)
+  GLOBAL_FFLAGS += -mp -Mbackslash
+endif
+
+# XLF flags
+ifeq ($(FC),xlf)
+  GAG_USE_UNDERSCORE =
+  OPTION_FFLAGS += -w
+  # Under AIX
+  ifeq ($(GAG_OS_KIND),aix)
+    GLOBAL_FFLAGS += -qcharlen=9000 -qnoescape -qmaxmem=-1 
+  endif
+  # Under DARWIN
+  ifeq ($(GAG_OS_KIND),darwin)
+    GLOBAL_FFLAGS = -qsuppress=cmpmsg
+  endif
+endif
+
+# F90 flags
+ifeq ($(FC),f90)
+  # Under HPUX
+  ifeq ($(GAG_OS_KIND),hpux)
+    GLOBAL_FFLAGS += +DA1.1 +pic=long +noppu
+  endif
+  # Under OSF
+  ifeq ($(GAG_OS_KIND),osf)
+    GLOBAL_FFLAGS += -fpe1 -align dcommons -align sequence
+    # According to man: -integer_size 32 -real_size 32 are the default 
+    OPTION_FFLAGS += -warn declarations -warning_severity error
+    # -std90 would be a good idea but it is too much work for the moment
+  endif
+  # Under SOLARIS
+  ifeq ($(GAG_OS_KIND),solaris)
+    GLOBAL_FFLAGS += -M$(execincdir) -dalign  -ftrap=%none -fns
+    OPTION_FFLAGS += -w
+  endif
+endif
+
+###########################################################################
+# Shared library extension
+
+SO_EXT =
+ifeq ($(GAG_OS_KIND),linux)
+  SO_EXT = so
+endif
+ifeq ($(GAG_OS_KIND),hpux)
+  SO_EXT = sl
+endif
+ifeq ($(GAG_OS_KIND),osx)
+  SO_EXT = ???
+endif
+ifeq ($(GAG_OS_KIND),cygwin)
+  SO_EXT = dll
+endif
+
+###########################################################################
+# Kernel libraries
+
+LEGACY_LIBS = -lslatec -llapack -lblas
+GAG_LIBS = -lggui -lgcore -lgwcs -lgio -lgsys -lginc
+
+ifeq ($(GAG_USE_XML),yes)
+  MOTIF_PRESENT = no
+  GAG_USE_KEYBOARD_PROCESS = yes
+  GUI_DIRS += gxml
+  GUI_LIBS += -lgxml
+  GUI_SYS_LIBS += $(XML_LIBS)
+else
+  GUI_DIRS += gx11
+  GUI_LIBS =
+  GUI_SYS_LIBS =
+  ifeq ($(GAG_USE_GTK),yes)
+    GAG_USE_THREADS = yes
+    MOTIF_PRESENT = no
+    ifndef GTK_CFLAGS
+      GTK_CFLAGS = $(shell pkg-config --cflags gtk+-2.0 gthread-2.0)
+    endif
+    ifndef GTK_LIBS
+      GTK_LIBS = $(shell pkg-config --libs gtk+-2.0 gthread-2.0)
+    endif
+  
+    GUI_DIRS += ggtk
+    GUI_LIBS += -lggtk
+    GUI_SYS_LIBS += $(GTK_LIBS)
+    GLOBAL_CFLAGS += $(GTK_CFLAGS)
+  endif
+  ifeq ($(MOTIF_PRESENT),yes)
+    GAG_USE_MOTIF = yes
+    GUI_DIRS += gmotif
+    GUI_LIBS += -lgmotif
+    GUI_SYS_LIBS += $(MOTIF_LIBS)
+  endif
+  ifeq ($(XFORMS_PRESENT),yes)
+    #GUI_LIBS += -lgxforms
+    GUI_SYS_LIBS += $(XFORMS_LIBS)
+  endif
+  GUI_LIBS += -lgx11
+  GUI_SYS_LIBS += -lX11
+endif
+
+SIC_LIB_DEPENDS =
+SIC_SYS_LIBS =
+ifeq ($(GAG_USE_THREADS),yes)
+  SIC_LIB_DEPENDS += $(GUI_LIBS)
+  SIC_SYS_LIBS += $(GUI_SYS_LIBS)
+endif
+SIC_LIB_DEPENDS += $(GAG_LIBS) $(LEGACY_LIBS)
+
+SIC_LIBS = -lsic $(SIC_LIB_DEPENDS)
+
+GREG_LIB_DEPENDS = -lgtv -lgcont -lgchar
+GREG_SYS_LIBS = $(SIC_SYS_LIBS)
+ifneq ($(GAG_USE_THREADS),yes)
+  GREG_LIB_DEPENDS += $(GUI_LIBS)
+  GREG_SYS_LIBS += $(GUI_SYS_LIBS)
+endif
+GREG_LIB_DEPENDS += $(SIC_LIBS)
+
+GREG_LIBS = -lgreg $(GREG_LIB_DEPENDS)
+
+# ATM libs
+ATM_LIBS = -latm
+# Add libatm2003 if present on system
+ifeq ($(NEWATM_PRESENT),yes)
+  ATM_LIBS += -latm2003
+endif
+# Add libatm2009
+ATM_LIBS += -latm2009
+# Add libstdc++ needed for libatm2009, but extension differs on various systems
+ifeq ($(GAG_USE_32BITS),yes)
+  # Compilation in 32 bits mode
+  GAG_32BITS_SWITCH = "-m32"
+endif
+ifneq ($(GAG_OS_KIND),cygwin)
+  ifeq ($(GAG_OS_KIND),darwin)
+    ATM_LIBS += $(shell g++ $(GAG_32BITS_SWITCH) -print-file-name=libstdc++.dylib)
+  else
+    ATM_LIBS += $(shell g++ $(GAG_32BITS_SWITCH) -print-file-name=libstdc++.so)
+  endif
+else 
+  ATM_LIBS += $(shell g++ $(GAG_32BITS_SWITCH) -print-file-name=libstdc++.a)
+endif 
+
+
+ASTRO_LIBS = -lastro $(ATM_LIBS)
+
+###########################################################################
+# Additional external libraries
+
+# On some rare cases, it may be needed to replace the next uncommented line by
+# the following commented one.
+#MOTIF_LIBS = -lXm -lXt -lX11 -lXp -lXext -lSM -lICE
+MOTIF_LIBS = -lXm -lXt
+XFORMS_LIBS = -lforms -lXpm
+
+XML_LIBS = 
+ifeq ($(GAG_OS_KIND),solaris)
+  XML_LIBS = -lsocket -lnsl
+endif
+
+# Optional system libraries
+ifeq ($(GAG_USE_PYTHON),yes)
+  ADD_LIBS += -lpython$(PY_VERS) -lutil
+endif
+ifeq ($(PNG_PRESENT),yes)
+  ADD_LIBS += -lpng -lz
+endif
+ifeq ($(FFTW3_PRESENT),yes)
+  ADD_LIBS += -lfftw3
+  ifeq ($(FFTW3F_PRESENT),yes)
+    ADD_LIBS += -lfftw3f
+  endif
+endif
+
+# Mandatory system libraries
+SYS_LIBS =
+ifeq ($(GAG_OS_KIND),linux)
+  SYS_LIBS += -lrt
+endif
+ifeq ($(GAG_OS_KIND),solaris)
+  SYS_LIBS += -lrt
+endif
+# This is useful on newer MacOSX. Its need should be detected automatically...
+#SYS_LIBS += -lSystemStubs
+SYS_LIBS += -lm
+
+###########################################################################
+# Features instantiation
+
+ifeq ($(GAG_USE_DEBUG),yes)
+  GLOBAL_CFLAGS += -g
+  GLOBAL_FFLAGS += -g
+else
+  GLOBAL_CFLAGS += -O
+  GLOBAL_FFLAGS += -O
+endif
+
+ifeq ($(GAG_USE_PROFILE),yes)
+  GLOBAL_CFLAGS += -p
+  GLOBAL_FFLAGS += -p
+  GLOBAL_CLDFLAGS += -p
+  GLOBAL_FLDFLAGS += -p
+  GAG_USE_STATICLINK = yes
+endif
+
+ifeq ($(GAG_USE_UNDERSCORE),yes)
+    GLOBAL_CFLAGS += -Dunderscore
+endif
+
+ifneq ($(GAG_USE_POSIX),yes)
+    GLOBAL_CFLAGS += -DGAG_SYSV
+endif
+
+# all config settings
+LOCAL_ACTIVE_FEATURES := $(foreach f, $(LOCAL_FEATURES), $(f)=$($(f)))
+LOCAL_ACTIVE_FEATURES := $(filter %=yes, $(LOCAL_ACTIVE_FEATURES))
+LOCAL_ACTIVE_FEATURES := $(subst =yes, , $(LOCAL_ACTIVE_FEATURES))
+LOCAL_CPPFLAGS = $(patsubst %,-D%,$(LOCAL_ACTIVE_FEATURES))
+GLOBAL_CPPFLAGS += $(LOCAL_CPPFLAGS)
+GLOBAL_CFLAGS += $(LOCAL_CPPFLAGS)
+
+###########################################################################
+# Paths to resolve dependencies LD_LIBRARY_PATH contains all the
+# locations of Gildas libs. We write here only the most general paths
+# to be searched, some of which are superseded machine by machine above.
+
+vpath %.a          $(GAG_LIB_PATH)
+vpath %.so         $(GAG_LIB_PATH) # Standard unix/linux
+vpath %.sl         $(GAG_LIB_PATH) # For hpux
+vpath %.dll        $(GAG_LIB_PATH) # For cygwin
+vpath %.dylib      $(GAG_LIB_PATH) # For macosx
+vpath %.inc	   $(GAG_INC_PATH)
+vpath %.h          $(GAG_INC_PATH):$(execincdir)
+
+###########################################################################
diff --exclude='*~' -ruN gildas-src-feb10a/admin/define-system.sh gildas-src-feb10a.patched/admin/define-system.sh
--- gildas-src-feb10a/admin/define-system.sh	2009-12-07 14:34:49.000000000 +0100
+++ gildas-src-feb10a.patched/admin/define-system.sh	2010-02-15 16:07:51.000000000 +0100
@@ -208,11 +208,11 @@
 		else
 		    GAG_MACHINE=pc
 		fi
-		if which ifort > /dev/null 2>&1; then
-		    DEFAULT_COMPILER=ifort
-		elif which g95 > /dev/null 2>&1; then
-		    DEFAULT_COMPILER=g95
-		fi
+		#if which ifort > /dev/null 2>&1; then
+		#    DEFAULT_COMPILER=ifort
+		#elif which g95 > /dev/null 2>&1; then
+		#    DEFAULT_COMPILER=g95
+		#fi
 	    fi ;;
 	CYGWIN*)
 	    GAG_MACHINE=pc
diff --exclude='*~' -ruN gildas-src-feb10a/admin/define-system.sh.orig gildas-src-feb10a.patched/admin/define-system.sh.orig
--- gildas-src-feb10a/admin/define-system.sh.orig	1970-01-01 01:00:00.000000000 +0100
+++ gildas-src-feb10a.patched/admin/define-system.sh.orig	2009-12-07 14:34:49.000000000 +0100
@@ -0,0 +1,307 @@
+###########################################################################
+#
+# Shell verification. Try to be robust => very simple.
+#
+GAG_SHELL_TEST="shell test" || echo "define-system.sh error: You must be under a sh-compatible shell!"
+GAG_SHELL_TEST="shell test" || exit 1
+unset GAG_SHELL_TEST
+#
+###########################################################################
+#
+# Main function definition
+#
+gagdefsys() {
+    #
+    # Variable definitions
+    #
+    DEFSYS_AUTHOR='J. Pety <pety@iram.fr>'
+    DEFSYS_PROJECT='GILDAS  <http://www.iram.fr/IRAMFR/GILDAS>'
+    DEFSYS_PROGNAME='gagdefsys'
+    #
+    # Function definitions
+    #
+    defsys_usage() {
+	cat <<EOF 1>&2
+
+Define environment variables:
+   GAG_COMP_SYSTEM=MACHINE-OS_KIND-COMPILER,
+   GAG_EXEC_SYSTEM=MACHINE-OS_VERS-COMPILER(-CONFIG).
+A default compiler is provided for each combination of MACHINE and OS. This
+default compiler may be overriden using the -c option.
+
+usage: source $DEFSYS_PROGNAME [options]
+
+options:
+  -h          Show this help page
+  -v          Show version information
+  -c compiler Replace default compiler by this one
+  -o config   Add config to the config list
+  -n config   Remove config from the config list
+
+EOF
+	defsys_clean
+    }
+    #
+    defsys_showversion() {
+	echo "$DEFSYS_PROGNAME, by $DEFSYS_AUTHOR"
+	echo "Project: $DEFSYS_PROJECT"
+	defsys_clean
+    }
+    #
+    defsys_message() {
+	echo "$DEFSYS_PROGNAME: $1"
+    }
+    #
+    defsys_error() {
+	echo
+	echo "$DEFSYS_PROGNAME error: $1"
+	echo
+	defsys_clean
+    }
+    #
+    defsys_clean() {
+	unset defsys_usage defsys_showversion defsys_message
+	unset defsys_error defsys_clean
+	unset GFORTRAN_VERSION GFORTRAN_STABLE GFORTRAN_DEV
+	unset DEFSYS_AUTHOR DEFSYS_PROGNAME DEFSYS_PROJECT
+	unset DEFSYS_COMPILER DEFSYS_CONFIG
+	unset DEFAULT_COMPILER DEFAULT_CONFIG
+    }
+    #
+    #######################################################################
+    #
+    # Option parsing
+    #
+    DEFSYS_COMPILER="default" # Default compiler will be setup by gagdefsys
+    DEFSYS_CONFIG="default"   # Default config will be setup by gagdefsys
+    temp=`getopt "hvc:o:n:" "$@"`
+    if [ $? -ne 0 ]; then defsys_usage; return 2; fi
+    eval set -- "$temp"
+    unset temp
+    while [ $1 != -- ]; do
+	case $1 in
+	-c) DEFSYS_COMPILER=$2; shift ;;
+	-o) if [ $DEFSYS_CONFIG == "default" ]; then DEFSYS_CONFIG=$2;    else DEFSYS_CONFIG=$DEFSYS_CONFIG-$2;    fi; shift;;
+	-n) if [ $DEFSYS_CONFIG == "default" ]; then DEFSYS_CONFIG=no_$2; else DEFSYS_CONFIG=$DEFSYS_CONFIG-no_$2; fi; shift;;
+	-v) defsys_showversion; return 0 ;;
+	-h) defsys_usage; return 0 ;;
+	esac
+	shift # Next flag
+    done
+    shift # Skip double dash
+    case $# in
+	!0) defsys_usage; return 2 ;;
+    esac
+    set abc; shift # This line to avoid remanence effect in a portable way
+    #
+    #######################################################################
+    #
+    # More detailed tests about the MACHINE and OS types will be implemented
+    # when needed.
+    #
+    DEFAULT_COMPILER=none
+    DEFAULT_CONFIG=          # Default config is empty
+    case `uname` in
+	SunOS)
+	    # This should support the new sun+solaris on opterons
+	    # OSTYPE is solarisX.XX, so greater lexicographically
+	    # than solaris
+	    if [ "$OSTYPE" > "solaris" ]; then
+		GAG_OS_KIND=solaris
+		GAG_OS_VERS=${OSTYPE}
+		GAG_MACHINE=${HOSTTYPE}
+	    else
+		GAG_MACHINE=sparc
+		GAG_OS_KIND=solaris
+		GAG_OS_VERS=solaris
+	    fi
+	    DEFAULT_COMPILER=f90 ;;
+	OSF1)
+	    GAG_MACHINE=alpha
+	    GAG_OS_KIND=osf
+	    GAG_OS_VERS=osf
+	    DEFAULT_COMPILER=f90 ;;
+	HP-UX)
+	    GAG_MACHINE=hp
+	    GAG_OS_KIND=hpux
+	    GAG_OS_VERS=hpux
+	    DEFAULT_COMPILER=f90 ;;
+	AIX)
+	    GAG_MACHINE=$MACHTYPE
+	    GAG_OS_KIND=$OSTYPE
+	    GAG_OS_VERS=$OSTYPE
+	    if which xlf95 > /dev/null 2>&1; then
+ 	        # xlf even though xlf95 is present, due to a trick in
+		# Makdefile.def to compile differently f90 and f files.
+		DEFAULT_COMPILER=xlf
+	    elif which xlf90 > /dev/null 2>&1; then
+		# Same remark as above
+		DEFAULT_COMPILER=xlf
+	    fi ;;
+	Linux)
+	    if [ `uname -m | grep -c "x86_64"` -ne 0 ]; then
+		GAG_MACHINE=x86_64
+	    else
+		GAG_MACHINE=pc
+	    fi
+	    GAG_OS_KIND=linux
+	    # There should not be any "-" character between the linux flavor
+	    # and its version to enable easy parsing of the GAG_EXEC_SYSTEM
+	    # environment variable back into MACHINE, GAG_OS_VERS and COMPILER.
+	    if [ -f /etc/mandrake-release ]; then
+		MANDRAKE_KIND=`cut -d" " -f1 /etc/mandrake-release`
+		if [ "$MANDRAKE_KIND" = "Mandrakelinux" ]; then
+		GAG_OS_VERS=mandrake`cut -d" " -f3 /etc/mandrake-release|tr -d '()'`
+		else
+		GAG_OS_VERS=mandrake`cut -d" " -f4 /etc/mandrake-release|tr -d '()'`
+		fi
+		unset MANDRAKE_KIND
+	    elif [ -f /etc/redhat-release ]; then
+		REDHAT_KIND=`cut -d" " -f1 /etc/redhat-release`
+		if [ "$REDHAT_KIND" = "Fedora" ]; then
+		    GAG_OS_VERS=fedora`cat /etc/redhat-release | sed "s%.*release\s*%%i" | cut -d" " -f1`
+		else
+		    GAG_OS_VERS=redhat`cut -d" " -f5 /etc/redhat-release`
+		fi
+		unset REDHAT_KIND
+	    elif [ -f /etc/debian_version ]; then
+		GAG_OS_VERS=debian`cut -d"/" -f1 /etc/debian_version`
+	    elif [ -f /etc/SuSE-release ]; then
+		SUSE_KIND=`grep -i suse /etc/SuSE-release | cut -d" " -f1 `
+		if [ "$SUSE_KIND" = "openSUSE" ]; then
+		    GAG_OS_VERS=suse`grep -i suse /etc/SuSE-release | cut -d" " -f2`
+		else
+		    GAG_OS_VERS=suse`grep -i suse /etc/SuSE-release | cut -d" " -f3`
+		fi
+		unset SUSE_KIND
+	    else
+		GAG_OS_VERS=linux
+	    fi
+	    if which ifort > /dev/null 2>&1; then
+		DEFAULT_COMPILER=ifort
+	    elif which ifc > /dev/null 2>&1; then
+		DEFAULT_COMPILER=ifc
+	    elif which g95 > /dev/null 2>&1; then
+		DEFAULT_COMPILER=g95
+	    elif which gfortran > /dev/null 2>&1; then
+		DEFAULT_COMPILER=gfortran
+	    elif which pgf90 > /dev/null 2>&1; then
+		DEFAULT_COMPILER=pgf90
+	    fi ;;
+	Darwin)
+	    GAG_OS_KIND=darwin
+	    GAG_OS_VERS=darwin
+	    if [ `uname -p | grep -c "pc"` -ne 0  ]; then
+		GAG_MACHINE=powerpc
+		# Check for the xlf compiler. If it's not present
+                # use g95 instead.
+		if which xlf95 > /dev/null 2>&1; then
+		    DEFAULT_COMPILER=xlf #see above for AIX
+		elif which xlf90 > /dev/null 2>&1; then
+		    DEFAULT_COMPILER=xlf #same remark
+		else
+		    DEFAULT_COMPILER=g95
+		fi
+	    elif [ `uname -p` = "i386" ]; then
+		if [ `sysctl -n hw.optional.x86_64 2> /dev/null` = 1 ]; then
+		    GAG_MACHINE=x86_64
+		else
+		    GAG_MACHINE=pc
+		fi
+		if which ifort > /dev/null 2>&1; then
+		    DEFAULT_COMPILER=ifort
+		elif which g95 > /dev/null 2>&1; then
+		    DEFAULT_COMPILER=g95
+		fi
+	    fi ;;
+	CYGWIN*)
+	    GAG_MACHINE=pc
+	    GAG_OS_KIND=cygwin
+	    GAG_OS_VERS=cygwin
+	    if which gfortran > /dev/null 2>&1; then
+		DEFAULT_COMPILER=gfortran
+            else
+                DEFAULT_COMPILER=g95
+            fi ;;
+	MINGW32*)
+	    GAG_MACHINE=pc
+	    GAG_OS_KIND=mingw
+	    GAG_OS_VERS=mingw
+	    if which gfortran > /dev/null 2>&1; then
+		DEFAULT_COMPILER=gfortran
+            else
+                DEFAULT_COMPILER=g95
+            fi ;;
+	*)
+	    defsys_error "Unknown operating system. Sorry"
+	    return 1
+    esac
+    #
+    #######################################################################
+    #
+    if [ "$DEFSYS_COMPILER" = "default" ]; then
+	if [ "$DEFAULT_COMPILER" = "none" ]; then
+	    defsys_error "No default FORTRAN 90 compiler found. Sorry"
+	else
+	    GAG_COMPILER=$DEFAULT_COMPILER
+	fi
+    else
+	GAG_COMPILER=$DEFSYS_COMPILER
+    fi
+    which $GAG_COMPILER > /dev/null 2>&1 ||{
+	defsys_message "Compiler $GAG_COMPILER not found in \$PATH"
+	defsys_message "This may mean the compiler name is an alias resolved later on"
+    }
+    # Reject gfortran unstable version
+    if [ "$GAG_COMPILER" == "gfortran" ]; then
+	GFORTRAN_STABLE="4.3.0"
+	GFORTRAN_VERSION=`gfortran --version | head -1 | sed "s%.*\s\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*%\1%"`
+	if [[ "$GFORTRAN_VERSION" < "$GFORTRAN_STABLE" ]]; then
+	    defsys_error "gfortran version $GFORTRAN_VERSION unsupported. You can consider upgrading to version $GFORTRAN_STABLE. We advise you to use g95 instead."
+	    return 1
+	fi
+    fi
+    #
+    if [ "$DEFSYS_CONFIG" = "default" ]; then
+	GAG_CONFIG=$DEFAULT_CONFIG
+    else
+	GAG_CONFIG=$DEFSYS_CONFIG
+    fi
+    # Sort GAG_CONFIG components
+    if [ "$GAG_CONFIG" != "" ]; then
+	GAG_CONFIG=`echo \`echo $GAG_CONFIG | sed 's/-/\n/g' | sort | uniq\` | sed 's/\(^\| \)/-/g'`
+    fi
+    #
+    if [ "$GAG_COMPILER" = "g95" ]; then
+	G95_ENDIAN=NATIVE
+	export G95_ENDIAN
+	GAG_COMPILER_LIBS="-lf95"
+    elif [ "$GAG_COMPILER" = "ifort" ]; then
+	GAG_COMPILER_LIBS="-lifcore -lgcc_s"
+    elif [ "$GAG_COMPILER" = "gfortran" ]; then
+	GAG_COMPILER_LIBS="-lgfortran"
+    elif [ "$GAG_COMPILER" = "lf95" ]; then
+	if [ "$GAG_MACHINE" = "x86_64" ]; then
+	    GAG_COMPILER_LIBS="-lfj90f -lfj90i"
+	elif [ "$GAG_MACHINE" = "pc" ]; then
+	    GAG_COMPILER_LIBS="-lfj9f6 -lfj9i6 -lfj9e6"
+	else
+	    GAG_COMPILER_LIBS=
+	fi
+    else
+	GAG_COMPILER_LIBS=
+    fi
+    export GAG_COMPILER_LIBS
+    #
+    #######################################################################
+    #
+    GAG_COMP_SYSTEM=$GAG_MACHINE-$GAG_OS_KIND-$GAG_COMPILER
+    GAG_EXEC_SYSTEM=$GAG_MACHINE-$GAG_OS_VERS-$GAG_COMPILER$GAG_CONFIG
+    export GAG_COMP_SYSTEM GAG_EXEC_SYSTEM
+    export GAG_MACHINE GAG_OS_KIND GAG_OS_VERS GAG_COMPILER GAG_CONFIG
+    #
+    defsys_clean
+    #
+}
+#
+###########################################################################
diff --exclude='*~' -ruN gildas-src-feb10a/admin/gildas-env.sh gildas-src-feb10a.patched/admin/gildas-env.sh
--- gildas-src-feb10a/admin/gildas-env.sh	2009-11-20 15:55:11.000000000 +0100
+++ gildas-src-feb10a.patched/admin/gildas-env.sh	2010-02-15 16:04:39.000000000 +0100
@@ -524,11 +524,11 @@
 	    NEWATM_PRESENT=yes
 	    NEWATM_LIB_DIR=$DIR
 	fi
-	if file_present "liblapack." "${DIR}"; then
-	    LAPACK_PRESENT=yes
+	if file_present "libLAPACK." "${DIR}"; then
+	    LAPACK_PRESENT=yes	    
 	    LAPACK_LIB_DIR=$DIR
 	fi
-	if file_present "libblas." "${DIR}"; then
+	if file_present "libBLAS." "${DIR}"; then
 	    BLAS_PRESENT=yes
 	    BLAS_LIB_DIR=$DIR
 	fi
diff --exclude='*~' -ruN gildas-src-feb10a/packages/clic/lib/Makefile gildas-src-feb10a.patched/packages/clic/lib/Makefile
--- gildas-src-feb10a/packages/clic/lib/Makefile	2008-11-14 10:52:59.000000000 +0100
+++ gildas-src-feb10a.patched/packages/clic/lib/Makefile	2010-02-15 16:04:39.000000000 +0100
@@ -55,7 +55,7 @@
 # Mathematical library dependency
 ifeq ($(LINEAR),lapack)
   LINEAR_LIB_OBJECTS = singular.o mth_lapack.o
-  LINEAR_LIB_DEPENDS = -llapack -lblas
+  LINEAR_LIB_DEPENDS = -lLAPACK -lBLAS
 else 
   ifeq ($(LINEAR),nag)
     LINEAR_LIB_OBJECTS = mth_nag.o
diff --exclude='*~' -ruN gildas-src-feb10a/packages/clic07/lib/Makefile gildas-src-feb10a.patched/packages/clic07/lib/Makefile
--- gildas-src-feb10a/packages/clic07/lib/Makefile	2009-07-10 12:17:56.000000000 +0200
+++ gildas-src-feb10a.patched/packages/clic07/lib/Makefile	2010-02-15 16:04:39.000000000 +0100
@@ -49,7 +49,7 @@
 # Mathematical library dependency
 ifeq ($(LINEAR),lapack)
   LINEAR_LIB_OBJECTS = singular.o mth_lapack.o
-  LINEAR_LIB_DEPENDS = -llapack -lblas
+  LINEAR_LIB_DEPENDS = -lLAPACK -lBLAS
 else 
   ifeq ($(LINEAR),nag)
     LINEAR_LIB_OBJECTS = mth_nag.o
