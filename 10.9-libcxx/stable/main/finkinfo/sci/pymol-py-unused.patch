Index: contrib/uiuc/plugins/molfile_plugin/src/edmplugin.cpp
===================================================================
--- contrib/uiuc/plugins/molfile_plugin/src/edmplugin.cpp	(revision 4159)
+++ contrib/uiuc/plugins/molfile_plugin/src/edmplugin.cpp	(working copy)
@@ -204,7 +204,7 @@
                          float *colorblock) {
   edm_t *edm = (edm_t *)v;
   float * cell = datablock;
-  int z, l, sentinel, convcnt;
+  int z, sentinel, convcnt;
   char readbuf[16];
  
   int xsize = edm->vol[0].xsize;
@@ -217,7 +217,6 @@
   if ((nlines * 6) < nperslice) {
     nlines++;
   }
-  int leftover = (nperslice - (nlines - 1) * 6);
 
   for (z=0; z<zsize; z++) {
     int c;
@@ -236,6 +235,8 @@
     }
     eatline(edm->fd);                // go on to next line
 #else
+    int l;
+    int leftover = (nperslice - (nlines - 1) * 6);
     for (l=1; l<nlines; l++) {
       for (c=0; c<6; c++) {
         fgets(readbuf, 13, edm->fd); // read in 12 chars (fgets reads N-1)
Index: contrib/uiuc/plugins/molfile_plugin/src/jsplugin.c
===================================================================
--- contrib/uiuc/plugins/molfile_plugin/src/jsplugin.c	(revision 4159)
+++ contrib/uiuc/plugins/molfile_plugin/src/jsplugin.c	(working copy)
@@ -400,8 +400,6 @@
   /* skip bulk solvent, useful for faster loading of very large */
   /* structures                                                 */
   if (getenv("VMDJSMAXATOMIDX") != NULL) {
-    fio_size_t bszmask;
-
     int maxatomidx = atoi(getenv("VMDJSMAXATOMIDX"));
     if (maxatomidx < 0)
       maxatomidx = 0;
Index: contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp
===================================================================
--- contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp	(revision 4159)
+++ contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp	(working copy)
@@ -1880,7 +1880,9 @@
 
     // assign ct for each particle, and count ct atoms and pseudos
     std::vector<int> atom_ct(h->nparticles);
+#if defined(DESRES_CTNUMBER)
     int last_ctnumber = -1;
+#endif
     int ct = 1;
     for (int i=0; i<h->nparticles; i++) {
       const molfile_atom_t &a = atoms[i];
Index: contrib/uiuc/plugins/molfile_plugin/src/mdfplugin.cpp
===================================================================
--- contrib/uiuc/plugins/molfile_plugin/src/mdfplugin.cpp	(revision 4159)
+++ contrib/uiuc/plugins/molfile_plugin/src/mdfplugin.cpp	(working copy)
@@ -132,7 +132,6 @@
   char bond_records[LINESIZE];
   int bonds = 0;
   char *tmp;
-  int retval;
   
   // no bonds or parse error
   if ( get_mdf_bonds(bond_records, line) < 1) {
Index: contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c
===================================================================
--- contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c	(revision 4159)
+++ contrib/uiuc/plugins/molfile_plugin/src/moldenplugin.c	(working copy)
@@ -825,7 +825,6 @@
       for (j=0; j<numprims; j++) {
         int nr;
         double expon=0.f, coeff1, coeff2=0.f;
-	char s_expon[128], s_coeff1[128], s_coeff2[128];
 	if (!fgets(buffer,1024,data->file)) return FALSE;
 
 	/* MOLDEN writes the basis set coefficients using Fortran style notation 
Index: contrib/uiuc/plugins/molfile_plugin/src/spiderplugin.cpp
===================================================================
--- contrib/uiuc/plugins/molfile_plugin/src/spiderplugin.cpp	(revision 4159)
+++ contrib/uiuc/plugins/molfile_plugin/src/spiderplugin.cpp	(working copy)
@@ -274,7 +274,7 @@
                          float *colorblock) {
   spider_t *vol = (spider_t *)v;
   FILE *fd = vol->fd;
-  int x, y, z, xsize, ysize, zsize, xysize, total;
+  int xsize, ysize, zsize, xysize, total;
 
   xsize = vol->vol[0].xsize;
   ysize = vol->vol[0].ysize;
Index: layer2/ObjectMolecule.cpp
===================================================================
--- layer2/ObjectMolecule.cpp	(revision 4159)
+++ layer2/ObjectMolecule.cpp	(working copy)
@@ -8460,7 +8460,6 @@
   int ok = true;
   int auto_show = RepGetAutoShowMask(G);
   WordType nameTmp;
-  OVreturn_word ovresult;
 
   p = buffer;
   nAtom = 0;
Index: modules/cealign/src/tnt/tnt_matrix.h
===================================================================
--- modules/cealign/src/tnt/tnt_matrix.h	(revision 4159)
+++ modules/cealign/src/tnt/tnt_matrix.h	(working copy)
@@ -546,7 +546,7 @@
 #endif
 
     Subscript M = A.num_rows();
-    Subscript N = A.num_cols();
+    // Subscript N = A.num_cols();
     Subscript K = B.num_cols();
 
     Matrix<T> tmp(M,K);
