Package: sbcl
Architecture: i386
Version: 1.0.19
Revision: 2
License: BSD
Description: ANSI Common Lisp implementation
Maintainer: Jesse Alama <alama@stanford.edu>

# NOTE: The version of the bootstrap binary does not automatically
# change when the version field is updated!  CompileScript and Source2
# need to be updated by hand when moving to a new version of the
# bootstap binary

BuildDepends: texinfo (>= 4.6), fink ( >= 0.24.12 )

Recommends: gnupg | gnupg-idea | gnupg-testing

Source: mirror:sourceforge:sbcl/sbcl-%v-source.tar.bz2
Source2: mirror:sourceforge:sbcl/sbcl-1.0.2-x86-darwin-binary.tar.bz2
#Source2: mirror:sourceforge:sbcl/sbcl-1.0.19-x86-darwin-binary.tar.bz2
Source-MD5: c84b4b3c2f4293e98f0941a43fb746f4
Source2-MD5: 3b222a1f945ca462a2884fc378362c33
#Source2-MD5: 56d8d77291a8dcf3c47cf997c9de902f
SourceDirectory: sbcl-%v
# The 1.0.19 bootstrap binary bombs here with "dyld: Symbol not found: _kill$UNIX2003  Expected in: /usr/lib/libSystem.B.dylib"
PatchFile: %n.patch
PatchFile-MD5: 4724087c1ac59bd11c4b407fa4e8e62e

CompileScript: <<
#  cd ../%n-1.0.19-x86-darwin; mv %n-1.0.19/* .; rmdir %n-1.0.19
#  unset LD_PREBIND; sh make.sh clisp --disable-debugger
  unset LD_PREBIND ; sh make.sh "../sbcl-1.0.2-x86-darwin/src/runtime/sbcl --core ../sbcl-1.0.2-x86-darwin/output/sbcl.core --disable-debugger --sysinit /dev/null --userinit /dev/null"
  cd doc/manual ; make html info
<<

InstallScript: <<
  find %b -depth -type d -name CVS -exec rm -rf {} \;
  find %b -depth -type f -name .cvsignore -exec rm -f {} \;
  unset SBCL_HOME ; INSTALL_ROOT=%i sh install.sh
  
  mv %i/bin/sbcl %i/lib/sbcl/sbcl
  echo '#! /bin/sh' > %i/bin/sbcl
  echo 'SBCL_HOME=%p/lib/sbcl/ exec %p/lib/sbcl/sbcl "$@"' >> %i/bin/sbcl
  chmod 755 %i/bin/sbcl
<<

InfoDocs: sbcl.info asdf.info

Homepage: http://www.sbcl.org/

DescDetail: <<
Steel Bank Common Lisp is an open source development system for ANSI
Common Lisp.  It provides an interactive environment including an
integrated native compiler, interpreter, and debugger.  Several
extensions, such as a foreign function interface, and support for Unix
(POSIX) system calls are also included.  SBCL is derived from CMU CL.
<< 

DescPort: <<
Uses an SBCL binary for bootstrapping.
<<
