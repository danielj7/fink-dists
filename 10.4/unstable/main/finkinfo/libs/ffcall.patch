diff -ur ffcall-1.10-orig/callback/trampoline_r/trampoline.c ffcall-1.10/callback/trampoline_r/trampoline.c
--- ffcall-1.10-orig/callback/trampoline_r/trampoline.c	2006-11-20 01:36:13.000000000 +0100
+++ ffcall-1.10/callback/trampoline_r/trampoline.c	2006-11-20 01:36:38.000000000 +0100
@@ -235,7 +235,7 @@
 
 /* Length and alignment of trampoline */
 #ifdef __i386__
-#define TRAMP_LENGTH 16
+#define TRAMP_LENGTH 32
 #define TRAMP_ALIGN 16  /* 4 for a i386, 16 for a i486 */
 #endif
 #ifdef __m68k__
@@ -415,29 +415,28 @@
    * But I doubt it's really worth it.
    */
 #ifdef __i386__
-  /* function:
-   *    popl %ecx			59
-   *    pushl $<data>			68 <data>
-   *    pushl %ecx			51
-   *    jmp <address>			E9 <address>-<here>
-   * here:
-   *    nop				90
-   *    nop				90
-   *    nop				90
-   *    nop				90
-   */
-  *(short *) (function + 0) = 0x6859;
-  *(long *)  (function + 2) = (long) data;
-  *(short *) (function + 6) = 0xE951;
-  *(long *)  (function + 8) = (long) address - (long) (function + 12);
-  *(long *)  (function +12) = 0x90909090;   /* nop nop nop nop, for alignment */
+	{
+	char code[] = {
+		0x59,                               /* popl %ecx         */
+		0x89, 0x0d, 0xfe, 0xca, 0xad, 0xab, /* movl %ecx, <slot> */
+		0x68, 0xef, 0xbe, 0xad, 0xde,       /* pushl $<data>     */
+		0xe8, 0x00, 0x00, 0x00, 0x00,       /* call <address>    */
+		0x8b, 0x0d, 0xfe, 0xca, 0xad, 0xab, /* movl <slot>, %ecx */
+		0x89, 0x0c, 0x24,                   /* movl %ecx,(%esp)  */
+		0xc3 };                             /* ret            */
+	memcpy(function, code, sizeof(code));
+	*(long*) (function + 3) = (long) data + 28;
+	*(long*) (function + 8) = (long) data;
+	*(long *)  (function + 13) = (long) address - (long) (function + 17);
+	*(long*) (function + 19) = (long) data + 28;	
+	}
 #define is_tramp(function)  \
-  *(unsigned short *) (function + 0) == 0x6859 && \
-  *(unsigned short *) (function + 6) == 0xE951
+  *(unsigned short *) (function + 0) == 0x8959
+
 #define tramp_address(function)  \
-  *(long *)  (function + 8) + (long) (function + 12)
+  *(long *)  (function + 13) + (long) (function + 17)
 #define tramp_data(function)  \
-  *(long *)  (function + 2)
+  *(long *)  (function + 8)
 #endif
 #ifdef __m68k__
   /* function:
diff -ur ffcall-1.10-orig/callback/vacall_r/misc.c ffcall-1.10/callback/vacall_r/misc.c
--- ffcall-1.10-orig/callback/vacall_r/misc.c	2006-11-20 01:36:13.000000000 +0100
+++ ffcall-1.10/callback/vacall_r/misc.c	2006-11-20 01:36:37.000000000 +0100
@@ -14,7 +14,7 @@
 #include "config.h"
 
 /* Room for returning structs according to the pcc non-reentrant struct return convention. */
-__va_struct_buffer_t __va_struct_buffer;
+__va_struct_buffer_t __va_struct_buffer = {0};
 
 int /* no return type, since this never returns */
 #if defined(__STDC__) || defined(__GNUC__) || defined(__cplusplus)
diff -ur ffcall-1.10-orig/callback/vacall_r/vacall-i386-macro.S ffcall-1.10/callback/vacall_r/vacall-i386-macro.S
--- ffcall-1.10-orig/callback/vacall_r/vacall-i386-macro.S	2006-11-20 01:36:13.000000000 +0100
+++ ffcall-1.10/callback/vacall_r/vacall-i386-macro.S	2006-11-20 01:36:37.000000000 +0100
@@ -112,7 +112,7 @@
 	INSN2(test,b	,NUM(24),X1 MEM(esp))
 	INSN1(jne,_	,L42)
 	INSN2(add,l	,NUM(36),R(esp))
-	ret NUM(8)
+	ret
 L42:
 	INSN2(test,b	,NUM(16),X1 MEM(esp))
 	INSN1(je,_	,L3)
@@ -126,8 +126,6 @@
 	INSN1(jmp,_	,INDIR(R(ecx)))
 L44:
 	INSN2(add,l	,NUM(36),R(esp))
-	ret NUM(4)
-	INSN2(add,l	,NUM(36),R(esp))
 	ret
 FUNEND()
 
diff -ur ffcall-1.10-orig/vacall/misc.c ffcall-1.10/vacall/misc.c
--- ffcall-1.10-orig/vacall/misc.c	2006-11-20 01:36:13.000000000 +0100
+++ ffcall-1.10/vacall/misc.c	2006-11-20 01:36:39.000000000 +0100
@@ -40,7 +40,7 @@
 #endif
 
 /* Room for returning structs according to the pcc non-reentrant struct return convention. */
-__va_struct_buffer_t __va_struct_buffer;
+__va_struct_buffer_t __va_struct_buffer = {0};
 
 int /* no return type, since this never returns */
 #if defined(__STDC__) || defined(__GNUC__) || defined(__cplusplus)
