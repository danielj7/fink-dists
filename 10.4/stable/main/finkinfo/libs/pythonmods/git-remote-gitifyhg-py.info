Info2: <<
Package: git-remote-gitifyhg-py%type_pkg[python]
Version: 0.6
Revision: 1
Type: python (2.6 2.7)
Description: Access hg repos as git remotes
DescDetail: <<
This git remote allows you to do local development in a git repository
and push changes to an upstream mercurial repository. It does this
seamlessly and allows pushing and pulling to named branches in the
upstream repository.

It tries not to affect the upstream mercurial repo in any way. Thus,
only a restricted git workflow is available to you.

gitifyhg does not rely on hg-git, and allows you to push and pull to and
from a mercurial repository from right inside git. You do not need to
adapt your git workflow in any way aside from cloning a gitifyhg url.

This is the most robust and usable git to hg bridge currently available.
I have studied as many other projects as I could find, and have covered
as many use cases as possible. It has a large test suite (over 650 lines
and 33 tests), better documentation. I've tested it on several large
mercurial repositories that break other projects.

That said, gitifyhg is not yet complete. Pull requests are higly
desirable. There are 7 tests currently marked as expected failures
documenting low hanging fruit if you want to help out with the project.
Some of the features that are not fully working include:

* anonymous branches are dropped, only the tip of a named branch is kept
* tags can be cloned and pulled, but not pushed
* bookmarks can be cloned and pushed, but not pulled reliably

However, if you're looking for a git-svn type of workflow that allows
you to clone mercurial repositories, work in local git branches, and
rebase your branches, you've found it. Further, all of these problems
are fixable.
<<

DescUsage: <<
gitifyhg is a git remote. Once installed, you can clone any Mercurial
repo using

git clone gitifyhg::<any mercurial url>

Now run git branch -r to see the list of Mercurial branches. If it was a
named branch upstream, it will be named branches/<branchname> in git.
Bookmarks are referred to directly by their name. For now, I recommend
only interacting with named branches.

master automatically tracks the default branch. You can check out any
named mercurial branch using

git checkout --track origin/branches/<branchname>

As a standard git practice, I recommend creating your own local branch
to work on. Then change to the tracked branch and git pull to get
upstream changes. Rebase your working branch onto that branch before
pushing

git checkout -b working_<branchname>
  hack add commit ad naseum
git checkout branches/<branchname>
git pull
git checkout working_<branchname>
git rebase branches/<branchname>
git checkout branches/<branchname>
git merge working_<branchname>
git push

You can create new named upstream branches by giving them the
branches/ prefix

git checkout -b "branches/my_new_branch"
  hack add commit
git push --set_upstream origin branches/my_new_branch

And that's really it, you just have to use standard git commands and the
remote takes care of the details. Just don't do any octopus merges and
you should be good to go.

Note that Mercurial allows spaces in branch, bookmark, and tag names,
while git does not. To keep git from choking if upstream has spaces in
names, gitifyhg will replace them with three underscores and has the
sense to convert between the two formats when pushing and pulling.

If you have any trouble, please let me know via the issue tracker,
preferably with pull requests containing test cases.
<<

Maintainer: Daniel Johnson <daniel@daniel-johnson.org>
License: GPL3
Homepage: http://pypi.python.org/pypi/gitifyhg

#Source: mirror:custom:g/gitifyhg/gitifyhg-%v.tar.gz
Source: https://github.com/buchuki/gitifyhg/archive/%v.tar.gz
SourceRename: gitifyhg-%v.tar.gz
Source-MD5: 1b11de45c49837fdfd396de9e8503f8a

Depends: <<
	git,
	mercurial-py%type_pkg[python],
	path-py%type_pkg[python],
	python%type_pkg[python],
	sh-py%type_pkg[python]
<<
BuildDepends: fink (>= 0.24.12), distribute-py%type_pkg[python]

CompileScript: %p/bin/python%type_raw[python] setup.py build

# Can't figure out how to run tests. They seem to expect gitifyhg to already be installed. :(
#InfoTest: <<
#	TestDepends: pytest-py%type_pkg[python]
#	TestScript: <<
#		%p/bin/py.test-%type_raw[python] test || exit 2
#	<<
#<<

InstallScript: <<
	%p/bin/python%type_raw[python] setup.py install --root=%d
	mv %i/bin/git-remote-gitifyhg %i/bin/git-remote-gitifyhg-py%type_pkg[python]
<<

PostInstScript: <<
	update-alternatives --install %p/bin/git-remote-gitifyhg git-remote-gitifyhg %p/bin/git-remote-gitifyhg-py%type_pkg[python] %type_pkg[python]
<<

PreRmScript: <<
	if [ $1 != "upgrade" ]; then
		update-alternatives --remove git-remote-gitifyhg %p/bin/git-remote-gitifyhg-py%type_pkg[python]
	fi
<<

DocFiles: LICENSE.txt README.rst

CustomMirror: <<
    eur-NL: http://a.pypi.python.org/packages/source/
    nam-US: http://b.pypi.python.org/packages/source/
    eur-DE: http://c.pypi.python.org/packages/source/
    eur-DE: http://d.pypi.python.org/packages/source/
    eur-DE: http://e.pypi.python.org/packages/source/
    eur-DE: http://f.pypi.python.org/packages/source/
<<
<<
