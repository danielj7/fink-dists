Info2: <<
Package: test-mockobject-pm%type_pkg[perl]
Version: 1.20120301
Revision: 1
Description: Emulate troublesome interfaces
Type: perl(5.12.3 5.12.4 5.16.2)
License: Artistic
Maintainer: Benjamin Reed <test-mockobject-pm@fink.raccoonfink.com>

Depends: <<
	perl%type_pkg[perl]-core,
	scalar-list-utils-pm%type_pkg[perl],
	test-exception-pm (>= 0.31-1),
	test-simple-pm%type_pkg[perl] (>= 0.98-1),
	test-warn-pm%type_pkg[perl] (>= 0.23-1),
	universal-isa-pm%type_pkg[perl] (>= 1.20110617-1),
	universal-can-pm%type_pkg[perl] (>= 1.20110614-1)
<<
BuildDepends: <<
	fink (>= 0.30.2-1)
<<

Source: mirror:cpan:modules/by-module/Test/Test-MockObject-%v.tar.gz
Source-MD5: 020ee433827e4e33ffe873eeb3e16048

UseMaxBuildJobs: true

InstallScript: <<
	%{default_script}
	mv %i/share/man %i/lib/perl5/%type_raw[perl]
	find %d -name .packlist -exec rm -rf {} \;
<<
DocFiles: Changes MANIFEST README
UpdatePOD: true

Homepage: http://search.cpan.org/dist/Test-MockObject
DescDetail: <<
It's a simple program that doesn't use any other modules, and
those are easy to test.  More often, testing a program
completely means faking up input to another module, trying to
coax the right output from something you're not supposed to be
testing anyway.

Testing is a lot easier when you can control the entire
environment.  With Test::MockObject, you can get a lot closer.

Test::MockObject allows you to create objects that conform to
particular interfaces with very little code.  You don't have
to reimplement the behavior, just the input and the output.
<<
<<

