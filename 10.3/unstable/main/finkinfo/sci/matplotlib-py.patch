--- matplotlib/lib/matplotlib/__init__.py	Mon Feb 14 16:30:46 2005
+++ matplotlib/lib/matplotlib/__init__.py	Mon Feb 14 08:11:18 2005
@@ -294,7 +294,7 @@
         path = os.environ['MATPLOTLIBDATA']
         if os.path.isdir(path): return path
 
-    path = os.path.join(distutils.sysconfig.PREFIX, 'share', 'matplotlib')
+    path = os.path.join(distutils.sysconfig.PREFIX, 'share', 'matplotlib-py@PYVER@')
     if os.path.isdir(path): return path
 
     path = '/usr/local/share/matplotlib'
@@ -304,11 +304,11 @@
     if os.path.isdir(path): return path
 
     path = os.path.join(os.sep.join(__file__.split(os.sep)[:-1]), 
-                        'share','matplotlib')
+                        'share','matplotlib-py@PYVER@')
     if os.path.isdir(path): return path
 
     path = os.path.join(os.sep.join(__file__.split(os.sep)[:-5]), 
-                        'share','matplotlib')
+                        'share','matplotlib-py@PYVER@')
     if os.path.isdir(path): return path
 
 	
--- matplotlib/setupext.py	Wed Feb  9 11:23:59 2005
+++ matplotlib/setupext.py.orig	Mon Feb 14 16:25:49 2005
@@ -35,7 +35,7 @@
     'win32'  : ['win32_static',],
     'linux2' : ['/usr/local', '/usr',],
     'linux'  : ['/usr/local', '/usr',],
-    'darwin' : ['/usr/local', '/usr', '/sw', '/usr/X11R6'],
+    'darwin' : ['/usr', '/usr/X11R6'],
     'freebsd4' : ['/usr/local', '/usr'],
     'sunos5' : [os.getenv('MPLIB_BASE') or '/usr/local',],
 }
@@ -201,10 +201,10 @@
 	print "Using default library and include directories for Tcl and Tk because a"
 	print "Tk window failed to open.  You may need to define DISPLAY for Tk to work"
 	print "so that setup can determine where your libraries are located."
-	o.tcl_lib = "/usr/local/lib"
-	o.tcl_inc = "/usr/local/include"
-	o.tk_lib = "/usr/local/lib"
-        o.tk_inc = "/usr/local/include"
+        o.tcl_lib = "@PREFIX@/lib"
+        o.tcl_inc = "@PREFIX@/include"
+        o.tk_lib = "@PREFIX@/lib"
+        o.tk_inc = "@PREFIX@/include"
 	o.tkv = ""
     else:
 	tk.withdraw()
@@ -250,53 +250,6 @@
         else:
             raise RuntimeError('No tk/win32 support for this python version yet')
         return
-
-    elif sys.platform == 'darwin' :
-        # this config section lifted directly from Imaging - thanks to
-        # the effbot!
-
-        # First test for a MacOSX/darwin framework install
-        from os.path import join, exists
-        framework_dirs = [
-            '/System/Library/Frameworks/',
-            '/Library/Frameworks',
-            join(os.getenv('HOME'), '/Library/Frameworks')
-        ]
-
-        # Find the directory that contains the Tcl.framwork and Tk.framework
-        # bundles.
-        # XXX distutils should support -F!
-	tk_framework_found = 0
-        for F in framework_dirs:
-            # both Tcl.framework and Tk.framework should be present
-            for fw in 'Tcl', 'Tk':
-                if not exists(join(F, fw + '.framework')):
-                    break
-            else:
-                # ok, F is now directory with both frameworks. Continure
-                # building
-                tk_framework_found = 1
-                break
-        if tk_framework_found:
-            # For 8.4a2, we must add -I options that point inside the Tcl and Tk
-            # frameworks. In later release we should hopefully be able to pass
-            # the -F option to gcc, which specifies a framework lookup path.
-            #
-            tk_include_dirs = [
-                join(F, fw + '.framework', H)
-                for fw in 'Tcl', 'Tk'
-                for H in 'Headers', 'Versions/Current/PrivateHeaders'
-            ]
-
-            # For 8.4a2, the X11 headers are not included. Rather than include a
-            # complicated search, this is a hard-coded path. It could bail out
-            # if X11 libs are not found...
-            # tk_include_dirs.append('/usr/X11R6/include')
-            frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
-            module.include_dirs.extend(tk_include_dirs)
-            module.extra_link_args.extend(frameworks)
-            module.extra_compile_args.extend(frameworks)
-            return
 
     # you're still here? ok we'll try it this way
     o = find_tcltk()
--- matplotlib/setup.py.orig	Thu Mar 31 06:15:08 2005
+++ matploblib/setup.py	Thu Mar 31 10:56:51 2005
@@ -28,19 +28,19 @@
 
 # Render Agg to the GTK canvas
 #BUILD_GTKAGG       = 0
-BUILD_GTKAGG       = 'auto'
+BUILD_GTKAGG       = 1
 
-BUILD_GTK          = 'auto'
+BUILD_GTK          = 1
 
 # build TK GUI with Agg renderer ; requires Tkinter Python extension
 # and Tk includes
 # Use False or 0 if you don't want to build
 #BUILD_TKAGG        = 0
-BUILD_TKAGG        = 'auto'
+BUILD_TKAGG        = 1
 
 # build a small extension to manage the focus on win32 platforms.
-#BUILD_WINDOWING        = 0
-BUILD_WINDOWING        = 'auto'
+BUILD_WINDOWING        = 0
+#BUILD_WINDOWING        = 'auto'
 
 
 VERBOSE =  False # insert lots of diagnostic prints in extension code
@@ -79,7 +79,7 @@
 data.extend(glob.glob('images/*.ppm'))
 data.append('.matplotlibrc')
 
-data_files=[('share/matplotlib', data),]
+data_files=[('share/matplotlib-py@PYVER@', data),]
 
 # Figure out which array packages to provide binary support for
 # and define the NUMERIX value: Numeric, numarray, or both.
@@ -155,37 +155,17 @@
 build_transforms(ext_modules, packages, NUMERIX)
 build_enthought(ext_modules, packages)
 
-if BUILD_GTK:
-    try:
-        import gtk
-    except ImportError:
-        print 'GTK requires pygtk'
-        BUILD_GTK=0
-    except RuntimeError:
-        print 'pygtk present but import failed'
-    
 
 if BUILD_GTK:
     build_gdk(ext_modules, packages, NUMERIX)
     
 if BUILD_GTKAGG:
-    try:
-        import gtk
-    except ImportError:
-        print 'GTKAgg requires pygtk'
-        BUILD_GTKAGG=0
-    except RuntimeError:
-        print 'pygtk present but import failed'
-if BUILD_GTKAGG:
     BUILD_AGG = 1
     build_gtkagg(ext_modules, packages, NUMERIX)
 
 if BUILD_TKAGG:
-    try: import Tkinter
-    except ImportError: print 'TKAgg requires TkInter'
-    else:
-        BUILD_AGG = 1
-        build_tkagg(ext_modules, packages, NUMERIX)
+    BUILD_AGG = 1
+    build_tkagg(ext_modules, packages, NUMERIX)
 
 
 if BUILD_AGG:
@@ -206,6 +186,9 @@
 for mod in ext_modules:
     if VERBOSE:
         mod.extra_compile_args.append('-DVERBOSE')
+    mod.include_dirs.append('@PREFIX@/include')
+    mod.library_dirs.append('@PREFIX@/lib')
+
     
 setup(name="matplotlib",
       version= __version__,
--- matplotlib/src/ft2font.cpp.orig	Fri Mar 18 13:06:34 2005
+++ matplotlib/src/ft2font.cpp	Thu Mar 31 11:08:07 2005
@@ -100,16 +100,16 @@
       
       point = outline.points + first;
       tags  = outline.tags  + first;
-      tag   = FT_CURVE_TAG(tags[0]);
+      tag   = FT_CURVE_TAG(tags[0]);
 
       // A contour cannot start with a cubic control point!
-      if(tag == FT_CURVE_TAG_CUBIC) return Py::Object();
+      if(tag == FT_Curve_Tag_Cubic) return Py::Object();
       
       // check first point to determine origin
-      if( tag == FT_CURVE_TAG_CONIC)
+      if( tag == FT_Curve_Tag_Conic)
 	{
 	  // first point is conic control.  Yes, this happens.
-	  if(FT_CURVE_TAG(outline.tags[last]) == FT_CURVE_TAG_ON)
+	  if(FT_CURVE_TAG(outline.tags[last]) == FT_Curve_Tag_On)
 	    {
 	      // start at last point if it is on the curve
 	      v_start = v_last;
@@ -146,10 +146,10 @@
 	  point++;
 	  tags++;
 	  
-	  tag = FT_CURVE_TAG(tags[0]);
+	  tag = FT_CURVE_TAG(tags[0]);
 	  switch(tag)
 	    {
-	    case FT_CURVE_TAG_ON:  // emit a single line_to
+	    case FT_Curve_Tag_On:  // emit a single line_to
 	      {
 		double x = conv(point->x);
 		double y = flip_y ? -conv(point->y) : conv(point->y);
@@ -162,7 +162,7 @@
 		continue;
 	      }
 	      
-	    case FT_CURVE_TAG_CONIC:  // consume conic arcs
+	    case FT_Curve_Tag_Conic:  // consume conic arcs
 	      {
 		v_control.x = point->x;
 		v_control.y = point->y;
@@ -175,12 +175,12 @@
 		    
 		    point++;
 		    tags++;
-		    tag = FT_CURVE_TAG(tags[0]);
+		    tag = FT_CURVE_TAG(tags[0]);
 		    
 		    vec.x = point->x;
 		    vec.y = point->y;
 		    
-		    if(tag == FT_CURVE_TAG_ON)
+		    if(tag == FT_Curve_Tag_On)
 		      {
 			double xctl = conv(v_control.x);
 			double yctl = flip_y ? -conv(v_control.y) : conv(v_control.y);
@@ -196,7 +196,7 @@
 			continue;
 		      }
 		    
-		    if(tag != FT_CURVE_TAG_CONIC) return Py::Object();
+		    if(tag != FT_Curve_Tag_Conic) return Py::Object();
 		    
 		    v_middle.x = (v_control.x + vec.x) / 2;
 		    v_middle.y = (v_control.y + vec.y) / 2;
@@ -230,11 +230,11 @@
 		goto Close;
 	      }
 	      
-	    default:  // FT_CURVE_TAG_CUBIC
+	    default:  // FT_Curve_Tag_Cubic
 	      {
 		FT_Vector vec1, vec2;
 		
-		if(point + 1 > limit || FT_CURVE_TAG(tags[1]) != FT_CURVE_TAG_CUBIC)
+		if(point + 1 > limit || FT_CURVE_TAG(tags[1]) != FT_Curve_Tag_Cubic)
 		  {
 		    return Py::Object();
 		  }
@@ -624,7 +624,7 @@
     if ( use_kerning && previous && glyph_index ) { 
       FT_Vector delta;
       FT_Get_Kerning( face, previous, glyph_index,
-		      FT_KERNING_DEFAULT, &delta );
+		      ft_kerning_default, &delta );
       pen.x += delta.x;
     }
     error = FT_Load_Glyph( face, glyph_index, FT_LOAD_DEFAULT ); 
