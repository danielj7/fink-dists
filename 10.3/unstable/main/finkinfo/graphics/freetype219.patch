diff -uNr freetype-2.2.1/include/freetype/config/ftoption.h freetype-2.2.1-new/include/freetype/config/ftoption.h
--- freetype-2.2.1/include/freetype/config/ftoption.h	2006-05-11 14:05:49.000000000 -0400
+++ freetype-2.2.1-new/include/freetype/config/ftoption.h	2006-11-09 17:36:43.000000000 -0500
@@ -448,7 +448,7 @@
   /* FT_PARAM_TAG_UNPATENTED_HINTING; or when the debug hook               */
   /* FT_DEBUG_HOOK_UNPATENTED_HINTING is globally activated.               */
   /*                                                                       */
-#define TT_CONFIG_OPTION_UNPATENTED_HINTING
+/* #define TT_CONFIG_OPTION_UNPATENTED_HINTING */
 
 
   /*************************************************************************/
diff -uNr freetype-2.2.1/include/freetype/freetype.h freetype-2.2.1-new/include/freetype/freetype.h
--- freetype-2.2.1/include/freetype/freetype.h	2006-05-12 09:52:24.000000000 -0400
+++ freetype-2.2.1-new/include/freetype/freetype.h	2006-11-09 17:30:21.000000000 -0500
@@ -17,11 +17,7 @@
 
 
 #ifndef FT_FREETYPE_H
-#error "`ft2build.h' hasn't been included yet!"
-#error "Please always use macros to include FreeType header files."
-#error "Example:"
-#error "  #include <ft2build.h>"
-#error "  #include FT_FREETYPE_H"
+#include <ft2build.h>
 #endif
 
 
diff -uNr freetype-2.2.1/src/base/ftapi.c freetype-2.2.1-new/src/base/ftapi.c
--- freetype-2.2.1/src/base/ftapi.c	2002-03-30 08:16:33.000000000 -0500
+++ freetype-2.2.1-new/src/base/ftapi.c	2006-11-09 17:30:21.000000000 -0500
@@ -117,5 +117,17 @@
     FT_Stream_ExitFrame( stream );
   }
                    
+  FT_BASE_DEF( FT_Short )
+  FT_Get_Short( FT_Stream stream )
+  {
+    return FT_GET_SHORT();
+  }
+
+
+  FT_BASE_DEF( FT_Long )
+  FT_Get_Long( FT_Stream stream )
+  {
+    return FT_GET_LONG();
+  }
 
 /* END */
diff -uNr freetype-2.2.1/src/base/ftbase.c freetype-2.2.1-new/src/base/ftbase.c
--- freetype-2.2.1/src/base/ftbase.c	2004-02-25 07:58:54.000000000 -0500
+++ freetype-2.2.1-new/src/base/ftbase.c	2006-11-09 17:30:21.000000000 -0500
@@ -30,6 +30,7 @@
 #include "ftobjs.c"
 #include "ftnames.c"
 #include "ftrfork.c"
+#include "ftapi.c"
 
 #if defined( __APPLE__ ) && !defined ( DARWIN_NO_CARBON )
 #include "ftmac.c"
diff -uNr freetype-2.2.1/src/bdf/bdflib.c freetype-2.2.1-new/src/bdf/bdflib.c
--- freetype-2.2.1/src/bdf/bdflib.c	2006-03-26 01:34:41.000000000 -0500
+++ freetype-2.2.1-new/src/bdf/bdflib.c	2006-11-09 17:30:21.000000000 -0500
@@ -1570,6 +1570,14 @@
         goto Exit;
       }
 
+      /* Check that the encoding is in the range [0, 65535] because       */
+      /* otherwise p->have (a bitmap with static size) overflows.         */
+      if ( p->glyph_enc >= sizeof(p->have) * 8 )
+      {
+        error = BDF_Err_Invalid_File_Format; /* Not the ideal error code */
+        goto Exit;
+      }
+
       /* Check to see whether this encoding has already been encountered. */
       /* If it has then change it to unencoded so it gets added if        */
       /* indicated.                                                       */
diff -uNr freetype-2.2.1/src/pcf/pcfread.c freetype-2.2.1-new/src/pcf/pcfread.c
--- freetype-2.2.1/src/pcf/pcfread.c	2006-01-23 11:35:18.000000000 -0500
+++ freetype-2.2.1-new/src/pcf/pcfread.c	2006-11-09 17:32:22.000000000 -0500
@@ -439,6 +439,14 @@
 
     for ( i = 0; i < nprops; i++ )
     {
+      /* 2006:0500 (mbarnes) - Detect invalid string length.
+       * XXX Is this is best error code to return? */
+      if ( props[i].name < 0 )
+      {
+        error = FT_Err_Invalid_File_Format;
+        goto Bail;
+      }
+
       /* XXX: make atom */
       if ( FT_NEW_ARRAY( properties[i].name,
                          ft_strlen( strings + props[i].name ) + 1 ) )
@@ -451,6 +459,14 @@
 
       if ( props[i].isString )
       {
+	/* 2006:0500 (mbarnes) - Detect invalid string length.
+         * XXX Is this the best error code to return? */
+        if ( props[i].value < 0 )
+        {
+          error = FT_Err_Invalid_File_Format;
+          goto Bail;
+        }
+
         if ( FT_NEW_ARRAY( properties[i].value.atom,
                            ft_strlen( strings + props[i].value ) + 1 ) )
           goto Bail;
diff -uNr freetype-2.2.1/src/sfnt/ttmtx.c freetype-2.2.1-new/src/sfnt/ttmtx.c
--- freetype-2.2.1/src/sfnt/ttmtx.c	2006-03-20 08:34:23.000000000 -0500
+++ freetype-2.2.1-new/src/sfnt/ttmtx.c	2006-11-09 17:30:21.000000000 -0500
@@ -169,7 +169,7 @@
     }
 
     if ( FT_QNEW_ARRAY( *longs,  num_longs  ) ||
-         FT_QNEW_ARRAY( *shorts, num_shorts ) )
+         (num_shorts > 0 && FT_QNEW_ARRAY( *shorts, num_shorts ) ) )
       goto Fail;
 
     if ( FT_FRAME_ENTER( table_len ) )
diff -uNr freetype-2.2.1/src/truetype/ttgload.c freetype-2.2.1-new/src/truetype/ttgload.c
--- freetype-2.2.1/src/truetype/ttgload.c	2006-02-14 15:44:56.000000000 -0500
+++ freetype-2.2.1-new/src/truetype/ttgload.c	2006-11-09 17:35:53.000000000 -0500
@@ -932,7 +932,7 @@
   {
     FT_Error     error;
     FT_Outline*  outline;
-
+    int i;
 
     outline = &loader->gloader->base.outline;
 
@@ -989,6 +989,12 @@
 
     tt_prepare_zone( &loader->zone, &loader->gloader->base,
                      start_point, start_contour );
+    /* Some points are likely touched during execution of
+     * instructions on components. So let's untouch them.
+     */
+    for (i = 0; i < loader->zone.n_points; i++)
+           loader->zone.tags[i] &= ~(FT_CURVE_TAG_TOUCH_X | FT_CURVE_TAG_TOUCH_Y);
+
     loader->zone.n_points += 4;
 
     return TT_Hint_Glyph( loader, 1 );
