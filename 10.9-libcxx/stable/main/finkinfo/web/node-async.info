Package: node-async
Version: 0.8.0
Revision: 1.1
###
BuildDepends: <<
	fink (>= 0.32),
	yui-compressor | node-uglify
<<
RunTimeDepends: <<
	nodejs
<<
###
Source: mirror:debian:/pool/main/n/%n/%n_%v.orig.tar.gz
Source-MD5: 719894b782231cf96cf60113ca0bc6f0
SourceDirectory: async-%v
###
DocFiles: LICENSE README.*
###
CompileScript: <<
if [ "x$(which uglifyjs)" == "x" ]; then \
	jscompressor=yui-compressor; \
else \
	jscompressor=uglifyjs; \
fi; \
$jscompressor lib/async.js > lib/async.min.js
<<
InstallScript: <<
install -d -m0755 %i/lib/nodejs
install -m0644 lib/async.js %i/lib/nodejs
install -m0644 package.json %i/lib/nodejs
<<
###
SplitOff: <<
	Package: libjs-async
	Depends: <<
		javascript-common,
		nodejs
	<<
	DocFiles: LICENSE README.*
	InstallScript: <<
install -d -m0755 %i/share/javascript/async
install -m0644 lib/async.js %i/share/javascript/async
install -m0644 lib/async.min.js %i/share/javascript/async
	<<
	Description: Functions for asynchronous Javascript
	DescDetail: <<
Node is an event-based server-side JavaScript engine.
.
Async is a utility module which provides straight-forward, powerful
functions for working with asynchronous Javascript. Although originally
designed for use with Node, it can also be used directly in the
browser.
.
Async provides around 20 functions that include the usual 'functional'
suspects (map, reduce, filter, forEach...) as well as some common
patterns for asynchronous control flow (parallel, series, waterfall...).
All these functions assume you follow the Node convention of providing
a single callback as the last argument of your async function.
.
This provides async for use directly in web browsers.
	<<
<<
###
Description: Functions for asynchronous Javascript
DescDetail: <<
Node is an event-based server-side JavaScript engine.
.
Async is a utility module which provides straight-forward, powerful
functions for working with asynchronous Javascript. Although originally
designed for use with Node, it can also be used directly in the
browser.
.
Async provides around 20 functions that include the usual 'functional'
suspects (map, reduce, filter, forEach...) as well as some common
patterns for asynchronous control flow (parallel, series, waterfall...).
All these functions assume you follow the Node convention of providing
a single callback as the last argument of your async function.
.
This provides async for use with Node.
<<
###
License: Public Domain
Homepage: https://github.com/caolan/async
Maintainer: Justin F. Hallett <thesin@users.sourceforge.net>
