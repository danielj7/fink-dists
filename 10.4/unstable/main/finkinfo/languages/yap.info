Package: yap
Description: Yet Another Prolog
Version: 6.03
Revision: 3
License: LGPL
Depends: gmp-shlibs (>= 4.1.4-1), libncurses5-shlibs
BuildDepends: texinfo, gmp (>= 4.1.4-1), libncurses5, fink (>= 0.24.12-1)
BuildConflicts: 4ti2-dev
Maintainer: Jesse Alama <jesse.alama@gmail.com>
Source: http://www.dcc.fc.up.pt/~vsc/Yap/yap-6.0.3.tar.gz
Source-MD5: 4fa5903d125b3817eebfd53d054b6512
Homepage: http://www.dcc.fc.up.pt/~vsc/Yap/index.html
InstallScript: <<
  make install DESTDIR=%d
  mkdir -p %i/share/info
  cp docs/dir %i/share/info/dir
  make install_info DESTDIR=%d
  make html DESTDIR=%d
<<
InfoDocs: pillow_doc.info yap.info yap.info-1 yap.info-2 yap.info-3
DescDetail: <<
YAP is a high-performance Prolog compiler developed at CRACS and
LIACC/Universidade do Porto. Its Prolog engine is based in the WAM
(Warren Abstract Machine), with several optimizations for better
performance. YAP follows the Edinburgh tradition, and is largely
compatible with the ISO-Prolog standard and with Quintus and SICStus
Prolog. YAP has been developed since 1985. The original version was
written in assembly, C and Prolog, and achieved high performance on
m68k based machines. The assembly code was used to implement the WAM
emulators. Later emulators supported the VAX, SPARC, and MIPS
architectures. Work on the more recent version of YAP strives at
several goals:

* Portability: The whole system is now written in C. YAP compiles in
popular 32 bit machines, such as Suns and Linux PCs, and in a 64 bit
machines, the Alphas running OSF Unix and Linux.  

* Performance: We have optimised the emulator to obtain performance
comparable to or better than well-known Prolog systems. In fact, the
current version of YAP performs better than the original one, written
in assembly language.

* Robustness: We have tested the system with a large array of Prolog
applications.

* Extensibility: YAP was designed internally from the beginning to
encapsulate manipulation of terms. These principles were used, for
example, to implement a simple and powerful C-interface. The new
version of YAP extends these principles to accomodate extensions to
the unification algorithm, that we believe will be useful to implement
extensions such as constraint programming.

* Completeness: YAP has for a long time provided most builtins
expected from a Edinburgh Prolog implementation. These include I/O
functionality, data-base operations, and modules. Work on YAP aims now
at being compatible with the Prolog standard.

* Openess: We would like to make new development of YAP open to the
user community.

* Research: YAP has been a vehicle for research within and outside our
group. Currently research is going on on parallelisation and
tabulation, and support for Bayesian Networks.
<<
SplitOff: <<
  Package: %N-dev
  BuildDependsOnly: true
  Description: Header files and static libraries for YAP
  Files: include
<<
DescPort: <<
Thanks to JF Mertens for the help.
<<