diff -Naur libssh2-0.17.orig/NEWS libssh2-0.17/NEWS
--- libssh2-0.17.orig/NEWS	2007-08-06 16:49:41.000000000 -0400
+++ libssh2-0.17/NEWS	2007-09-14 18:34:02.000000000 -0400
@@ -1,3 +1,20 @@
+Version 0.18
+------------
+
+- Peter O'Gorman reported how a SCP transfer would hang for him, and it was
+  fairly easy reproducable. One bug was in the transport layer, ignoring to
+  read more data while there was data left even though it couldn't decrypt the
+  data that was left due to it being too little... The other bug was in the
+  channel layer, where the libssh2_channel_receive_window_adjust() function
+  missed to set the state variables at times and thus this function would
+  misbehave on repeated invokes.
+
+- Changed the signature of libssh2_channel_setenv_ex to add const to the
+  "varname" parameter (Dan Fandrich)
+
+- Satish Mittal and David J Sullivan fixed an infinit recv() loop in
+  libssh2_banner_receive()
+
 Version 0.17
 ------------
 Changes since previous version include:
diff -Naur libssh2-0.17.orig/include/libssh2.h libssh2-0.17/include/libssh2.h
--- libssh2-0.17.orig/include/libssh2.h	2007-08-06 16:50:50.000000000 -0400
+++ libssh2-0.17/include/libssh2.h	2007-09-14 18:38:10.000000000 -0400
@@ -79,13 +79,13 @@
 typedef long long libssh2_int64_t;
 #endif
 
-#define LIBSSH2_VERSION "0.17"
+#define LIBSSH2_VERSION "0.18-CVS"
 
 /* The numeric version number is also available "in parts" by using these
    defines: */
 #define LIBSSH2_VERSION_MAJOR 0
-#define LIBSSH2_VERSION_MINOR 17
-#define LIBSSH2_VERSION_PATCH 
+#define LIBSSH2_VERSION_MINOR 18
+#define LIBSSH2_VERSION_PATCH 0
 
 /* This is the numeric version of the libssh2 version number, meant for easier
    parsing and comparions by programs. The LIBSSH2_VERSION_NUM define will
@@ -102,7 +102,7 @@
    and it is always a greater number in a more recent release. It makes
    comparisons with greater than and less than work.
 */
-#define LIBSSH2_VERSION_NUM 0x001100
+#define LIBSSH2_VERSION_NUM 0x001200
 
 /*
  * This is the date and time when the full source package was created. The
@@ -380,7 +380,7 @@
 
 LIBSSH2_API LIBSSH2_CHANNEL *libssh2_channel_forward_accept(LIBSSH2_LISTENER *listener);
 
-LIBSSH2_API int libssh2_channel_setenv_ex(LIBSSH2_CHANNEL *channel, char *varname, unsigned int varname_len, const char *value, unsigned int value_len);
+LIBSSH2_API int libssh2_channel_setenv_ex(LIBSSH2_CHANNEL *channel, const char *varname, unsigned int varname_len, const char *value, unsigned int value_len);
 #define libssh2_channel_setenv(channel, varname, value) libssh2_channel_setenv_ex((channel), (varname), strlen(varname), (value), strlen(value))
 
 LIBSSH2_API int libssh2_channel_request_pty_ex(LIBSSH2_CHANNEL *channel, const char *term, unsigned int term_len, const char *modes, unsigned int modes_len, int width, int height, int width_px, int height_px);
diff -Naur libssh2-0.17.orig/src/channel.c libssh2-0.17/src/channel.c
--- libssh2-0.17.orig/src/channel.c	2007-08-06 16:41:31.000000000 -0400
+++ libssh2-0.17/src/channel.c	2007-09-14 18:34:02.000000000 -0400
@@ -700,7 +700,7 @@
  * Set an environment variable prior to requesting a shell/program/subsystem
  */
 LIBSSH2_API int
-libssh2_channel_setenv_ex(LIBSSH2_CHANNEL * channel, char *varname,
+libssh2_channel_setenv_ex(LIBSSH2_CHANNEL * channel, const char *varname,
                           unsigned int varname_len, const char *value,
                           unsigned int value_len)
 {
@@ -1327,7 +1327,9 @@
                       "Unable to send transfer-window adjustment packet, deferring",
                       0);
         channel->adjust_queue = adjustment;
+        channel->adjust_state = libssh2_NB_state_idle;
     } else {
+        channel->adjust_state = libssh2_NB_state_idle;
         channel->remote.window_size += adjustment;
     }
 
diff -Naur libssh2-0.17.orig/src/session.c libssh2-0.17/src/session.c
--- libssh2-0.17.orig/src/session.c	2007-08-06 16:41:31.000000000 -0400
+++ libssh2-0.17/src/session.c	2007-09-14 18:34:02.000000000 -0400
@@ -135,16 +135,18 @@
             if (errno == EAGAIN) {
                 session->banner_TxRx_total_send = banner_len;
                 return PACKET_EAGAIN;
-            } else {
-                /* Some kinda error */
-                session->banner_TxRx_state = libssh2_NB_state_idle;
-                session->banner_TxRx_total_send = 0;
-                return 1;
             }
+
+            /* Some kinda error */
+            session->banner_TxRx_state = libssh2_NB_state_idle;
+            session->banner_TxRx_total_send = 0;
+            return 1;
         }
 
-        if (ret <= 0)
-            continue;
+        if (ret == 0) {
+            session->socket_state = LIBSSH2_SOCKET_DISCONNECTED;
+            return PACKET_FAIL;
+        }
 
         if (c == '\0') {
             /* NULLs are not allowed in SSH banners */
diff -Naur libssh2-0.17.orig/src/transport.c libssh2-0.17/src/transport.c
--- libssh2-0.17.orig/src/transport.c	2007-08-06 16:46:36.000000000 -0400
+++ libssh2-0.17/src/transport.c	2007-09-14 18:34:02.000000000 -0400
@@ -267,7 +267,6 @@
     int numdecrypt;
     unsigned char block[MAX_BLOCKSIZE];
     int blocksize;
-    int minimum;
     int encrypted = 1;
 
     /*
@@ -293,7 +292,6 @@
             blocksize = 5;      /* not strictly true, but we can use 5 here to
                                    make the checks below work fine still */
         }
-        minimum = p->total_num ? p->total_num - p->data_num : blocksize;
 
         /* read/use a whole big chunk into a temporary area stored in
            the LIBSSH2_SESSION struct. We will decrypt data from that
@@ -308,8 +306,8 @@
         /* if remainbuf turns negative we have a bad internal error */
         assert(remainbuf >= 0);
 
-        if (remainbuf < minimum) {
-            /* If we have less than a minimum left, it is too
+        if (remainbuf < blocksize) {
+            /* If we have less than a blocksize left, it is too
                little data to deal with, read more */
             ssize_t nread;
 
