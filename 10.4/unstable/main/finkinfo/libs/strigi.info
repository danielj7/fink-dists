Info3: <<
Package: strigi
Version: 0.5.11
Revision: 1
Description: Desktop Search
License: LGPL
Maintainer: Benjamin Reed <strig@fink.racoonfink.com>

Depends: <<
	%N-shlibs (= %v-%r),
	dbus (>= 1.2.0-1)
<<
BuildDepends: <<
	bzip2-dev,
	clucene-core (>= 0.9.20-1),
	cmake (>= 2.6.1-2),
	dbus-dev (>= 1.2.0-1),
	fink (>= 0.28.0-1),
	libexiv2,
	libiconv-dev,
	libxml2 (>= 2.6.20-1),
	pkgconfig (>= 0.23-1)
<<
GCC: 4.0

Source: http://www.vandenoever.info/software/strigi/strigi-%v.tar.bz2
Source-MD5: f1fa3488a9c2fe1e8128f4d44088c4ad
SourceDirectory: strigi-%v

CompileScript: <<
#!/bin/sh -ev

	export CMAKE_LIBRARY_PATH="%p/lib" CMAKE_INCLUDE_PATH="%p/include"
	mkdir -p build
	pushd build
		# sqlite and hyperestraier are both busted
		cmake -DENABLE_FAM:BOOL=OFF -DENABLE_SQLITE:BOOL=OFF -DENABLE_HYPERESTRAIER:BOOL=OFF -DCMAKE_INSTALL_PREFIX="%p" ..
		make
	popd
<<

InstallScript: <<
#!/bin/sh -ev

	pushd build
		make -j1 install DESTDIR="%d"
	popd
<<
DocFiles: AUTHORS COPYING ChangeLog NEWS README
SplitOff: <<
	Package: %N-shlibs
	Description: Shared libraries for Strigi
	Depends: <<
		bzip2-shlibs,
		clucene-core-shlibs (>= 0.9.20-1),
		libexiv2-shlibs,
		libiconv,
		libxml2-shlibs (>= 2.6.20-1)
	<<
	DocFiles: COPYING
	Files: <<
		lib/libsearchclient.0*.dylib
		lib/libstreamanalyzer.0*.dylib
		lib/libstreams.0*.dylib
		lib/libstrigihtmlgui.0*.dylib
	<<
	Shlibs: <<
		%p/lib/libsearchclient.0.dylib    0.0.0 strigi-shlibs (>= 0.5.7-1)
		%p/lib/libstreamanalyzer.0.dylib  0.0.0 strigi-shlibs (>= 0.5.5-1)
		%p/lib/libstreams.0.dylib         0.0.0 strigi-shlibs (>= 0.5.5-1)
		%p/lib/libstrigihtmlgui.0.dylib   0.0.0 strigi-shlibs (>= 0.5.5-1)
	<<
<<
SplitOff2: <<
	Package: %N-dev
	Description: Development headers and libraries for Strigi
	Depends: %N (= %v-%r)
	Replaces: %N
	BuildDependsOnly: true
	DocFiles: COPYING
	Files: include lib/pkgconfig lib/*.dylib
<<

Homepage: http://www.vandenoever.info/software/strigi/
DescDetail: <<
Strigi is a small daemon that can index information.  Features:

* Very fast crawling.
* Very small memory footprint.
* No hammering of the system.
* Pluggable backend.
* Communication between daemon and search program over an
  abstract interface, this is currently a simple socket but
  implementation of dbus is a possibility.  There's a small
  perl program in the code as an example of how to query.
  This is so easy that any KDE app could implement this.
* Simple interface for implementing plugins for extracting
  information.
* Calculation of sha1 for every file crawled (allows fast
  finding of duplicates)
<<
<<

