From 0beaf8ae8d9fc9049ac684ca169295357275eb85 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Wed, 18 Nov 2015 13:19:17 +0100
Subject: [PATCH 1/1] std containers of incomplete types are not allowed

Change-Id: Icd916b4b0e2e2ae87014b6b53dbba5e56aa43846
---
 configure.ac       |    1 +
 src/lib/IWAField.h |   11 +++++++----
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/configure.ac b/configure.ac
index a895e66..6c1a498 100644
--- a/configure.ac
+++ b/configure.ac
@@ -88,6 +88,7 @@ AC_CHECK_HEADERS(
         boost/algorithm/string/split.hpp \
         boost/any.hpp \
         boost/bind.hpp \
+        boost/container/deque.hpp \
         boost/function.hpp \
         boost/fusion/adapted/std_pair.hpp \
         boost/fusion/include/adapt_struct.hpp \
diff --git a/src/lib/IWAField.h b/src/lib/IWAField.h
index 3566513..46c2e4c 100644
--- a/src/lib/IWAField.h
+++ b/src/lib/IWAField.h
@@ -13,6 +13,7 @@
 #include <deque>
 #include <stdexcept>
 
+#include <boost/container/deque.hpp>
 #include <boost/optional.hpp>
 #include <boost/shared_ptr.hpp>
 
@@ -71,7 +72,7 @@ namespace detail
 template<IWAField::Tag TagV, typename ValueT, typename Reader>
 class IWAFieldImpl : public IWAField
 {
-  typedef std::deque<ValueT> container_type;
+  typedef boost::container::deque<ValueT> container_type;
 
 public:
   typedef ValueT value_type;
@@ -143,9 +144,11 @@ public:
 
   // conversions
 
-  const std::deque<value_type> &repeated() const
+  // TODO: remove this or replace direct use of std::deque by a typedef
+  const std::deque<value_type> repeated() const
   {
-    return m_values;
+    const std::deque<value_type> values(m_values.begin(), m_values.end());
+    return values;
   }
 
   const boost::optional<value_type> optional() const
@@ -166,7 +169,7 @@ public:
   }
 
 private:
-  std::deque<ValueT> m_values;
+  container_type m_values;
 };
 
 }
-- 
1.7.9.5
From e10e50b1bf37a275757de6b4c3f9791c5ef64742 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Wed, 18 Nov 2015 13:25:22 +0100
Subject: [PATCH 1/1] fix build on OS X

Change-Id: If979903fd6877f1b2f562695399e4cbe97efea2c
---
 src/test/LibetonyekUtilsTest.cpp |   24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/test/LibetonyekUtilsTest.cpp b/src/test/LibetonyekUtilsTest.cpp
index 5c7af4c..5b6a7c6 100644
--- a/src/test/LibetonyekUtilsTest.cpp
+++ b/src/test/LibetonyekUtilsTest.cpp
@@ -73,12 +73,12 @@ void LibetonyekUtilsTest::tearDown()
 
 void LibetonyekUtilsTest::testReadSVar()
 {
-  CPPUNIT_ASSERT_EQUAL(0L, readSVar(makeStream("\x0", 1)));
-  CPPUNIT_ASSERT_EQUAL(-1L, readSVar(makeStream("\x1", 1)));
-  CPPUNIT_ASSERT_EQUAL(1L, readSVar(makeStream("\x2", 1)));
-  CPPUNIT_ASSERT_EQUAL(-2L, readSVar(makeStream("\x3", 1)));
-  CPPUNIT_ASSERT_EQUAL(0x7fffffffL, readSVar(makeStream("\xfe\xff\xff\xff\xf", 5)));
-  CPPUNIT_ASSERT_EQUAL(-0x80000000L, readSVar(makeStream("\xff\xff\xff\xff\xf", 5)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(0), readSVar(makeStream("\x0", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(-1), readSVar(makeStream("\x1", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(1), readSVar(makeStream("\x2", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(-2), readSVar(makeStream("\x3", 1)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(0x7fffffffL), readSVar(makeStream("\xfe\xff\xff\xff\xf", 5)));
+  CPPUNIT_ASSERT_EQUAL(int64_t(-0x80000000L), readSVar(makeStream("\xff\xff\xff\xff\xf", 5)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<int64_t>::max(), readSVar(makeStream("\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<int64_t>::min(), readSVar(makeStream("\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_THROW(readSVar(makeStream("\x80\x80\x80\x80\x80\x80\x80\x80\x80\x2", 10)), std::range_error);
@@ -90,12 +90,12 @@ void LibetonyekUtilsTest::testReadSVar()
 
 void LibetonyekUtilsTest::testReadUVar()
 {
-  CPPUNIT_ASSERT_EQUAL(0UL, readUVar(makeStream("\x0", 1)));
-  CPPUNIT_ASSERT_EQUAL(1UL, readUVar(makeStream("\x1", 1)));
-  CPPUNIT_ASSERT_EQUAL(0x7fUL, readUVar(makeStream("\x7f", 1)));
-  CPPUNIT_ASSERT_EQUAL(0x80UL, readUVar(makeStream("\x80\x1", 2)));
-  CPPUNIT_ASSERT_EQUAL(0x81UL, readUVar(makeStream("\x81\x1", 2)));
-  CPPUNIT_ASSERT_EQUAL(0x12345678UL, readUVar(makeStream("\xf8\xac\xd1\x91\x01", 5)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0), readUVar(makeStream("\x0", 1)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(1), readUVar(makeStream("\x1", 1)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x7f), readUVar(makeStream("\x7f", 1)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x80), readUVar(makeStream("\x80\x1", 2)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x81), readUVar(makeStream("\x81\x1", 2)));
+  CPPUNIT_ASSERT_EQUAL(uint64_t(0x12345678UL), readUVar(makeStream("\xf8\xac\xd1\x91\x01", 5)));
   CPPUNIT_ASSERT_EQUAL(numeric_limits<uint64_t>::max(), readUVar(makeStream("\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1", 10)));
   CPPUNIT_ASSERT_THROW(readUVar(makeStream("\x80\x80\x80\x80\x80\x80\x80\x80\x80\x2", 10)), std::range_error);
   CPPUNIT_ASSERT_THROW(readUVar(makeEmptyStream()), EndOfStreamException);
-- 
1.7.9.5
