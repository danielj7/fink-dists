diff -ru dblatex-0.2.2/setup.py dblatex-0.2.2-patched/setup.py
--- dblatex-0.2.2/setup.py	2006-11-23 23:15:14.000000000 +0100
+++ dblatex-0.2.2-patched/setup.py	2007-01-06 14:32:08.000000000 +0100
@@ -61,39 +61,61 @@
             return
 
         self._install_lib = os.path.normpath(install.install_lib)
+        self._root = install.root
+        if self._root:
+            self._root = os.path.normpath(self._root)
         self._package_base = os.path.join(install.install_data,
                                           self.data_files[0][0])
         self._catalogs = install.catalogs
         self._style = install.style
+        self._use_py_path = install.use_python_path
         print self._package_base
 
         # Build the command line script
         self.build_script()
 
+    def _strip_root(self, *paths):
+        if not(self._root):
+            return paths
+
+        newpaths = []
+        for path in paths:
+            if path.startswith(self._root):
+                newpaths.append(path[len(self._root):])
+            else:
+                newpaths.append(path)
+        return newpaths
+
     def build_script(self):
         script_name = self.scripts[0]
 
         # prepare args for the bang path at the top of the script
         ENV_BIN = '/usr/bin/env'
-        if os.name == 'posix':
+        env_args = ''
+        if self._use_py_path:
+            env_exec = ''
+            py_exec = sys.executable
+        elif os.name == 'posix':
             # Some Solaris platforms may not have an 'env' binary.
             # If /usr/bin/env exists, use '#!/usr/bin/env python'
             # otherwise, use '#!' + sys.executable
             env_exec = os.path.isfile(ENV_BIN) and \
                 os.access(ENV_BIN, os.X_OK) and ENV_BIN or ''
-            env_args = ''
             py_exec = env_exec and 'python' or sys.executable
         else:
             # shouldn't matter on non-POSIX; we'll just use defaults
             env_exec = ENV_BIN
-            env_args = ''
             py_exec = 'python'
 
+        # Retrieve actual installation paths
+        lib_path, package_base = self._strip_root(self._install_lib,
+                                                  self._package_base)
+
         # Just help for non standard installation paths
-        if self._install_lib in sys.path:
+        if lib_path in sys.path:
             lib_path = ""
         else:
-            lib_path = "sys.path.append(r\"%s\")" % self._install_lib
+            lib_path = "sys.path.append(r\"%s\")" % lib_path
 
         if self._catalogs:
             catalogs = self.CATALOGS % (self._catalogs, self._catalogs)
@@ -113,7 +135,7 @@
                         'package': "dblatex",
                         'package_path': "dbtexmf.dblatex",
                         'catalogs': catalogs,
-                        'package_base': self._package_base }
+                        'package_base': package_base }
 
         script = self.SHELL_SCRIPT % script_args
         script_name = os.path.basename(script_name)
@@ -143,13 +165,15 @@
     user_options = install.user_options + \
                    [('catalogs=', None, 'default SGML catalogs'),
                     ('nodeps', None, 'don\'t check the dependencies'),
-                    ('style=', None, 'default style to use')]
+                    ('style=', None, 'default style to use'),
+                    ('use-python-path', None, 'don\'t use env to locate python')]
 
     def initialize_options(self):
         install.initialize_options(self)
         self.catalogs = None
         self.nodeps = None
         self.style = None
+        self.use_python_path = None
 
     def check_util_dependencies(self):
         # First, check non critical graphic tools
@@ -198,10 +222,11 @@
         used_stys.sort()
 
         # Dirty...
-        try:
-            used_stys.remove("truncate")
-        except:
-            pass
+        for f in ("truncate", "elfonts"):
+            try:
+                used_stys.remove(f)
+            except:
+                pass
 
         for sty in used_stys:
             if sty in found_stys:
