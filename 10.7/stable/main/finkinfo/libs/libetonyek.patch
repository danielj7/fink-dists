From 4798f50c01864f02b67629ee717bb379ade3eafd Mon Sep 17 00:00:00 2001
From: Fridrich Å trba <fridrich.strba@bluewin.ch>
Date: Sun, 15 Dec 2013 06:01:57 +0000
Subject: Some versions of boost don't manage to take an address of template

Change-Id: Ida12034d189d2c789d7ecb71a58b7e1e94249139
---
diff --git a/src/lib/KEY2ParserUtils.cpp b/src/lib/KEY2ParserUtils.cpp
index 7b6807e..8af42f8 100644
--- a/src/lib/KEY2ParserUtils.cpp
+++ b/src/lib/KEY2ParserUtils.cpp
@@ -125,7 +125,7 @@ KEYSize KEY2ParserUtils::readSize(const KEYXMLReader &reader)
   return KEYSize(size.second, size.first);
 }
 
-bool KEY2ParserUtils::bool_cast(const char *const value)
+bool KEY2ParserUtils::bool_cast(const char *value)
 {
   KEY2Tokenizer tok;
   switch (tok(value))
@@ -142,6 +142,16 @@ bool KEY2ParserUtils::bool_cast(const char *const value)
   return false;
 }
 
+double KEY2ParserUtils::double_cast(const char *value)
+{
+  return lexical_cast<double, const char *>(value);
+}
+
+int KEY2ParserUtils::int_cast(const char *value)
+{
+  return lexical_cast<int, const char *>(value);
+}
+
 double KEY2ParserUtils::deg2rad(double value)
 {
   // normalize range
diff --git a/src/lib/KEY2ParserUtils.h b/src/lib/KEY2ParserUtils.h
index b324aef..8243a0f 100644
--- a/src/lib/KEY2ParserUtils.h
+++ b/src/lib/KEY2ParserUtils.h
@@ -81,6 +81,8 @@ public:
     * @returns the boolean value of the string
     */
   static bool bool_cast(const char *value);
+  static double double_cast(const char *value);
+  static int int_cast(const char *value);
 
   static double deg2rad(double value);
 
diff --git a/src/lib/KEY2StyleParser.cpp b/src/lib/KEY2StyleParser.cpp
index fc3f0df..ea55502 100644
--- a/src/lib/KEY2StyleParser.cpp
+++ b/src/lib/KEY2StyleParser.cpp
@@ -62,12 +62,12 @@ optional<bool> readBool(const KEYXMLReader &reader, const int type)
 
 optional<double> readDouble(const KEYXMLReader &reader)
 {
-  return readNumber<double>(reader, KEY2Token::f, &lexical_cast<double, const char *>);
+  return readNumber<double>(reader, KEY2Token::f, &KEY2ParserUtils::double_cast);
 }
 
 optional<int> readInt(const KEYXMLReader &reader)
 {
-  return readNumber<int>(reader, KEY2Token::i, &lexical_cast<int, const char *>);
+  return readNumber<int>(reader, KEY2Token::i, &KEY2ParserUtils::double_cast);
 }
 
 optional<KEYColor> readColor(const KEYXMLReader &reader)
