diff -uNr pymol-1.7.5.0.orig/layer0/Feedback.cpp pymol-1.7.5.0/layer0/Feedback.cpp
--- pymol-1.7.5.0.orig/layer0/Feedback.cpp	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/Feedback.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -131,13 +131,13 @@
 
 }
 
-void FeedbackAutoAdd(PyMOLGlobals * G, unsigned int sysmod, unsigned char mask, char *str)
+void FeedbackAutoAdd(PyMOLGlobals * G, unsigned int sysmod, unsigned char mask, const char *str)
 {
   if(Feedback(G, sysmod, mask))
     OrthoAddOutput(G, str);
 }
 
-void FeedbackAdd(PyMOLGlobals * G, char *str)
+void FeedbackAdd(PyMOLGlobals * G, const char *str)
 {
   OrthoAddOutput(G, str);
 }
diff -uNr pymol-1.7.5.0.orig/layer0/Feedback.h pymol-1.7.5.0/layer0/Feedback.h
--- pymol-1.7.5.0.orig/layer0/Feedback.h	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/Feedback.h	2015-03-17 12:09:59.000000000 -0400
@@ -227,8 +227,8 @@
 void FeedbackPop(PyMOLGlobals * G);
 
 void FeedbackAutoAdd(PyMOLGlobals * G, unsigned int sysmod, unsigned char mask,
-                     char *str);
-void FeedbackAdd(PyMOLGlobals * G, char *str);
+                     const char *str);
+void FeedbackAdd(PyMOLGlobals * G, const char *str);
 
 void FeedbackSetMask(PyMOLGlobals * G, unsigned int sysmod, unsigned char mask);
 void FeedbackDisable(PyMOLGlobals * G, unsigned int sysmod, unsigned char mask);
diff -uNr pymol-1.7.5.0.orig/layer0/Isosurf.cpp pymol-1.7.5.0/layer0/Isosurf.cpp
--- pymol-1.7.5.0.orig/layer0/Isosurf.cpp	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/Isosurf.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -96,7 +96,7 @@
 static int IsosurfFindActiveEdges(CIsosurf * II);
 static int IsosurfFindLines(CIsosurf * II);
 static int IsosurfDrawLines(CIsosurf * II);
-static void IsosurfCode(CIsosurf * II, char *bits1, char *bits2);
+static void IsosurfCode(CIsosurf * II, const char *bits1, const char *bits2);
 static int IsosurfDrawPoints(CIsosurf * II);
 static int IsosurfPoints(CIsosurf * II);
 static int IsosurfGradients(PyMOLGlobals * G, CSetting * set1, CSetting * set2,
@@ -437,7 +437,7 @@
 
 
 /*===========================================================================*/
-static void IsosurfCode(CIsosurf * II, char *bits1, char *bits2)
+static void IsosurfCode(CIsosurf * II, const char *bits1, const char *bits2)
 {
   CIsosurf *I = II;
   int c;
diff -uNr pymol-1.7.5.0.orig/layer0/MemoryDebug.cpp pymol-1.7.5.0/layer0/MemoryDebug.cpp
--- pymol-1.7.5.0.orig/layer0/MemoryDebug.cpp	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/MemoryDebug.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -234,9 +234,9 @@
 }
 #endif
 
-unsigned int VLAGetSize(void *ptr)
+unsigned int VLAGetSize(const void *ptr)
 {
-  VLARec *vla;
+  const VLARec *vla;
   vla = &((VLARec *) ptr)[-1];
   return (vla->size);
 }
diff -uNr pymol-1.7.5.0.orig/layer0/MemoryDebug.h pymol-1.7.5.0/layer0/MemoryDebug.h
--- pymol-1.7.5.0.orig/layer0/MemoryDebug.h	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/MemoryDebug.h	2015-03-17 12:09:59.000000000 -0400
@@ -167,7 +167,7 @@
 void *VLASetSize(void *ptr, unsigned int newSize);
 void *VLASetSizeForSure(void *ptr, unsigned int newSize);
 
-unsigned int VLAGetSize(void *ptr);
+unsigned int VLAGetSize(const void *ptr);
 void *VLANewCopy(const void *ptr);
 void MemoryZero(char *p, char *q);
 
diff -uNr pymol-1.7.5.0.orig/layer0/Util.cpp pymol-1.7.5.0/layer0/Util.cpp
--- pymol-1.7.5.0.orig/layer0/Util.cpp	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/Util.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -105,9 +105,9 @@
   *(cc)+=len;
 }
 
-void UtilNPadVLA(char **vla,ov_size *cc,char *str,ov_size len)
+void UtilNPadVLA(char **vla,ov_size *cc,const char *str,ov_size len)
 {
-  char *what;
+  const char *what;
   char *where;
   ov_size n = 0;
   VLACheck((*vla),char,len + *cc +1); 
diff -uNr pymol-1.7.5.0.orig/layer0/Util.h pymol-1.7.5.0/layer0/Util.h
--- pymol-1.7.5.0.orig/layer0/Util.h	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/Util.h	2015-03-17 12:09:59.000000000 -0400
@@ -29,7 +29,7 @@
 char *UtilConcat(char *where,const char *what);
 void UtilNConcat(char *dst, const char *str, ov_size n);
 void UtilConcatVLA(char **vla, ov_size * cc, const char *str);
-void UtilNPadVLA(char **vla, ov_size * cc, char *str, ov_size len);
+void UtilNPadVLA(char **vla, ov_size * cc, const char *str, ov_size len);
 void UtilFillVLA(char **vla, ov_size * cc, char what, ov_size len);
 void UtilNCopy(char *dst, const char *src, ov_size n);        /* up to N-1 chars */
 void UtilNCopyToLower(char *dst, const char *src, ov_size n); /* up to N-1 chars */
diff -uNr pymol-1.7.5.0.orig/layer0/os_gl.cpp pymol-1.7.5.0/layer0/os_gl.cpp
--- pymol-1.7.5.0.orig/layer0/os_gl.cpp	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/os_gl.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -91,7 +91,7 @@
 
 }
 
-int PyMOLCheckOpenGLErr(char *pos)
+int PyMOLCheckOpenGLErr(const char *pos)
 {
   int flag = 0;
   GLenum glerr = glGetError();
diff -uNr pymol-1.7.5.0.orig/layer0/os_gl.h pymol-1.7.5.0/layer0/os_gl.h
--- pymol-1.7.5.0.orig/layer0/os_gl.h	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/os_gl.h	2015-03-17 12:09:59.000000000 -0400
@@ -81,7 +81,7 @@
 #define P_GLUT_SINGLE_MIDDLE 101
 #define P_GLUT_SINGLE_RIGHT 102
 
-int PyMOLCheckOpenGLErr(char *pos);
+int PyMOLCheckOpenGLErr(const char *pos);
 
 
 /* determine whether or not we have a real GLUT */
diff -uNr pymol-1.7.5.0.orig/layer0/os_python.h pymol-1.7.5.0/layer0/os_python.h
--- pymol-1.7.5.0.orig/layer0/os_python.h	2015-03-16 12:26:06.000000000 -0400
+++ pymol-1.7.5.0/layer0/os_python.h	2015-03-17 12:09:59.000000000 -0400
@@ -38,4 +38,7 @@
 
 #include "os_predef.h"
 
+#define PYOBJECT_CALLMETHOD(o, m, ...) PyObject_CallMethod(o, (char*)m, (char*)__VA_ARGS__)
+#define PYOBJECT_CALLFUNCTION(o, ...) PyObject_CallFunction(o, (char*)__VA_ARGS__)
+
 #endif
diff -uNr pymol-1.7.5.0.orig/layer1/Color.cpp pymol-1.7.5.0/layer1/Color.cpp
--- pymol-1.7.5.0.orig/layer1/Color.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Color.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -832,7 +832,7 @@
 
 /*========================================================================*/
 
-static int reg_name(OVLexicon * lex, OVOneToOne * o2o, int index, char *name)
+static int reg_name(OVLexicon * lex, OVOneToOne * o2o, int index, const char *name)
 {
   OVreturn_word result;
   if(OVreturn_IS_OK(result = OVLexicon_GetFromCString(lex, name))) {
diff -uNr pymol-1.7.5.0.orig/layer1/Font.h pymol-1.7.5.0/layer1/Font.h
--- pymol-1.7.5.0.orig/layer1/Font.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Font.h	2015-03-17 12:09:59.000000000 -0400
@@ -40,9 +40,9 @@
 #define SHADERCGOARGVAR ,shaderCGO
 #define SHADERCGOARGV shaderCGO
 
-typedef char *FontRenderOpenGLFn(RenderInfo * info, CFont *, char *text, float size,
+typedef char *FontRenderOpenGLFn(RenderInfo * info, CFont *, const char *text, float size,
                                  float *rpos SHADERCGOARG);
-typedef char *FontRenderRayFn(CRay * ray, CFont *, char *text, float size, float *rpos);
+typedef char *FontRenderRayFn(CRay * ray, CFont *, const char *text, float size, float *rpos);
 
 struct _CFont {
   PyMOLGlobals *G;
diff -uNr pymol-1.7.5.0.orig/layer1/FontGLUT.cpp pymol-1.7.5.0/layer1/FontGLUT.cpp
--- pymol-1.7.5.0.orig/layer1/FontGLUT.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/FontGLUT.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -54,7 +54,7 @@
   glPixelStorei(GL_UNPACK_ALIGNMENT, I->alignment);
 }
 
-static char *FontGLUTRenderOpenGL(RenderInfo * info, CFontGLUT * I, char *st, float size,
+static const char *FontGLUTRenderOpenGL(RenderInfo * info, CFontGLUT * I, const char *st, float size,
                                   float *rpos SHADERCGOARG)
 {
   PyMOLGlobals *G = I->Font.G;
@@ -82,7 +82,7 @@
       if(rpos) {
         if(rpos[0] < _1) {      /* we need to measure the string width before starting to draw */
           float factor = rpos[0] / 2.0F - 0.5F;
-          char *sst = st;
+          const char *sst = st;
           if(factor < _m1)
             factor = _m1;
           if(factor > _0)
@@ -240,7 +240,7 @@
   return st;
 }
 
-static char *FontGLUTRenderRay(CRay * ray, CFontGLUT * I, char *st, float size,
+static const char *FontGLUTRenderRay(CRay * ray, CFontGLUT * I, const char *st, float size,
                                float *rpos)
 {
   PyMOLGlobals *G = I->Font.G;
@@ -288,7 +288,7 @@
 
       if(rpos[0] < _1) {        /* we need to measure the string width before starting to draw */
         float factor = rpos[0] / 2.0F - 0.5F;
-        char *sst = st;
+        const char *sst = st;
         if(factor < _m1)
           factor = -_1;
         if(factor > _0)
diff -uNr pymol-1.7.5.0.orig/layer1/FontType.cpp pymol-1.7.5.0/layer1/FontType.cpp
--- pymol-1.7.5.0.orig/layer1/FontType.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/FontType.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -36,8 +36,8 @@
 #ifdef _PYMOL_INLINE
 __inline__
 #endif
-static char *_FontTypeRenderOpenGL(RenderInfo * info,
-                                   CFontType * I, char *st,
+static const char *_FontTypeRenderOpenGL(RenderInfo * info,
+                                   CFontType * I, const char *st,
                                    float size, int flat, float *rpos SHADERCGOARG)
 {
   PyMOLGlobals *G = I->Font.G;
@@ -65,7 +65,7 @@
 
       if(rpos) {
         if(rpos[0] < _1) {      /* we need to measure the string width before starting to draw */
-          char *sst = st;
+          const char *sst = st;
           while((c = *(sst++))) {
             if(unicnt) {
               if(!(c & 0x80))   /* corrupt UTF8 */
@@ -239,19 +239,19 @@
   return st;
 }
 
-static char *FontTypeRenderOpenGL(RenderInfo * info, CFontType * I, char *st, float size,
+static const char *FontTypeRenderOpenGL(RenderInfo * info, CFontType * I, const char *st, float size,
                                   float *rpos SHADERCGOARG)
 {
   return _FontTypeRenderOpenGL(info, I, st, size, false, rpos SHADERCGOARGVAR);
 }
 
-static char *FontTypeRenderOpenGLFlat(RenderInfo * info, CFontType * I, char *st,
+static const char *FontTypeRenderOpenGLFlat(RenderInfo * info, CFontType * I, const char *st,
                                       float size, float *rpos SHADERCGOARG)
 {
   return _FontTypeRenderOpenGL(info, I, st, size, true, rpos SHADERCGOARGVAR);
 }
 
-static char *FontTypeRenderRay(CRay * ray, CFontType * I, char *st, float size,
+static const char *FontTypeRenderRay(CRay * ray, CFontType * I, const char *st, float size,
                                float *rpos)
 {
   PyMOLGlobals *G = I->Font.G;
@@ -297,11 +297,8 @@
 
       if(rpos[0] < _1) {        /* we need to measure the string width before starting to draw */
         float factor = rpos[0] / 2.0F - 0.5F;
-        char *sst = st;
-        if(factor < _m1)
-          factor = -_1;
-        if(factor > _0)
-          factor = _0;
+        const char *sst = st;
+	factor = (factor < _m1) ? _m1 : (factor > _0) ? _0 : factor;
         while((c = *(sst++))) {
           if(unicnt) {
             if(!(c & 0x80))     /* corrupt UTF8 */
diff -uNr pymol-1.7.5.0.orig/layer1/P.cpp pymol-1.7.5.0/layer1/P.cpp
--- pymol-1.7.5.0.orig/layer1/P.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/P.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -77,9 +77,9 @@
   return len;
 }
 
-static int label_next_token(WordType dst, char **expr)
+static int label_next_token(WordType dst, const char **expr)
 {
-  char *p = *expr;
+  const char *p = *expr;
   char *q = dst;
   char ch;
   int tok_len = 0;
@@ -186,7 +186,7 @@
 }
 
 
-int PLabelExprUsesVariable(PyMOLGlobals * G, char *expr, char *var)
+int PLabelExprUsesVariable(PyMOLGlobals * G, const char *expr, const char *var)
 {
   char ch, quote = 0;
   int escaped = false;
@@ -222,7 +222,7 @@
   return 0;
 }
 
-int PLabelAtomAlt(PyMOLGlobals * G, AtomInfoType * at, char *model, char *expr, int index)
+int PLabelAtomAlt(PyMOLGlobals * G, AtomInfoType * at, const char *model, const char *expr, int index)
 {
   /* alternate C implementation which bypasses Python expressions -- works
      only for simple label formats "..."+property+... */
@@ -234,7 +234,7 @@
   OrthoLineType buffer;
   char ch, quote = 0;
   int escaped = false;
-  char *origexpr = expr;
+  const char *origexpr = expr;
 
   label[0] = 0;
   while((ch = *(expr++))) {
@@ -740,14 +740,14 @@
 
 void PLockStatus(PyMOLGlobals * G)
 {                               /* assumes we have the GIL */
-  PXDecRef(PyObject_CallFunction(G->P_inst->lock_status, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock_status, "O", G->P_inst->cmd));
 }
 
 int PLockStatusAttempt(PyMOLGlobals * G)
 {                               /* assumes we have the GIL */
   int result = true;
   PyObject *got_lock =
-    PyObject_CallFunction(G->P_inst->lock_status_attempt, "O", G->P_inst->cmd);
+    PYOBJECT_CALLFUNCTION(G->P_inst->lock_status_attempt, "O", G->P_inst->cmd);
   if(got_lock) {
     if(!PyInt_AsLong(got_lock)) {
       result = false;
@@ -759,17 +759,17 @@
 
 void PUnlockStatus(PyMOLGlobals * G)
 {                               /* assumes we have the GIL */
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock_status, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock_status, "O", G->P_inst->cmd));
 }
 
 static void PLockGLUT(PyMOLGlobals * G)
 {                               /* assumes we have the GIL */
-  PXDecRef(PyObject_CallFunction(G->P_inst->lock_glut, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock_glut, "O", G->P_inst->cmd));
 }
 
 static void PUnlockGLUT(PyMOLGlobals * G)
 {                               /* assumes we have the GIL */
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock_glut, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock_glut, "O", G->P_inst->cmd));
 }
 
 unsigned int P_glut_thread_id = -1;
@@ -780,7 +780,6 @@
 
 void PCatchInit(void);
 void my_interrupt(int a);
-char *getprogramname(void);
 
 
 /*
@@ -806,7 +805,7 @@
     PRINTFB(G, FB_Python, FB_Errors)
       " PyMOL-Error: can't find module 'vfont'" ENDFB(G);
   } else {
-    result = PyObject_CallMethod(P_vfont, "get_font", "fii", size, face, style);
+    result = PYOBJECT_CALLMETHOD(P_vfont, "get_font", "fii", size, face, style);
   }
   return (PConvAutoNone(result));
 }
@@ -818,7 +817,7 @@
   char *st2;
   PBlockAndUnlockAPI(G);
   if(G->P_inst->complete) {
-    result = PyObject_CallFunction(G->P_inst->complete, "s", str);
+    result = PYOBJECT_CALLFUNCTION(G->P_inst->complete, "s", str);
     if(result) {
       if(PyString_Check(result)) {
         st2 = PyString_AsString(result);
@@ -832,11 +831,11 @@
   return (ret);
 }
 
-int PTruthCallStr0(PyObject * object, char *method)
+int PTruthCallStr0(PyObject * object, const char *method)
 {
   int result = false;
   PyObject *tmp;
-  tmp = PyObject_CallMethod(object, method, "");
+  tmp = PYOBJECT_CALLMETHOD(object, method, "");
   if(tmp) {
     if(PyObject_IsTrue(tmp))
       result = 1;
@@ -845,11 +844,11 @@
   return (result);
 }
 
-int PTruthCallStr(PyObject * object, char *method, char *argument)
+int PTruthCallStr(PyObject * object, const char *method, const char *argument)
 {
   int result = false;
   PyObject *tmp;
-  tmp = PyObject_CallMethod(object, method, "s", argument);
+  tmp = PYOBJECT_CALLMETHOD(object, method, "s", argument);
   if(tmp) {
     if(PyObject_IsTrue(tmp))
       result = 1;
@@ -858,11 +857,11 @@
   return (result);
 }
 
-int PTruthCallStr1i(PyObject * object, char *method, int argument)
+int PTruthCallStr1i(PyObject * object, const char *method, int argument)
 {
   int result = false;
   PyObject *tmp;
-  tmp = PyObject_CallMethod(object, method, "i", argument);
+  tmp = PYOBJECT_CALLMETHOD(object, method, "i", argument);
   if(tmp) {
     if(PyObject_IsTrue(tmp))
       result = 1;
@@ -871,11 +870,11 @@
   return (result);
 }
 
-int PTruthCallStr1s(PyObject * object, char *method, char *argument)
+int PTruthCallStr1s(PyObject * object, const char *method, const char *argument)
 {
   int result = false;
   PyObject *tmp;
-  tmp = PyObject_CallMethod(object, method, "s", argument);
+  tmp = PYOBJECT_CALLMETHOD(object, method, "s", argument);
   if(tmp) {
     if(PyObject_IsTrue(tmp))
       result = 1;
@@ -884,11 +883,11 @@
   return (result);
 }
 
-int PTruthCallStr4i(PyObject * object, char *method, int a1, int a2, int a3, int a4)
+int PTruthCallStr4i(PyObject * object, const char *method, int a1, int a2, int a3, int a4)
 {
   int result = false;
   PyObject *tmp;
-  tmp = PyObject_CallMethod(object, method, "iiii", a1, a2, a3, a4);
+  tmp = PYOBJECT_CALLMETHOD(object, method, "iiii", a1, a2, a3, a4);
   if(tmp) {
     if(PyObject_IsTrue(tmp))
       result = 1;
@@ -974,7 +973,7 @@
     }
     PyList_SetItem(entry, 0, PyInt_FromLong(tot_size)); /* update total size */
     PyList_SetItem(entry, 3, PXIncRef(output));
-    PXDecRef(PyObject_CallMethod(G->P_inst->cmd, "_cache_set",
+    PXDecRef(PYOBJECT_CALLMETHOD(G->P_inst->cmd, "_cache_set",
                                  "OiO", entry, SettingGetGlobal_i(G, cSetting_cache_max),
                                  G->P_inst->cmd));
     /* compute the hash codes */
@@ -993,7 +992,7 @@
     PyObject *output = NULL;
 
     if(OV_OK(CacheCreateEntry(&entry, input))) {
-      output = PyObject_CallMethod(G->P_inst->cmd, "_cache_get",
+      output = PYOBJECT_CALLMETHOD(G->P_inst->cmd, "_cache_get",
                                    "OOO", entry, Py_None, G->P_inst->cmd);
       if(output == Py_None) {
         Py_DECREF(output);
@@ -1030,7 +1029,7 @@
 #else
   /* BEGIN PROPRIETARY CODE SEGMENT (see disclaimer in "os_proprietary.h") */
   PBlock(G);
-  PXDecRef(PyObject_CallFunction(P_sleep, "f", usec / 1000000.0));
+  PXDecRef(PYOBJECT_CALLFUNCTION(P_sleep, "f", usec / 1000000.0));
   PUnblock(G);
   /* END PROPRIETARY CODE SEGMENT */
 #endif
@@ -1050,7 +1049,7 @@
 #else
   /* BEGIN PROPRIETARY CODE SEGMENT (see disclaimer in "os_proprietary.h") */
   PBlock(G);
-  PXDecRef(PyObject_CallFunction(P_sleep, "f", usec / 1000000.0));
+  PXDecRef(PYOBJECT_CALLFUNCTION(P_sleep, "f", usec / 1000000.0));
   PUnblock(G);
   /* END PROPRIETARY CODE SEGMENT */
 #endif
@@ -1072,7 +1071,7 @@
 #else
   /* BEGIN PROPRIETARY CODE SEGMENT (see disclaimer in "os_proprietary.h") */
   PBlockAndUnlockAPI(G);
-  PXDecRef(PyObject_CallFunction(P_sleep, "f", usec / 1000000.0));
+  PXDecRef(PYOBJECT_CALLFUNCTION(P_sleep, "f", usec / 1000000.0));
   PLockAPIAndUnblock(G);
   /* END PROPRIETARY CODE SEGMENT */
 #endif
@@ -1088,16 +1087,16 @@
 
 void PDumpTraceback(PyObject * err)
 {
-  PyObject_CallMethod(P_traceback, "print_tb", "O", err);
+  PYOBJECT_CALLMETHOD(P_traceback, "print_tb", "O", err);
 }
 
 void PDumpException()
 {
-  PyObject_CallMethod(P_traceback, "print_exc", "");
+  PYOBJECT_CALLMETHOD(P_traceback, "print_exc", "");
 }
 
 int PAlterAtomState(PyMOLGlobals * G, float *v, PyCodeObject *expr_co, int read_only,
-                    ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, char *model, int index, int csindex, int state, PyObject * space)
+                    ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, const char *model, int index, int csindex, int state, PyObject * space)
 
 /* assumes Blocked python interpreter */
 {
@@ -1125,7 +1124,7 @@
 
 int PAlterAtom(PyMOLGlobals * G,
                ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, PyCodeObject *expr_co, int read_only,
-               char *model, int index, PyObject * space)
+               const char *model, int index, PyObject * space)
 {
   int result = true;
 
@@ -1148,7 +1147,7 @@
   return result;
 }
 
-int PLabelAtom(PyMOLGlobals * G, ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, PyCodeObject *expr_co, char *model, int index)
+int PLabelAtom(PyMOLGlobals * G, ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, PyCodeObject *expr_co, const char *model, int index)
 {
   int result = true;
   PyObject *P_inst_dict = G->P_inst->dict;
@@ -1204,7 +1203,7 @@
     " PUnlockAPIAsGlut-DEBUG: entered as thread %ld\n", PyThread_get_thread_ident()
     ENDFD;
   PBlock(G);
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock, "iO", 0, G->P_inst->cmd));  /* NOTE this may flush the command buffer! */
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock, "iO", 0, G->P_inst->cmd));  /* NOTE this may flush the command buffer! */
   PLockStatus(G);
   PyMOL_PopValidContext(G->PyMOL);
   PUnlockStatus(G);
@@ -1218,7 +1217,7 @@
     " PUnlockAPIAsGlut-DEBUG: entered as thread %ld\n", PyThread_get_thread_ident()
     ENDFD;
   PBlock(G);
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock, "iO", -1, G->P_inst->cmd)); /* prevents flushing of the buffer */
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock, "iO", -1, G->P_inst->cmd)); /* prevents flushing of the buffer */
   PLockStatus(G);
   PyMOL_PopValidContext(G->PyMOL);
   PUnlockStatus(G);
@@ -1232,12 +1231,12 @@
 
   if(block_if_busy) {
 
-    PXDecRef(PyObject_CallFunction(G->P_inst->lock, "O", G->P_inst->cmd));
+    PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock, "O", G->P_inst->cmd));
 
   } else {                      /* not blocking if PyMOL is busy */
 
     PyObject *got_lock =
-      PyObject_CallFunction(G->P_inst->lock_attempt, "O", G->P_inst->cmd);
+      PYOBJECT_CALLFUNCTION(G->P_inst->lock_attempt, "O", G->P_inst->cmd);
 
     if(got_lock) {
       if(!PyInt_AsLong(got_lock)) {
@@ -1252,7 +1251,7 @@
             result = false;
           } else {
             if(result) {        /* didn't get lock, but not busy, so block and wait for lock */
-              PXDecRef(PyObject_CallFunction(G->P_inst->lock, "O", G->P_inst->cmd));
+              PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock, "O", G->P_inst->cmd));
             }
           }
         }
@@ -1299,7 +1298,7 @@
       "-PLockAPIAsGlut-DEBUG: glut_thread_keep_out %ld\n", PyThread_get_thread_ident()
       ENDFD;
 
-    PXDecRef(PyObject_CallFunction(G->P_inst->unlock, "iO", -1, G->P_inst->cmd));       /* prevent buffer flushing */
+    PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock, "iO", -1, G->P_inst->cmd));       /* prevent buffer flushing */
 #ifndef WIN32
     {
       struct timeval tv;
@@ -1312,7 +1311,7 @@
     }
 #else
     /* BEGIN PROPRIETARY CODE SEGMENT (see disclaimer in "os_proprietary.h") */
-    PXDecRef(PyObject_CallFunction(P_sleep, "f", 0.050));
+    PXDecRef(PYOBJECT_CALLFUNCTION(P_sleep, "f", 0.050));
     /* END PROPRIETARY CODE SEGMENT */
 #endif
 
@@ -1922,12 +1921,12 @@
 
 void PRunStringModule(PyMOLGlobals * G, const char *str)
 {                               /* runs a string in the namespace of the pymol global module */
-  PXDecRef(PyObject_CallFunction(G->P_inst->exec, "Os", P_pymol, str));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->exec, "Os", P_pymol, str));
 }
 
 void PRunStringInstance(PyMOLGlobals * G, const char *str)
 {                               /* runs a string in the namespace of the pymol instance */
-  PXDecRef(PyObject_CallFunction(G->P_inst->exec, "Os", G->P_inst->obj, str));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->exec, "Os", G->P_inst->obj, str));
 }
 
 void WrapperObjectReset(WrapperObject *wo){
@@ -2159,7 +2158,7 @@
 
     {
       PyObject *fn_closure = PyObject_GetAttrString(P_parser, "new_parse_closure");
-      G->P_inst->parse = PyObject_CallFunction(fn_closure, "O", G->P_inst->cmd);
+      G->P_inst->parse = PYOBJECT_CALLFUNCTION(fn_closure, "O", G->P_inst->cmd);
       PXDecRef(fn_closure);
       if(!G->P_inst->parse)
         ErrFatal(G, "PyMOL", "can't create 'parse' function closure");
@@ -2167,7 +2166,7 @@
 
     {
       PyObject *fn_closure = PyObject_GetAttrString(P_parser, "new_complete_closure");
-      G->P_inst->complete = PyObject_CallFunction(fn_closure, "O", G->P_inst->cmd);
+      G->P_inst->complete = PYOBJECT_CALLFUNCTION(fn_closure, "O", G->P_inst->cmd);
       PXDecRef(fn_closure);
       if(!G->P_inst->complete)
         ErrFatal(G, "PyMOL", "can't create 'complete' function closure");
@@ -2240,14 +2239,14 @@
   }
 }
 
-int PPovrayRender(PyMOLGlobals * G, char *header, char *inp, char *file, int width,
+int PPovrayRender(PyMOLGlobals * G, const char *header, const char *inp, const char *file, int width,
                   int height, int antialias)
 {
   PyObject *result;
   int ok;
   PBlock(G);
   result =
-    PyObject_CallMethod(P_povray, "render_from_string", "sssiii", header, inp, file,
+    PYOBJECT_CALLMETHOD(P_povray, "render_from_string", "sssiii", header, inp, file,
                         width, height, antialias);
   ok = PyObject_IsTrue(result);
   Py_DECREF(result);
@@ -2300,7 +2299,7 @@
   int blocked;
   PyObject *ret ;
   blocked = PAutoBlock(G);
-  ret = PyObject_CallFunction(G->P_inst->cmd_do, "s", str);
+  ret = PYOBJECT_CALLFUNCTION(G->P_inst->cmd_do, "s", str);
   Py_XDECREF(ret);
   PAutoUnblock(G, blocked);
 }
@@ -2322,7 +2321,7 @@
     log = PyDict_GetItemString(P_pymol_dict, P_log_file_str);
     if(log && (log != Py_None)) {
       if(format == cPLog_no_flush) {
-        PyObject_CallMethod(log, "write", "s", str);    /* maximize responsiveness (for real-time) */
+        PYOBJECT_CALLMETHOD(log, "write", "s", str);    /* maximize responsiveness (for real-time) */
       } else {
         switch (mode) {
         case cPLog_pml:        /* .pml file */
@@ -2355,8 +2354,8 @@
             break;
           }
         }
-        PyObject_CallMethod(log, "write", "s", buffer);
-        PyObject_CallMethod(log, "flush", "");
+        PYOBJECT_CALLMETHOD(log, "write", "s", buffer);
+        PYOBJECT_CALLMETHOD(log, "flush", "");
       }
     }
     PAutoUnblock(G, blocked);
@@ -2373,7 +2372,7 @@
     blocked = PAutoBlock(G);
     log = PyDict_GetItemString(P_pymol_dict, P_log_file_str);
     if(log && (log != Py_None)) {
-      PyObject_CallMethod(log, "flush", "");
+      PYOBJECT_CALLMETHOD(log, "flush", "");
     }
     PAutoUnblock(G, blocked);
   }
@@ -2408,7 +2407,7 @@
           PRINTFB(G, FB_Python, FB_Errors)
             " PFlush: Uncaught exception.  PyMOL may have a bug.\n" ENDFB(G);
         }
-        PXDecRef(PyObject_CallFunction(G->P_inst->parse, "si", buffer, 0));
+        PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->parse, "si", buffer, 0));
         err = PyErr_Occurred();
         if(err) {
           PyErr_Print();
@@ -2458,7 +2457,7 @@
       PRINTFB(G, FB_Python, FB_Errors)
         " PFlushFast: Uncaught exception.  PyMOL may have a bug.\n" ENDFB(G);
     }
-    PXDecRef(PyObject_CallFunction(G->P_inst->parse, "si", buffer, 0));
+    PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->parse, "si", buffer, 0));
     err = PyErr_Occurred();
     if(err) {
       PyErr_Print();
@@ -2541,10 +2540,10 @@
       PRINTFD(G, FB_Threads)
         " PAutoBlock-DEBUG: clearing 0x%x\n", id ENDFD;
 
-      PXDecRef(PyObject_CallFunction(G->P_inst->lock_c, "O", G->P_inst->cmd));
+      PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock_c, "O", G->P_inst->cmd));
       SavedThread[a].id = -1;
       /* this is the only safe time we can change things */
-      PXDecRef(PyObject_CallFunction(G->P_inst->unlock_c, "O", G->P_inst->cmd));
+      PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock_c, "O", G->P_inst->cmd));
 
       PRINTFD(G, FB_Threads)
         " PAutoBlock-DEBUG: blocked %ld (%d, %d, %d)\n",
@@ -2581,7 +2580,7 @@
     ENDFD;
 
   /* reserve a space while we have a lock */
-  PXDecRef(PyObject_CallFunction(G->P_inst->lock_c, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock_c, "O", G->P_inst->cmd));
   a = MAX_SAVED_THREAD - 1;
   while(a) {
     if((SavedThread + a)->id == -1) {
@@ -2595,7 +2594,7 @@
   }
   PRINTFD(G, FB_Threads)
     " PUnblock-DEBUG: 0x%x stored in slot %d\n", (SavedThread + a)->id, a ENDFD;
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock_c, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock_c, "O", G->P_inst->cmd));
 #ifdef PYMOL_NEW_THREADS
   PyThreadState_Swap(NULL);
   PyEval_ReleaseLock();
@@ -2614,7 +2613,7 @@
 void PBlockAndUnlockAPI(PyMOLGlobals * G)
 {
   PBlock(G);
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock, "iO", 0, G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock, "iO", 0, G->P_inst->cmd));
 }
 
 int PLockAPI(PyMOLGlobals * G, int block_if_busy)
@@ -2622,11 +2621,11 @@
   int result = true;
   PBlock(G);
   if(block_if_busy) {
-    PXDecRef(PyObject_CallFunction(G->P_inst->lock, "O", G->P_inst->cmd));
+    PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock, "O", G->P_inst->cmd));
   } else {                      /* not blocking if PyMOL is busy */
 
     PyObject *got_lock =
-      PyObject_CallFunction(G->P_inst->lock_attempt, "O", G->P_inst->cmd);
+      PYOBJECT_CALLFUNCTION(G->P_inst->lock_attempt, "O", G->P_inst->cmd);
 
     if(got_lock) {
       result = PyInt_AsLong(got_lock);
@@ -2640,18 +2639,18 @@
 void PUnlockAPI(PyMOLGlobals * G)
 {
   PBlock(G);
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock, "iO", 0, G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock, "iO", 0, G->P_inst->cmd));
   PUnblock(G);
 }
 
 static void PUnlockAPIWhileBlocked(PyMOLGlobals * G)
 {
-  PXDecRef(PyObject_CallFunction(G->P_inst->unlock, "iO", -1, G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->unlock, "iO", -1, G->P_inst->cmd));
 }
 
 static void PLockAPIWhileBlocked(PyMOLGlobals * G)
 {
-  PXDecRef(PyObject_CallFunction(G->P_inst->lock, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock, "O", G->P_inst->cmd));
 }
 
 int PTryLockAPIAndUnblock(PyMOLGlobals * G)
@@ -2665,7 +2664,7 @@
 
 void PLockAPIAndUnblock(PyMOLGlobals * G)
 {
-  PXDecRef(PyObject_CallFunction(G->P_inst->lock, "O", G->P_inst->cmd));
+  PXDecRef(PYOBJECT_CALLFUNCTION(G->P_inst->lock, "O", G->P_inst->cmd));
   PUnblock(G);
 }
 
@@ -2679,12 +2678,6 @@
 }
 
 
-/* This function is called by the interpreter to get its own name */
-char *getprogramname(void)
-{
-  return ("PyMOL");
-}
-
 
 /* A static module */
 
diff -uNr pymol-1.7.5.0.orig/layer1/P.h pymol-1.7.5.0/layer1/P.h
--- pymol-1.7.5.0.orig/layer1/P.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/P.h	2015-03-17 12:09:59.000000000 -0400
@@ -54,9 +54,9 @@
 #define cPRunType_label          3
 
 
-int PLabelExprUsesVariable(PyMOLGlobals * G, char *expr, char *var);
+int PLabelExprUsesVariable(PyMOLGlobals * G, const char *expr, const char *var);
 
-int PLabelAtomAlt(PyMOLGlobals * G, AtomInfoType * at, char *model, char *expr,
+int PLabelAtomAlt(PyMOLGlobals * G, AtomInfoType * at, const char *model, const char *expr,
                   int index);
 
 #ifdef _PYMOL_NOPY
@@ -140,10 +140,10 @@
 void PDo(PyMOLGlobals * G, const char *str);  /* accepts multple commands seperated by newlines */
 
 int PAlterAtom(PyMOLGlobals * G, ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, PyCodeObject *expr_co,
-               int read_only, char *model, int index, PyObject * space);
-int PLabelAtom(PyMOLGlobals * G, ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, PyCodeObject *expr_co, char *model, int index);
+               int read_only, const char *model, int index, PyObject * space);
+int PLabelAtom(PyMOLGlobals * G, ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, PyCodeObject *expr_co, const char *model, int index);
 int PAlterAtomState(PyMOLGlobals * G, float *v, PyCodeObject *expr_co, int read_only,
-                    ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, char *model, int index, int csindex, int state, PyObject * space);
+                    ObjectMolecule *obj, CoordSet *cs, AtomInfoType * at, const char *model, int index, int csindex, int state, PyObject * space);
 
 void PLog(PyMOLGlobals * G, const char *str, int lf);
 void PLogFlush(PyMOLGlobals * G);
@@ -191,12 +191,12 @@
 
 int PComplete(PyMOLGlobals * G, char *str, int buf_size);
 
-int PTruthCallStr(PyObject * object, char *method, char *argument);
-int PTruthCallStr0(PyObject * object, char *method);
-int PTruthCallStr1i(PyObject * object, char *method, int argument);
-int PTruthCallStr1s(PyObject * object, char *method, char *argument);
-int PTruthCallStr4i(PyObject * object, char *method, int a1, int a2, int a3, int a4);
-int PPovrayRender(PyMOLGlobals * G, char *header, char *inp, char *file, int width,
+int PTruthCallStr(PyObject * object, const char *method, const char *argument);
+int PTruthCallStr0(PyObject * object, const char *method);
+int PTruthCallStr1i(PyObject * object, const char *method, int argument);
+int PTruthCallStr1s(PyObject * object, const char *method, const char *argument);
+int PTruthCallStr4i(PyObject * object, const char *method, int a1, int a2, int a3, int a4);
+int PPovrayRender(PyMOLGlobals * G, const char *header, const char *inp, const char *file, int width,
                   int height, int antialias);
 int PIsGlutThread(void);
 
@@ -213,7 +213,7 @@
   ObjectMolecule *obj;
   CoordSet *cs;
   AtomInfoType *atomInfo;
-  char *model;
+  const char *model;
   int index;
   int csindex;
   float *v; // for PAlterAtomState x/y/z
diff -uNr pymol-1.7.5.0.orig/layer1/PConv.cpp pymol-1.7.5.0/layer1/PConv.cpp
--- pymol-1.7.5.0.orig/layer1/PConv.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/PConv.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -37,7 +37,7 @@
 {
   PyObject *picklemod = NULL, *obj = NULL;
   ok_assert(1, picklemod = PyImport_ImportModule("cPickle"));
-  obj = PyObject_CallMethod(picklemod, "loads", "O", str);
+  obj = PYOBJECT_CALLMETHOD(picklemod, "loads", "O", str);
 ok_except1:
   Py_XDECREF(picklemod);
   return obj;
@@ -50,7 +50,7 @@
 {
   PyObject *picklemod = NULL, *str = NULL;
   ok_assert(1, picklemod = PyImport_ImportModule("cPickle"));
-  str = PyObject_CallMethod(picklemod, "dumps", "Oi", obj, 1);
+  str = PYOBJECT_CALLMETHOD(picklemod, "dumps", "Oi", obj, 1);
 ok_except1:
   Py_XDECREF(picklemod);
   return str;
@@ -136,7 +136,7 @@
   return (ok);
 }
 
-int PConvAttrToIntArrayInPlace(PyObject * obj, char *attr, int *f, ov_size ll)
+int PConvAttrToIntArrayInPlace(PyObject * obj, const char *attr, int *f, ov_size ll)
 {
   int ok = true;
   PyObject *tmp;
@@ -152,7 +152,7 @@
   return (ok);
 }
 
-int PConvAttrToFloatArrayInPlace(PyObject * obj, char *attr, float *f, ov_size ll)
+int PConvAttrToFloatArrayInPlace(PyObject * obj, const char *attr, float *f, ov_size ll)
 {
   int ok = true;
   PyObject *tmp;
@@ -168,7 +168,7 @@
   return (ok);
 }
 
-int PConvAttrToStrMaxLen(PyObject * obj, char *attr, char *str, ov_size ll)
+int PConvAttrToStrMaxLen(PyObject * obj, const char *attr, char *str, ov_size ll)
 {
   int ok = true;
   PyObject *tmp;
@@ -184,7 +184,7 @@
   return (ok);
 }
 
-int PConvAttrToPtr(PyObject * obj, char *attr, void **cobj)
+int PConvAttrToPtr(PyObject * obj, const char *attr, void **cobj)
 {
   PyObject *tmp;
   int ok = true;
@@ -449,15 +449,6 @@
   return (tmp);
 }
 
-PyObject *PConvStringToPyDictItem(PyObject * dict, const char *key, const char *f)
-{
-  PyObject *tmp;
-  tmp = PyString_FromString(f);
-  PyDict_SetItemString(dict, key, tmp);
-  Py_XDECREF(tmp);
-  return (tmp);
-}
-
 void PConvFloat3ToPyObjAttr(PyObject * obj, const char *attr, const float *v)
 {
   PyObject *t1, *t2, *t3, *tmp;
@@ -1062,10 +1053,10 @@
   return (PConvAutoNone(result));
 }
 
-PyObject *PConvStringVLAToPyList(char *vla)
+PyObject *PConvStringVLAToPyList(const char *vla)
 {
   int a, c, n = 0;
-  char *p;
+  const char *p;
   PyObject *result = NULL;
   p = vla;
   c = VLAGetSize(vla);
diff -uNr pymol-1.7.5.0.orig/layer1/PConv.h pymol-1.7.5.0/layer1/PConv.h
--- pymol-1.7.5.0.orig/layer1/PConv.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/PConv.h	2015-03-17 12:09:59.000000000 -0400
@@ -87,14 +87,14 @@
 /* NOTE: the string routines will write strings up to the specified
  * length, PLUS a NULL...so watch out for array overruns */
 
-int PConvAttrToStrMaxLen(PyObject * obj, char *attr, char *str, ov_size ll);
+int PConvAttrToStrMaxLen(PyObject * obj, const char *attr, char *str, ov_size ll);
 
 int PConvPyListToBitmask(PyObject * obj, int *bitmask, ov_size ll);
 int PConvPyListToExtent(PyObject * obj, float *mn, float *mx);
 
-int PConvAttrToFloatArrayInPlace(PyObject * obj, char *attr, float *ff, ov_size ll);
-int PConvAttrToIntArrayInPlace(PyObject * obj, char *attr, int *ff, ov_size ll);
-int PConvAttrToPtr(PyObject * obj, char *name, void **cobj);
+int PConvAttrToFloatArrayInPlace(PyObject * obj, const char *attr, float *ff, ov_size ll);
+int PConvAttrToIntArrayInPlace(PyObject * obj, const char *attr, int *ff, ov_size ll);
+int PConvAttrToPtr(PyObject * obj, const char *name, void **cobj);
 
 int PConvCObjectToPtr(PyObject * obj, void **ptr);
 int PConvPyListToStrVLAList(PyObject * obj, char **vla, int *n_str);
@@ -132,16 +132,6 @@
 PyObject *PConvLabPosVLAToPyList(LabPosType * vla, int l);
 
 
-/* WARNING: the returned PyObject is unowned - it is intended for use
- * only for efficient detection of changes to dictionary values
- * following evaluation of some expression in the context of the
- * dictionary PAlter, PAlterState, etc. */
-PyObject *PConvFloatToPyDictItem(PyObject * dict, const char *key, float f);
-PyObject *PConvStringToPyDictItem(PyObject * dict, const char *key, const char *f);
-PyObject *PConvIntToPyDictItem(PyObject * dict, const char *key, int i);
-
-/* end WARNING */
-
 void PConvFloat3ToPyObjAttr(PyObject * obj, const char *attr, const float *v);
 void PConvFloatToPyObjAttr(PyObject * obj, const char *attr, float f);
 void PConvIntToPyObjAttr(PyObject * obj, const char *attr, int i);
@@ -160,7 +150,7 @@
 int PConvPyObjectToStrMaxClean(PyObject * object, char *value, int ln);
 
 PyObject *PConvStringListToPyList(int l, char **str);
-PyObject *PConvStringVLAToPyList(char *str);
+PyObject *PConvStringVLAToPyList(const char *str);
 
 void PConv44PyListTo44f(PyObject * src, float *dest);   /* note loss of precision */
 
@@ -190,7 +180,7 @@
 PyObject *PConvPickleLoads(PyObject * str);
 PyObject *PConvPickleDumps(PyObject * obj);
 PyObject *PConvAutoNone(PyObject * result);     /* automatically own Py_None */
-PyObject *PConvIntToPyDictItem(PyObject * dict, char *key, int i);
+PyObject *PConvIntToPyDictItem(PyObject * dict, const char *key, int i);
 
 /* ============================================================ */
 /*
diff -uNr pymol-1.7.5.0.orig/layer1/Ray.cpp pymol-1.7.5.0/layer1/Ray.cpp
--- pymol-1.7.5.0.orig/layer1/Ray.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Ray.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -2808,7 +2808,7 @@
       }
       n++;
     }
-    PXDecRef(PyObject_CallMethod
+    PXDecRef(PYOBJECT_CALLMETHOD
              (G->P_inst->cmd, "_ray_hash_spawn", "OO", info_list, G->P_inst->cmd));
     Py_DECREF(info_list);
   }
@@ -2833,7 +2833,7 @@
   for(a = 0; a < n_thread; a++) {
     PyList_SetItem(info_list, a, PyCObject_FromVoidPtr(Thread + a, NULL));
   }
-  PXDecRef(PyObject_CallMethod
+  PXDecRef(PYOBJECT_CALLMETHOD
            (G->P_inst->cmd, "_ray_anti_spawn", "OO", info_list, G->P_inst->cmd));
   Py_DECREF(info_list);
   PAutoUnblock(G, blocked);
@@ -2874,7 +2874,7 @@
   for(a = 0; a < n_thread; a++) {
     PyList_SetItem(info_list, a, PyCObject_FromVoidPtr(Thread + a, NULL));
   }
-  PXDecRef(PyObject_CallMethod
+  PXDecRef(PYOBJECT_CALLMETHOD
            (G->P_inst->cmd, "_ray_spawn", "OO", info_list, G->P_inst->cmd));
   Py_DECREF(info_list);
   PAutoUnblock(G, blocked);
diff -uNr pymol-1.7.5.0.orig/layer1/Scene.cpp pymol-1.7.5.0/layer1/Scene.cpp
--- pymol-1.7.5.0.orig/layer1/Scene.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Scene.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -1019,7 +1019,10 @@
     *width /= 2.f;
 }
 
-void SceneSetCardInfo(PyMOLGlobals * G, char *vendor, char *renderer, char *version)
+void SceneSetCardInfo(PyMOLGlobals * G,
+    const char *vendor,
+    const char *renderer,
+    const char *version)
 {
   CScene *I = G->Scene;
   UtilNCopy(I->vendor, vendor, sizeof(OrthoLineType) - 1);
diff -uNr pymol-1.7.5.0.orig/layer1/Scene.h pymol-1.7.5.0/layer1/Scene.h
--- pymol-1.7.5.0.orig/layer1/Scene.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Scene.h	2015-03-17 12:09:59.000000000 -0400
@@ -183,7 +183,7 @@
 int SceneMultipick(PyMOLGlobals * G, Multipick * smp);
 void SceneInvalidateCopy(PyMOLGlobals * G, int free_buffer);
 
-void SceneSetCardInfo(PyMOLGlobals * G, char *vendor, char *renderer, char *version);
+void SceneSetCardInfo(PyMOLGlobals * G, const char *vendor, const char *renderer, const char *version);
 void SceneGetCardInfo(PyMOLGlobals * G, char **vendor, char **renderer, char **version);
 int SceneLoadPNG(PyMOLGlobals * G, char *fname, int movie_flag, int stereo, int quiet);
 
diff -uNr pymol-1.7.5.0.orig/layer1/Symmetry.cpp pymol-1.7.5.0/layer1/Symmetry.cpp
--- pymol-1.7.5.0.orig/layer1/Symmetry.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Symmetry.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -107,7 +107,7 @@
 
 #ifndef _PYMOL_NOPY
 #ifdef _PYMOL_XRAY
-static void SymmetryDump44f(PyMOLGlobals * G, float *m, char *prefix)
+static void SymmetryDump44f(PyMOLGlobals * G, const float *m, const char *prefix)
 {
   if(prefix) {
     PRINTF "%s %12.5f %12.5f %12.5f %12.5f\n", prefix, m[0], m[1], m[2], m[3] ENDF(G);
@@ -130,8 +130,6 @@
 #ifndef _PYMOL_NOPY
 #ifdef _PYMOL_XRAY
   PyMOLGlobals *G = I->G;
-  PyObject *mats;
-  ov_size a, l;
   CrystalUpdate(I->Crystal);
   if(!quiet) {
     if(Feedback(G, FB_Symmetry, FB_Blather)) {
@@ -145,7 +143,9 @@
     } else */
   if(P_xray) {
     int blocked = PAutoBlock(G);
-    mats = PyObject_CallMethod(P_xray, "sg_sym_to_mat_list", "s", I->SpaceGroup);
+    ov_size a, l;
+    PyObject *mats;
+    mats = PYOBJECT_CALLMETHOD(P_xray, "sg_sym_to_mat_list", "s", I->SpaceGroup);
     if(mats && (mats != Py_None)) {
       l = PyList_Size(mats);
       VLACheck(I->SymMatVLA, float, 16 * l);
diff -uNr pymol-1.7.5.0.orig/layer1/Text.cpp pymol-1.7.5.0/layer1/Text.cpp
--- pymol-1.7.5.0.orig/layer1/Text.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Text.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -82,7 +82,7 @@
   G->Text->Pos[0] += advance;
 }
 
-void TextSetLabPos(PyMOLGlobals * G, float *pos, LabPosType * labpos, char *text)
+void TextSetLabPos(PyMOLGlobals * G, float *pos, LabPosType * labpos, const char *text)
 {
   if((!labpos) || (!labpos->mode))
     TextSetPos(G, pos);
@@ -133,7 +133,7 @@
   return I->ScreenWorldOffset;
 }
 
-void TextDrawSubStrFast(PyMOLGlobals * G, char *c, int x, int y, int start, int n ORTHOCGOARG)
+void TextDrawSubStrFast(PyMOLGlobals * G, const char *c, int x, int y, int start, int n ORTHOCGOARG)
 {
   c += start;
   TextSetPos2i(G, x, y);
@@ -261,8 +261,8 @@
   *alpha = I->OutlineColor[3];
 }
 
-char *TextRenderOpenGL(PyMOLGlobals * G, RenderInfo * info, int text_id,
-                       char *st, float size, float *rpos, CGO *shaderCGO)
+const char *TextRenderOpenGL(PyMOLGlobals * G, RenderInfo * info, int text_id,
+                       const char *st, float size, float *rpos, CGO *shaderCGO)
 {
   CText *I = G->Text;
   CFont *font;
@@ -287,14 +287,14 @@
   return st;
 }
 
-void TextDrawStrAt(PyMOLGlobals * G, char *st, int x, int y ORTHOCGOARG)
+void TextDrawStrAt(PyMOLGlobals * G, const char *st, int x, int y ORTHOCGOARG)
 {
   CText *I = G->Text;
   TextSetPos3f(G, (float) x, (float) y, 0.0F);
   TextRenderOpenGL(G, NULL, I->Default_ID, st, TEXT_DEFAULT_SIZE, NULL ORTHOCGOARGVAR);
 }
 
-void TextDrawStr(PyMOLGlobals * G, char *st ORTHOCGOARG)
+void TextDrawStr(PyMOLGlobals * G, const char *st ORTHOCGOARG)
 {
   CText *I = G->Text;
   TextRenderOpenGL(G, NULL, I->Default_ID, st, TEXT_DEFAULT_SIZE, NULL ORTHOCGOARGVAR);
@@ -308,8 +308,8 @@
   TextRenderOpenGL(G, NULL, I->Default_ID, st, TEXT_DEFAULT_SIZE, NULL ORTHOCGOARGVAR);
 }
 
-char *TextRenderRay(PyMOLGlobals * G, CRay * ray, int text_id,
-                    char *st, float size, float *rpos)
+const char *TextRenderRay(PyMOLGlobals * G, CRay * ray, int text_id,
+    const char *st, float size, float *rpos)
 {
   CText *I = G->Text;
   CFont *font;
@@ -561,7 +561,7 @@
 
 }
 
-int TextGetFontID(PyMOLGlobals * G, int src, int code, char *name, int mode, int style)
+int TextGetFontID(PyMOLGlobals * G, int src, int code, const char *name, int mode, int style)
 {
   /* first, return the font code if it is already active */
   CText *I = G->Text;
diff -uNr pymol-1.7.5.0.orig/layer1/Text.h pymol-1.7.5.0/layer1/Text.h
--- pymol-1.7.5.0.orig/layer1/Text.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Text.h	2015-03-17 12:09:59.000000000 -0400
@@ -71,12 +71,12 @@
 #define cTextSrcFreeType  2
 
 int TextInit(PyMOLGlobals * G);
-int TextGetFontID(PyMOLGlobals * G, int src, int code, char *name, int size_mode,
+int TextGetFontID(PyMOLGlobals * G, int src, int code, const char *name, int size_mode,
                   int style);
 
 void TextFree(PyMOLGlobals * G);
 
-void TextSetLabPos(PyMOLGlobals * G, float *pos, LabPosType * labpos, char *text);
+void TextSetLabPos(PyMOLGlobals * G, float *pos, LabPosType * labpos, const char *text);
 void TextSetPickColor(PyMOLGlobals * G, int index, int pass);
 
 void TextSetWorldPos(PyMOLGlobals * G, float *pos);
@@ -97,18 +97,18 @@
 void TextGetColorUChar(PyMOLGlobals * G, unsigned char *red,
                        unsigned char *green, unsigned char *blue, unsigned char *alpha);
 
-char *TextRenderOpenGL(PyMOLGlobals * G, RenderInfo * info, int text_id, char *st,
+const char *TextRenderOpenGL(PyMOLGlobals * G, RenderInfo * info, int text_id, const char *st,
                        float size, float *rpos, CGO *shaderCGO);
-char *TextRenderRay(PyMOLGlobals * G, CRay * ray, int text_id, char *st, float size,
+const char *TextRenderRay(PyMOLGlobals * G, CRay * ray, int text_id, const char *st, float size,
                     float *rpos);
 
-void TextDrawStrAt(PyMOLGlobals * G, char *st, int x, int y ORTHOCGOARG);
-void TextDrawStr(PyMOLGlobals * G, char *st ORTHOCGOARG);
+void TextDrawStrAt(PyMOLGlobals * G, const char *st, int x, int y ORTHOCGOARG);
+void TextDrawStr(PyMOLGlobals * G, const char *st ORTHOCGOARG);
 void TextIndent(PyMOLGlobals * G, float x, float y);
 void TextAdvance(PyMOLGlobals * G, float advance);
 void TextSetPos2i(PyMOLGlobals * G, int x, int y);
 void TextDrawChar(PyMOLGlobals * G, char ch ORTHOCGOARG);
-void TextDrawSubStrFast(PyMOLGlobals * G, char *c, int x, int y, int start, int n ORTHOCGOARG);
+void TextDrawSubStrFast(PyMOLGlobals * G, const char *c, int x, int y, int start, int n ORTHOCGOARG);
 void TextDrawCharRepeat(PyMOLGlobals * G, char c, int x, int y, int start, int n ORTHOCGOARG);
 
 #endif
diff -uNr pymol-1.7.5.0.orig/layer1/View.cpp pymol-1.7.5.0/layer1/View.cpp
--- pymol-1.7.5.0.orig/layer1/View.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/View.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -157,7 +157,8 @@
   }
 }
 
-void ViewElemDraw(PyMOLGlobals *G, CViewElem * view_elem, BlockRect *rect, int frames, char *title ORTHOCGOARG)
+void ViewElemDraw(PyMOLGlobals *G, CViewElem * view_elem, BlockRect *rect, int frames,
+    const char *title ORTHOCGOARG)
 {
   if(G->HaveGUI && G->ValidContext && view_elem) {
     int size = VLAGetSize(view_elem);
diff -uNr pymol-1.7.5.0.orig/layer1/View.h pymol-1.7.5.0/layer1/View.h
--- pymol-1.7.5.0.orig/layer1/View.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/View.h	2015-03-17 12:09:59.000000000 -0400
@@ -91,7 +91,7 @@
 int ViewElemInterpolate(PyMOLGlobals * G, CViewElem * first, CViewElem * last,
                         float power, float bias,
                         int simple, float linearity, int hand, float cut);
-void ViewElemDraw(PyMOLGlobals *G, CViewElem * src, BlockRect *rect, int frames, char *title ORTHOCGOARG);
+void ViewElemDraw(PyMOLGlobals *G, CViewElem * src, BlockRect *rect, int frames, const char *title ORTHOCGOARG);
 
 #define cViewElemModifyInsert 1
 #define cViewElemModifyDelete -1
diff -uNr pymol-1.7.5.0.orig/layer1/Wizard.cpp pymol-1.7.5.0/layer1/Wizard.cpp
--- pymol-1.7.5.0.orig/layer1/Wizard.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer1/Wizard.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -184,7 +184,7 @@
     if(I->Wiz[I->Stack]) {
       vla = NULL;
       if(PyObject_HasAttrString(I->Wiz[I->Stack], "get_prompt")) {
-        P_list = PyObject_CallMethod(I->Wiz[I->Stack], "get_prompt", "");
+        P_list = PYOBJECT_CALLMETHOD(I->Wiz[I->Stack], "get_prompt", "");
         if(PyErr_Occurred())
           PyErr_Print();
         if(P_list)
@@ -204,7 +204,7 @@
       I->EventMask = cWizEventPick + cWizEventSelect;
 
       if(PyObject_HasAttrString(I->Wiz[I->Stack], "get_event_mask")) {
-        i = PyObject_CallMethod(I->Wiz[I->Stack], "get_event_mask", "");
+        i = PYOBJECT_CALLMETHOD(I->Wiz[I->Stack], "get_event_mask", "");
         if(PyErr_Occurred())
           PyErr_Print();
         if(!PConvPyIntToInt(i, &I->EventMask))
@@ -213,7 +213,7 @@
       }
 
       if(PyObject_HasAttrString(I->Wiz[I->Stack], "get_panel")) {
-        P_list = PyObject_CallMethod(I->Wiz[I->Stack], "get_panel", "");
+        P_list = PYOBJECT_CALLMETHOD(I->Wiz[I->Stack], "get_panel", "");
         if(PyErr_Occurred())
           PyErr_Print();
         if(P_list) {
@@ -274,7 +274,7 @@
         if(old_wiz) {
           /* then call cleanup, etc. */
           if(PyObject_HasAttrString(old_wiz, "cleanup")) {
-            PXDecRef(PyObject_CallMethod(old_wiz, "cleanup", ""));
+            PXDecRef(PYOBJECT_CALLMETHOD(old_wiz, "cleanup", ""));
             if(PyErr_Occurred())
               PyErr_Print();
           }
@@ -624,7 +624,7 @@
         if(I->Wiz[I->Stack]) {
           if(PyObject_HasAttrString(I->Wiz[I->Stack], "get_menu")) {
             menuList =
-              PyObject_CallMethod(I->Wiz[I->Stack], "get_menu", "s", I->Line[a].code);
+              PYOBJECT_CALLMETHOD(I->Wiz[I->Stack], "get_menu", "s", I->Line[a].code);
             if(PyErr_Occurred())
               PyErr_Print();
           }
diff -uNr pymol-1.7.5.0.orig/layer2/CoordSet.cpp pymol-1.7.5.0/layer2/CoordSet.cpp
--- pymol-1.7.5.0.orig/layer2/CoordSet.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer2/CoordSet.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -1052,10 +1052,9 @@
 #ifdef _PYMOL_NOPY
   return NULL;
 #else
-  int ok = true;
-  PyObject *atom = PyObject_CallMethod(P_chempy, "Atom", "");
+  PyObject *atom = PYOBJECT_CALLMETHOD(P_chempy, "Atom", "");
   if(!atom)
-    ok = ErrMessage(G, "CoordSetAtomToChemPyAtom", "can't create atom");
+    ErrMessage(G, "CoordSetAtomToChemPyAtom", "can't create atom");
   else {
     float tmp_array[6] = { ai->U11, ai->U22, ai->U33, ai->U12, ai->U13, ai->U23 };
 
diff -uNr pymol-1.7.5.0.orig/layer2/ObjectCallback.cpp pymol-1.7.5.0/layer2/ObjectCallback.cpp
--- pymol-1.7.5.0.orig/layer2/ObjectCallback.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer2/ObjectCallback.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -198,7 +198,7 @@
   for(a = 0; a < I->NState; a++)
     if(I->State[a].PObj) {
       if(PyObject_HasAttrString(I->State[a].PObj, "get_extent")) {
-        py_ext = PyObject_CallMethod(I->State[a].PObj, "get_extent", "");
+        py_ext = PYOBJECT_CALLMETHOD(I->State[a].PObj, "get_extent", "");
         if(PyErr_Occurred())
           PyErr_Print();
         if(py_ext) {
diff -uNr pymol-1.7.5.0.orig/layer2/ObjectMolecule.cpp pymol-1.7.5.0/layer2/ObjectMolecule.cpp
--- pymol-1.7.5.0.orig/layer2/ObjectMolecule.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer2/ObjectMolecule.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -11838,7 +11838,7 @@
       PyList_SetItem(info_list, a, PyCObject_FromVoidPtr(Thread + a, NULL));
       n++;
     }
-    PXDecRef(PyObject_CallMethod
+    PXDecRef(PYOBJECT_CALLMETHOD
              (G->P_inst->cmd, "_coordset_update_spawn", "Oi", info_list, n_thread));
     Py_DECREF(info_list);
     PAutoUnblock(G, blocked);
diff -uNr pymol-1.7.5.0.orig/layer2/ObjectMolecule.h pymol-1.7.5.0/layer2/ObjectMolecule.h
--- pymol-1.7.5.0.orig/layer2/ObjectMolecule.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer2/ObjectMolecule.h	2015-03-17 12:09:59.000000000 -0400
@@ -290,7 +290,7 @@
 /* */
 int ObjectMoleculeAreAtomsBonded2(ObjectMolecule * obj0, int a0, ObjectMolecule * obj1,
                                   int a1);
-int ObjectMoleculeIsAtomBondedToName(ObjectMolecule * obj, int a0, char *name, int);
+int ObjectMoleculeIsAtomBondedToName(ObjectMolecule * obj, int a0, const char *name, int);
 void ObjectMoleculeOpRecInit(ObjectMoleculeOpRec * op);
 int ObjectMoleculeNewFromPyList(PyMOLGlobals * G, PyObject * list,
                                 ObjectMolecule ** result);
diff -uNr pymol-1.7.5.0.orig/layer2/ObjectMolecule2.cpp pymol-1.7.5.0/layer2/ObjectMolecule2.cpp
--- pymol-1.7.5.0.orig/layer2/ObjectMolecule2.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer2/ObjectMolecule2.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -767,7 +767,7 @@
  *    1 = must be in same residue
  *   -1 = don't check residue
  */
-int ObjectMoleculeIsAtomBondedToName(ObjectMolecule * obj, int a0, char *name, int same_res)
+int ObjectMoleculeIsAtomBondedToName(ObjectMolecule * obj, int a0, const char *name, int same_res)
 {
   int a2, s;
   PyMOLGlobals * G = obj->Obj.G;
diff -uNr pymol-1.7.5.0.orig/layer2/RepCylBond.cpp pymol-1.7.5.0/layer2/RepCylBond.cpp
--- pymol-1.7.5.0.orig/layer2/RepCylBond.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer2/RepCylBond.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -1413,8 +1413,8 @@
       }
       
       if((ati1->flags & ati2->flags & cAtomFlag_polymer) &&
-          (cartoon_side_chain_helper && (ati1->visRep & ati2->visRep & cRepCartoonBit) ||
-           ribbon_side_chain_helper && (ati1->visRep & ati2->visRep & cRepRibbonBit))) {
+          ((cartoon_side_chain_helper && (ati1->visRep & ati2->visRep & cRepCartoonBit)) ||
+           (ribbon_side_chain_helper && (ati1->visRep & ati2->visRep & cRepRibbonBit)))) {
         RepCylBondFilterBond(marked, ati1, ati2, b1, b2, na_mode, &c1, &c2, &s1, &s2);
       }
       if((s1 || s2)) {
diff -uNr pymol-1.7.5.0.orig/layer3/MovieScene.cpp pymol-1.7.5.0/layer3/MovieScene.cpp
--- pymol-1.7.5.0.orig/layer3/MovieScene.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer3/MovieScene.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -338,7 +338,7 @@
   SceneSetFrame(G, mode, frame);
 #else
   // PBlock fails with SceneSetFrame. Workaround: call from Python
-  PXDecRef(PyObject_CallMethod(G->P_inst->cmd, "set_frame", "ii", frame + 1, mode));
+  PXDecRef(PYOBJECT_CALLMETHOD(G->P_inst->cmd, "set_frame", "ii", frame + 1, mode));
 #endif
 }
 
diff -uNr pymol-1.7.5.0.orig/layer3/PlugIOManager.cpp pymol-1.7.5.0/layer3/PlugIOManager.cpp
--- pymol-1.7.5.0.orig/layer3/PlugIOManager.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer3/PlugIOManager.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -46,7 +46,7 @@
 int PlugIOManagerLoadTraj(PyMOLGlobals * G, ObjectMolecule * obj,
                           const char *fname, int frame,
                           int interval, int average, int start,
-                          int stop, int max, char *sele, int image,
+                          int stop, int max, const char *sele, int image,
                           float *shift, int quiet, const char *plugin_type)
 {
 
@@ -148,7 +148,7 @@
 int PlugIOManagerLoadTraj(PyMOLGlobals * G, ObjectMolecule * obj,
                           const char *fname, int frame,
                           int interval, int average, int start,
-                          int stop, int max, char *sele, int image,
+                          int stop, int max, const char *sele, int image,
                           float *shift, int quiet, const char *plugin_type)
 {
   CPlugIOManager *I = G->PlugIOManager;
diff -uNr pymol-1.7.5.0.orig/layer3/PlugIOManager.h pymol-1.7.5.0/layer3/PlugIOManager.h
--- pymol-1.7.5.0.orig/layer3/PlugIOManager.h	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer3/PlugIOManager.h	2015-03-17 12:09:59.000000000 -0400
@@ -31,7 +31,7 @@
 int PlugIOManagerLoadTraj(PyMOLGlobals * G, ObjectMolecule * obj,
                           const char *fname, int frame,
                           int interval, int average, int start,
-                          int stop, int max, char *sele, int image,
+                          int stop, int max, const char *sele, int image,
                           float *shift, int quiet, const char *plugin_type);
 ObjectMap *PlugIOManagerLoadVol(PyMOLGlobals * G, ObjectMap * obj,
     const char *fname, int state, int quiet, const char *plugin_type);
diff -uNr pymol-1.7.5.0.orig/layer3/Selector.cpp pymol-1.7.5.0/layer3/Selector.cpp
--- pymol-1.7.5.0.orig/layer3/Selector.cpp	2015-03-16 12:26:09.000000000 -0400
+++ pymol-1.7.5.0/layer3/Selector.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -79,7 +79,7 @@
   {"",},
 };
 
-static char *backbone_names[] = {
+static const char *backbone_names[] = {
   // protein
   "CA", "C", "O", "N", "OXT", "H",
   // nucleic acid
@@ -6608,7 +6608,7 @@
 
   SelectorUpdateTable(G, state, -1);
 
-  model = PyObject_CallMethod(P_models, "Indexed", "");
+  model = PYOBJECT_CALLMETHOD(P_models, "Indexed", "");
   if(!model)
     ok = ErrMessage(G, "CoordSetAtomToChemPyAtom", "can't create model");
   if(ok) {
@@ -6808,7 +6808,7 @@
               int b;
               PyObject_SetAttrString(model, "bond", bond_list);
               for(b = 0; b < nBond; b++) {
-                PyObject *bnd = PyObject_CallMethod(P_chempy, "Bond", "");
+                PyObject *bnd = PYOBJECT_CALLMETHOD(P_chempy, "Bond", "");
                 if(bnd) {
                   PConvInt2ToPyObjAttr(bnd, "index", ii1->index);
                   PConvIntToPyObjAttr(bnd, "order", ii1->order);
diff -uNr pymol-1.7.5.0.orig/layer4/Menu.cpp pymol-1.7.5.0/layer4/Menu.cpp
--- pymol-1.7.5.0.orig/layer4/Menu.cpp	2015-03-16 12:26:10.000000000 -0400
+++ pymol-1.7.5.0/layer4/Menu.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -27,14 +27,14 @@
 #include "Ortho.h"
 
 void MenuActivate(PyMOLGlobals * G, int x, int y, int last_x, int last_y, int passive,
-                  char *name, char *sele)
+                  const char *name, const char *sele)
 {
 #ifndef _PYMOL_NOPY
   PyObject *list;
 
   PBlock(G);
 
-  list = PyObject_CallMethod(P_menu, name, "Os", G->P_inst->cmd, sele);
+  list = PYOBJECT_CALLMETHOD(P_menu, name, "Os", G->P_inst->cmd, sele);
   if(PyErr_Occurred())
     PyErr_Print();
   if(list) {
@@ -47,7 +47,7 @@
 }
 
 void MenuActivate3fv(PyMOLGlobals * G, int x, int y, int last_x, int last_y, int passive,
-                     char *name, float *xyz)
+                     const char *name, const float *xyz)
 {
 #ifndef _PYMOL_NOPY
   PyObject *list;
@@ -55,7 +55,7 @@
   PBlock(G);
 
   list =
-    PyObject_CallMethod(P_menu, name, "O(fff)", G->P_inst->cmd, xyz[0], xyz[1], xyz[2]);
+    PYOBJECT_CALLMETHOD(P_menu, name, "O(fff)", G->P_inst->cmd, xyz[0], xyz[1], xyz[2]);
   if(PyErr_Occurred())
     PyErr_Print();
   if(list) {
@@ -67,14 +67,14 @@
 }
 
 void MenuActivate2Arg(PyMOLGlobals * G, int x, int y, int last_x, int last_y, int passive,
-                      char *name, char *sele1, char *sele2)
+                      const char *name, const char *sele1, const char *sele2)
 {
 #ifndef _PYMOL_NOPY
   PyObject *list;
 
   PBlock(G);
 
-  list = PyObject_CallMethod(P_menu, name, "Oss", G->P_inst->cmd, sele1, sele2);
+  list = PYOBJECT_CALLMETHOD(P_menu, name, "Oss", G->P_inst->cmd, sele1, sele2);
   if(PyErr_Occurred())
     PyErr_Print();
   if(list) {
@@ -86,14 +86,14 @@
 }
 
 void MenuActivate1Arg(PyMOLGlobals * G, int x, int y, int last_x, int last_y, int passive,
-                      char *name, char *arg1)
+                      const char *name, const char *arg1)
 {
 #ifndef _PYMOL_NOPY
   PyObject *list;
 
   PBlock(G);
 
-  list = PyObject_CallMethod(P_menu, name, "Os", G->P_inst->cmd, arg1);
+  list = PYOBJECT_CALLMETHOD(P_menu, name, "Os", G->P_inst->cmd, arg1);
   if(PyErr_Occurred())
     PyErr_Print();
   if(list) {
@@ -105,14 +105,14 @@
 }
 
 void MenuActivate0Arg(PyMOLGlobals * G, int x, int y, int last_x, int last_y, int passive,
-                      char *name)
+                      const char *name)
 {
 #ifndef _PYMOL_NOPY
   PyObject *list;
 
   PBlock(G);
 
-  list = PyObject_CallMethod(P_menu, name, "O", G->P_inst->cmd);
+  list = PYOBJECT_CALLMETHOD(P_menu, (char*)name, "O", G->P_inst->cmd);
   if(PyErr_Occurred())
     PyErr_Print();
   if(list) {
diff -uNr pymol-1.7.5.0.orig/layer4/Menu.h pymol-1.7.5.0/layer4/Menu.h
--- pymol-1.7.5.0.orig/layer4/Menu.h	2015-03-16 12:26:10.000000000 -0400
+++ pymol-1.7.5.0/layer4/Menu.h	2015-03-17 12:09:59.000000000 -0400
@@ -21,14 +21,14 @@
 #include"PyMOLGlobals.h"
 
 void MenuActivate(PyMOLGlobals * G, int x, int y, int last_x, int last_y,
-                  int passive, char *name, char *sele);
+                  int passive, const char *name, const char *sele);
 void MenuActivate0Arg(PyMOLGlobals * G, int x, int y, int last_x, int last_y,
-                      int passive, char *name);
+                      int passive, const char *name);
 void MenuActivate1Arg(PyMOLGlobals * G, int x, int y, int last_x, int last_y,
-                      int passive, char *name, char *arg1);
+                      int passive, const char *name, const char *arg1);
 void MenuActivate2Arg(PyMOLGlobals * G, int x, int y, int last_x, int last_y,
-                      int passive, char *name, char *sele1, char *sele2);
+                      int passive, const char *name, const char *sele1, const char *sele2);
 void MenuActivate3fv(PyMOLGlobals * G, int x, int y, int last_x, int last_y, int passive,
-                     char *name, float *xyz);
+                     const char *name, const float *xyz);
 
 #endif
diff -uNr pymol-1.7.5.0.orig/layer5/PyMOL.cpp pymol-1.7.5.0/layer5/PyMOL.cpp
--- pymol-1.7.5.0.orig/layer5/PyMOL.cpp	2015-03-16 12:26:10.000000000 -0400
+++ pymol-1.7.5.0/layer5/PyMOL.cpp	2015-03-17 12:10:24.000000000 -0400
@@ -2220,7 +2220,6 @@
 {
   PyMOLGlobals *G = I->G;
   G->Terminating = true;
-  CShaderMgrFree(G);
   TetsurfFree(G);
   IsosurfFree(G);
   WizardFree(G);
@@ -2239,6 +2238,7 @@
   SceneFree(G);
   MovieScenesFree(G);
   OrthoFree(G);
+  CShaderMgrFree(G);
   SettingFreeGlobal(G);
   CharacterFree(G);
   TextFree(G);
@@ -2271,6 +2271,10 @@
 #endif
     /* take PyMOL down gracefully */
     PyMOLOptions_Free(I->G->Option);
+
+  if(I->G == SingletonPyMOLGlobals)
+    SingletonPyMOLGlobals = NULL;
+
   FreeP(I->G);
   FreeP(I);
   return;
@@ -2553,11 +2557,11 @@
       /* restore working directory if asked to */
       PRunStringModule(G,
                        "if os.environ.has_key('PYMOL_WD'): os.chdir(os.environ['PYMOL_WD'])");
-      PXDecRef(PyObject_CallMethod(G->P_inst->obj, "launch_gui", "O", G->P_inst->obj));
+      PXDecRef(PYOBJECT_CALLMETHOD(G->P_inst->obj, "launch_gui", "O", G->P_inst->obj));
 #endif
       /* END PROPRIETARY CODE SEGMENT */
 
-      PXDecRef(PyObject_CallMethod
+      PXDecRef(PYOBJECT_CALLMETHOD
                (G->P_inst->obj, "adapt_to_hardware", "O", G->P_inst->obj));
       
       if(PyErr_Occurred())
@@ -2578,7 +2582,7 @@
                        "Error: The requested multisampling mode is not available.");
       }
 
-      PXDecRef(PyObject_CallMethod(G->P_inst->obj, "exec_deferred", "O", G->P_inst->obj));
+      PXDecRef(PYOBJECT_CALLMETHOD(G->P_inst->obj, "exec_deferred", "O", G->P_inst->obj));
 
       if(PyErr_Occurred())
         PyErr_Print();
diff -uNr pymol-1.7.5.0.orig/layer5/PyMOL.h pymol-1.7.5.0/layer5/PyMOL.h
--- pymol-1.7.5.0.orig/layer5/PyMOL.h	2015-03-16 12:26:10.000000000 -0400
+++ pymol-1.7.5.0/layer5/PyMOL.h	2015-03-17 12:09:59.000000000 -0400
@@ -111,10 +111,7 @@
 CPyMOLOptions *PyMOLOptions_New(void);
 void PyMOLOptions_Free(CPyMOLOptions * option);
 
-#ifndef PYMOL_NO_PY
 CPyMOLOptions *PyMOLOptions_NewWithPython(int argc, char *argv[]);
-#endif
-
 
 /* PyMOL instance type */
 
@@ -237,9 +234,7 @@
 
 void PyMOL_Start(CPyMOL * I);
 void PyMOL_ConfigureShadersGL(CPyMOL * I);
-#ifndef PYMOL_NO_PY
 void PyMOL_StartWithPython(CPyMOL * I);
-#endif
 void PyMOL_Stop(CPyMOL * I);
 
 
diff -uNr pymol-1.7.5.0.orig/layer5/main.cpp pymol-1.7.5.0/layer5/main.cpp
--- pymol-1.7.5.0.orig/layer5/main.cpp	2015-03-16 12:26:10.000000000 -0400
+++ pymol-1.7.5.0/layer5/main.cpp	2015-03-17 12:09:59.000000000 -0400
@@ -223,7 +223,7 @@
 {
   PyMOLGlobals *G = SingletonPyMOLGlobals;
   PyObject *result = NULL;
-  result = PyObject_CallFunction(G->P_inst->complete, "s", str);
+  result = PYOBJECT_CALLFUNCTION(G->P_inst->complete, "s", str);
   return (result);
 }
 
@@ -377,7 +377,7 @@
      so, no graceful exit is possible -- in fact under Window's we'll
      crash unless we take the drastic way out 
    */
-  if(!G->Terminating) {
+  if(G && !G->Terminating) {
     G->Terminating = true;
     printf(" PyMOL: abrupt program termination.\n");
 
@@ -570,12 +570,12 @@
     if(PyErr_Occurred())
       PyErr_Print();
 
-    PXDecRef(PyObject_CallMethod(G->P_inst->obj, "launch_gui", "O", G->P_inst->obj));
+    PXDecRef(PYOBJECT_CALLMETHOD(G->P_inst->obj, "launch_gui", "O", G->P_inst->obj));
 
     if(PyErr_Occurred())
       PyErr_Print();
 
-    PXDecRef(PyObject_CallMethod
+    PXDecRef(PYOBJECT_CALLMETHOD
              (G->P_inst->obj, "adapt_to_hardware", "O", G->P_inst->obj));
 
     if(PyErr_Occurred())
@@ -602,7 +602,7 @@
         PyErr_Print();
     }
 
-    PXDecRef(PyObject_CallMethod(G->P_inst->obj, "exec_deferred", "O", G->P_inst->obj));
+    PXDecRef(PYOBJECT_CALLMETHOD(G->P_inst->obj, "exec_deferred", "O", G->P_inst->obj));
 
     if(PyErr_Occurred())
       PyErr_Print();
