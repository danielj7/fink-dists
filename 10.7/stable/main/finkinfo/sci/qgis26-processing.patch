Binary files qgis-2.6.1-orig/python/plugins/processing/algs/.DS_Store and qgis-2.6.1-processing/python/plugins/processing/algs/.DS_Store differ
diff -ruN qgis-2.6.1-orig/python/plugins/processing/algs/grass/GrassUtils.py qgis-2.6.1-processing/python/plugins/processing/algs/grass/GrassUtils.py
--- qgis-2.6.1-orig/python/plugins/processing/algs/grass/GrassUtils.py	2015-02-01 15:14:38.000000000 +0900
+++ qgis-2.6.1-processing/python/plugins/processing/algs/grass/GrassUtils.py	2015-02-01 15:18:56.000000000 +0900
@@ -81,25 +81,7 @@
 
     @staticmethod
     def grassPath():
-        if not isWindows() and not isMac():
-            return ''
-
-        folder = ProcessingConfig.getSetting(GrassUtils.GRASS_FOLDER)
-        if folder is None:
-            if isWindows():
-                testfolder = os.path.dirname(QgsApplication.prefixPath())
-                testfolder = os.path.join(testfolder, 'grass')
-                if os.path.isdir(testfolder):
-                    for subfolder in os.listdir(testfolder):
-                        if subfolder.startswith('grass'):
-                            folder = os.path.join(testfolder, subfolder)
-                            break
-            else:
-                folder = os.path.join(QgsApplication.prefixPath(), 'grass')
-                if not os.path.isdir(folder):
-                    folder = '/Applications/GRASS-6.4.app/Contents/MacOS'
-
-        return folder or ''
+        return '@PREFIX@/Applications/GRASS-6.4.app/Contents/MacOS'
 
     @staticmethod
     def grassWinShell():
@@ -240,23 +222,15 @@
 
     @staticmethod
     def prepareGrassExecution(commands):
-        if isWindows():
-            GrassUtils.createGrassScript(commands)
-            command = ['cmd.exe', '/C ', GrassUtils.grassScriptFilename()]
-        else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc'
-            os.putenv('GISRC', gisrc)
-            os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
-            os.putenv('GRASS_BATCH_JOB', GrassUtils.grassBatchJobFilename())
-            GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
-            os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac():
-                command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
-                    + GrassUtils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass64 ' + GrassUtils.grassMapsetFolder() \
-                    + '/PERMANENT'
+        gisrc = userFolder() + os.sep + 'processing.gisrc'
+        os.putenv('GISRC', gisrc)
+        os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
+        os.putenv('GRASS_BATCH_JOB', GrassUtils.grassBatchJobFilename())
+        GrassUtils.createGrassBatchJobFileFromGrassCommands(commands)
+        os.chmod(GrassUtils.grassBatchJobFilename(), stat.S_IEXEC
+                 | stat.S_IREAD | stat.S_IWRITE)
+        command = GrassUtils.grassPath() + os.sep + 'grass.sh ' \
+                     + GrassUtils.grassMapsetFolder() + '/PERMANENT'
 
         return command
 
@@ -350,18 +324,6 @@
 
     @staticmethod
     def checkGrassIsInstalled(ignorePreviousState=False):
-        if isWindows():
-            path = GrassUtils.grassPath()
-            if path == '':
-                return 'GRASS folder is not configured.\nPlease configure \
-                        it before running GRASS algorithms.'
-            cmdpath = os.path.join(path, 'bin', 'r.out.gdal.exe')
-            if not os.path.exists(cmdpath):
-                return 'The specified GRASS folder does not contain a valid \
-                        set of GRASS modules.\n' \
-                        + 'Please, go to the Processing settings dialog, and \
-                        check that the GRASS\n' \
-                        + 'folder is correctly configured'
 
         if not ignorePreviousState:
             if GrassUtils.isGrassInstalled:
diff -ruN qgis-2.6.1-orig/python/plugins/processing/algs/grass7/Grass7Utils.py qgis-2.6.1-processing/python/plugins/processing/algs/grass7/Grass7Utils.py
--- qgis-2.6.1-orig/python/plugins/processing/algs/grass7/Grass7Utils.py	2015-02-01 15:14:38.000000000 +0900
+++ qgis-2.6.1-processing/python/plugins/processing/algs/grass7/Grass7Utils.py	2015-02-01 15:21:21.000000000 +0900
@@ -80,26 +80,7 @@
 
     @staticmethod
     def grassPath():
-        if not isWindows() and not isMac():
-            return ''
-
-        folder = ProcessingConfig.getSetting(Grass7Utils.GRASS_FOLDER)
-        if folder is None:
-            if isWindows():
-                testfolder = os.path.dirname(str(QgsApplication.prefixPath()))
-                testfolder = os.path.join(testfolder, 'grass7')
-                if os.path.isdir(testfolder):
-                    for subfolder in os.listdir(testfolder):
-                        if subfolder.startswith('grass7'):
-                            folder = os.path.join(testfolder, subfolder)
-                            break
-            else:
-                folder = os.path.join(str(QgsApplication.prefixPath()), 'grass7'
-                                      )
-                if not os.path.isdir(folder):
-                    folder = '/Applications/GRASS-7.0.app/Contents/MacOS'
-
-        return folder
+        return '@PREFIX@/Applications/GRASS-7.0.app/Contents/MacOS'
 
     @staticmethod
     def grassWinShell():
@@ -242,24 +223,15 @@
 
     @staticmethod
     def prepareGrass7Execution(commands):
-        if isWindows():
-            Grass7Utils.createGrass7Script(commands)
-            command = ['cmd.exe', '/C ', Grass7Utils.grassScriptFilename()]
-        else:
-            gisrc = userFolder() + os.sep + 'processing.gisrc7'
-            os.putenv('GISRC', gisrc)
-            os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
-            os.putenv('GRASS_BATCH_JOB', Grass7Utils.grassBatchJobFilename())
-            Grass7Utils.createGrass7BatchJobFileFromGrass7Commands(commands)
-            os.chmod(Grass7Utils.grassBatchJobFilename(), stat.S_IEXEC
-                     | stat.S_IREAD | stat.S_IWRITE)
-            if isMac() and os.path.exists(Grass7Utils.grassPath() + os.sep + 'grass70.sh'):
-                command = Grass7Utils.grassPath() + os.sep + 'grass70.sh ' \
-                    + Grass7Utils.grassMapsetFolder() + '/PERMANENT'
-            else:
-                command = 'grass70 ' + Grass7Utils.grassMapsetFolder() \
-                    + '/PERMANENT'
-
+        gisrc = userFolder() + os.sep + 'processing.gisrc'
+        os.putenv('GISRC', gisrc)
+        os.putenv('GRASS_MESSAGE_FORMAT', 'gui')
+        os.putenv('GRASS_BATCH_JOB', Grass7Utils.grassBatchJobFilename())
+        Grass7Utils.createGrass7BatchJobFileFromGrass7Commands(commands)
+        os.chmod(Grass7Utils.grassBatchJobFilename(), stat.S_IEXEC
+                 | stat.S_IREAD | stat.S_IWRITE)
+        command = Grass7Utils.grassPath() + os.sep + 'grass.sh ' \
+                     + Grass7Utils.grassMapsetFolder() + '/PERMANENT'
         return command
 
     @staticmethod
