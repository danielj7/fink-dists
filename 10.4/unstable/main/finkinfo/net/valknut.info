Info2: <<
Package: valknut%type_pkg[-qttoolkit]
Version: 0.3.7
Revision: 1006
Description: Direct Connect protocol QT client
Type: -qttoolkit (-aqua -x11)
License: GPL
Maintainer: Hanspeter Niederstrasser <nieder@users.sourceforge.net>
Depends: <<
	bzip2-shlibs,
	dclib0-unified-shlibs (>= %v-2000),
	libiconv,
	libpng3-shlibs,
	libxml2-shlibs,
	(%type_raw[-qttoolkit] = -x11) qt3-shlibs,
	(%type_raw[-qttoolkit] = -aqua) qt3mac-shlibs,
	(%type_raw[-qttoolkit] = -x11) x11
<<
BuildDepends: <<
	bzip2-dev,
	dclib0-unified (>= %v-2000),
	libiconv-dev,
	libpng3,
	libxml2,
	(%type_raw[-qttoolkit] = -x11) qt3,
	(%type_raw[-qttoolkit] = -aqua) qt3mac,
	system-openssl-dev,
	(%type_raw[-qttoolkit] = -x11) x11-dev
<<
Conflicts: dcgui-qt, dcgui-qt-ssl, valknut, valknut-ssl
BuildConflicts: <<
	(%type_raw[-qttoolkit] = -aqua) qt3,
	(%type_raw[-qttoolkit] = -x11) qt3mac
<<
Replaces: dcgui-qt, dcgui-qt-ssl, valknut, valknut-ssl
Source: http://download.berlios.de/dcgui/%{ni}-%v.tar.bz2
Source2: http://snaggledworks.com/fink/valknutapp-%v.tar.bz2
Source-MD5: 848f9b3f25af15c3f1837133ac4b9415
Source2-MD5: 0b992d4a6bfbbbe18c7788c41bd43e01
SetLDFLAGS: -L%p/lib/system-openssl/lib
ConfigureParams: <<
  --with-libdc=%p \
  (%type_raw[-qttoolkit] = -aqua) --with-qt-dir=%p/lib/qt3mac \
  (%type_raw[-qttoolkit] = -aqua) --with-qt-includes=%p/lib/qt3mac/include \
  (%type_raw[-qttoolkit] = -aqua) --enable-mac \
  (%type_raw[-qttoolkit] = -aqua) --enable-osx \
  (%type_raw[-qttoolkit] = -x11) --with-qt-dir=%p \
  (%type_raw[-qttoolkit] = -x11) --with-qt-includes=%p/include/qt \
  --with-ssl-dir=%p/lib/system-openssl \
  --disable-dependency-tracking
<<
GCC: 4.0
CompileScript: <<
  #!/bin/sh -ev
  ./configure %c
  /usr/bin/make -w
<<
InstallScript: <<
#!/bin/sh -ev
	if [ "%type_raw[-qttoolkit]" == "-x11" ]; then
		/usr/bin/make -w install DESTDIR=%d
	else
#
# Based on NYZetas Howto:
# http://www.stud.ntnu.no/~chrisj/download/howto/valknut_howto.html
# and ravemax's original INSTALL.MAC

QTMACDIR=%p/lib/qt3mac
TS_TO_QM=${QTMACDIR}/bin/lrelease
TS_DIR=valknut/ts
ICONS_DIR=valknut/icons
V_NAME=Valknut
V_VERSION=%v
V_SERIAL=20050217

#Starting generation

APP_NAME=${V_NAME}.app

#APP DIR
echo "Creating                   ${APP_NAME}";
/bin/mkdir ${APP_NAME}

# Translation files
TRANS_DIR=${APP_NAME}/translation;
/bin/mkdir ${TRANS_DIR};
echo "Generating path:           ${TRANS_DIR}";
for i in ${TS_DIR}/*.ts; do
${TS_TO_QM} $i;
/bin/mv ${TS_DIR}/$(basename $i ts)qm ${TRANS_DIR}
done
echo "Copying from               ${TS_DIR}";

# Icons
/bin/mkdir ${APP_NAME}/icons ${APP_NAME}/icons/{user,user/default,emot,emot/default,appl,appl/default}
echo "Generating path:           ${APP_NAME}/icons";
echo "Generating path:           ${APP_NAME}/icons/user/default";
echo "Generating path:           ${APP_NAME}/icons/emot/default";
echo "Generating path:           ${APP_NAME}/icons/appl/default";
echo "Copying from               ${ICONS_DIR}";
/bin/cp ${ICONS_DIR}/*.x* ${APP_NAME}/icons/appl/default
/bin/mv ${APP_NAME}/icons/appl/default/emoticons.* ${APP_NAME}/icons/emot/default
/bin/mv ${APP_NAME}/icons/appl/default/usericons.* ${APP_NAME}/icons/user/default

# Contents
CNT_DIR=${APP_NAME}/Contents;
/bin/mkdir ${CNT_DIR};
echo "Generating path:           ${CNT_DIR}";
echo "Installing file:           PkgInfo";
/bin/cp PkgInfo ${CNT_DIR}/PkgInfo
echo "Installing file:           Info.plist";
/bin/cp Info.plist ${CNT_DIR}/Info.plist

# Copy the executable
MACOS_DIR=${CNT_DIR}/MacOS;
echo "Generating path:           ${MACOS_DIR}"
/bin/mkdir ${MACOS_DIR}
echo "Generating file:           PkgInfo";
echo "Copying from               valknut/";
/bin/cp valknut/valknut ${MACOS_DIR}/valknut
echo "Stripping                  valknut";
/usr/bin/strip ${MACOS_DIR}/valknut

# Copy Icon
RSC_DIR=${CNT_DIR}/Resources
echo "Generating path:           ${RSC_DIR}"
/bin/mkdir ${RSC_DIR}
echo "Copying from               ${ICONS_DIR}";
/bin/cp ${ICONS_DIR}/icon_128x128.icns $RSC_DIR/${V_NAME}.icns

# Move the .app bundle to %p/Applications
/usr/bin/install -d -m 755 %i/Applications
/bin/mv -f ${APP_NAME} %i/Applications/${APP_NAME}
	fi
<<
PostInstScript: <<
if [ "%type_raw[-qttoolkit]" == "-aqua" ]; then
  if ! test -e /Applications/Fink; then
    /usr/bin/install -d -m 755 /Applications/Fink
  fi
    /bin/ln -s '%p/Applications/Valknut.app' /Applications/Fink/
fi
<<
PostRmScript: <<
if [ "%type_raw[-qttoolkit]" == "-aqua" ]; then
  /bin/rm -f '/Applications/Fink/Valknut.app'
fi
<<
DocFiles: AUTHORS ChangeLog COPYING INSTALL NEWS README
Homepage: http://dcgui.berlios.de/index.php
DescDetail: <<
THIS PACKAGE IS HIGHLY EXPERIMENTAL, ESPECIALLY THE AQUA VARIANT
ONLY TRY IT IF YOU KNOW WHAT YOU'RE DOING

Valknut is a program the uses the Direct Connect protocol. It is 
compatible with other DC clients, such as the original DC from 
Neomodus, and DC++.

Valknut replaces the packages dcgui-qt and dcgui-qt-ssl that were
renamed after version 0.3.2.
<<
DescUsage: <<
For Aqua Version:
-----------------
Double click the Application in /Applications/Fink

For X11 Version:
----------------
Normally, just use "valknut" from the command line.
Use "valknut --disable-tray" to get rid of the little icon
if using quartz-wm or another dockless window manager.

Valknut >= 0.3.5 crashes the X11 server when run in rootless mode 
if using a window manager besides quartz-wm.  It runs fine under any 
manager in full-screen mode.  If you use xorg or xfree86, install the 
package quartz-wm and call it from your xinitrc if you want to run 
Valknut.  Alternatively, run the native Aqua version which doesn't need
X11.
<<
DescPackaging: <<
No longer Depends: on a specific %v-%r of dclib0.  Just keep at dclib0-%v >= than current valknut-%v.

Now links to system OpenSSL to avoid licensing issues.

Uses its own PostInst and PostRm scripts rather than AppBundles because AppBundles can not be variantized and the X11 version does not build a .app package.
<<
<<

 	  	 
