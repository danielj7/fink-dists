--- matplotlib/lib/matplotlib/__init__.py	Mon Feb 14 16:30:46 2005
+++ matplotlib/lib/matplotlib/__init__.py	Mon Feb 14 08:11:18 2005
@@ -294,7 +294,7 @@
         path = os.environ['MATPLOTLIBDATA']
         if os.path.isdir(path): return path
 
-    path = os.path.join(distutils.sysconfig.PREFIX, 'share', 'matplotlib')
+    path = os.path.join(distutils.sysconfig.PREFIX, 'share', 'matplotlib-py@PYVER@')
     if os.path.isdir(path): return path
 
     path = '/usr/local/share/matplotlib'
@@ -304,11 +304,11 @@
     if os.path.isdir(path): return path
 
     path = os.path.join(os.sep.join(__file__.split(os.sep)[:-1]), 
-                        'share','matplotlib')
+                        'share','matplotlib-py@PYVER@')
     if os.path.isdir(path): return path
 
     path = os.path.join(os.sep.join(__file__.split(os.sep)[:-5]), 
-                        'share','matplotlib')
+                        'share','matplotlib-py@PYVER@')
     if os.path.isdir(path): return path
 
 	
--- matplotlib/setup.py.orig	Thu Mar 31 06:15:08 2005
+++ matploblib/setup.py	Thu Mar 31 10:56:51 2005
@@ -28,19 +28,19 @@
 
 # Render Agg to the GTK canvas
 #BUILD_GTKAGG       = 0
-BUILD_GTKAGG       = 'auto'
+BUILD_GTKAGG       = 1
 
-BUILD_GTK          = 'auto'
+BUILD_GTK          = 1
 
 # build TK GUI with Agg renderer ; requires Tkinter Python extension
 # and Tk includes
 # Use False or 0 if you don't want to build
 #BUILD_TKAGG        = 0
-BUILD_TKAGG        = 'auto'
+BUILD_TKAGG        = 1
 
 # build a small extension to manage the focus on win32 platforms.
-#BUILD_WINDOWING        = 0
-BUILD_WINDOWING        = 'auto'
+BUILD_WINDOWING        = 0
+#BUILD_WINDOWING        = 'auto'
 
 
 VERBOSE =  False # insert lots of diagnostic prints in extension code
@@ -79,7 +79,7 @@
 data.extend(glob.glob('images/*.ppm'))
 data.append('.matplotlibrc')
 
-data_files=[('share/matplotlib', data),]
+data_files=[('share/matplotlib-py@PYVER@', data),]
 
 # Figure out which array packages to provide binary support for
 # and define the NUMERIX value: Numeric, numarray, or both.
@@ -155,37 +155,17 @@
 build_transforms(ext_modules, packages, NUMERIX)
 build_enthought(ext_modules, packages)
 
-if BUILD_GTK:
-    try:
-        import gtk
-    except ImportError:
-        print 'GTK requires pygtk'
-        BUILD_GTK=0
-    except RuntimeError:
-        print 'pygtk present but import failed'
-    
 
 if BUILD_GTK:
     build_gdk(ext_modules, packages, NUMERIX)
     
 if BUILD_GTKAGG:
-    try:
-        import gtk
-    except ImportError:
-        print 'GTKAgg requires pygtk'
-        BUILD_GTKAGG=0
-    except RuntimeError:
-        print 'pygtk present but import failed'
-if BUILD_GTKAGG:
     BUILD_AGG = 1
     build_gtkagg(ext_modules, packages, NUMERIX)
 
 if BUILD_TKAGG:
-    try: import Tkinter
-    except ImportError: print 'TKAgg requires TkInter'
-    else:
-        BUILD_AGG = 1
-        build_tkagg(ext_modules, packages, NUMERIX)
+    BUILD_AGG = 1
+    build_tkagg(ext_modules, packages, NUMERIX)
 
 
 if BUILD_AGG:
@@ -206,6 +186,9 @@
 for mod in ext_modules:
     if VERBOSE:
         mod.extra_compile_args.append('-DVERBOSE')
+    mod.include_dirs.append('@PREFIX@/include')
+    mod.library_dirs.append('@PREFIX@/lib')
+
     
 setup(name="matplotlib",
       version= __version__,
--- matplotlib/setupext.py.orig	Sat Apr  9 06:44:43 2005
+++ matplotlib/setupext.py	Sat Apr  9 11:51:43 2005
@@ -37,9 +37,9 @@
     'win32'  : ['win32_static',],
     'linux2' : ['/usr/local', '/usr',],
     'linux'  : ['/usr/local', '/usr',],
     # Charles Moad recommends not putting in /usr/X11R6 for darwin
     # because freetype in this dir is too old for mpl
-    'darwin' : ['/sw/lib/freetype219', '/usr/local', '/usr', '/sw'], 
+    'darwin' : ['@PREFIX@/lib/freetype219', '/usr/local', '/usr', '@PREFIX@'],
     'freebsd4' : ['/usr/local', '/usr'],
     'freebsd5' : ['/usr/local', '/usr'],
     'freebsd6' : ['/usr/local', '/usr'],    
@@ -192,44 +192,12 @@
 
 def find_tcltk():
     """Finds Tcl/Tk includes/libraries/version by interrogating Tkinter."""
-    try:
-	import Tkinter
-    except:
-	print "Tkinter not properly installed\n"
-	sys.exit(1)
-    if Tkinter.TkVersion < 8.3:
-	print "Tcl/Tk v8.3 or later required\n"
-	sys.exit(1)
     o = FoundTclTk()
-    try:
-	tk=Tkinter.Tk()	
-    except Tkinter.TclError:
-	print "Using default library and include directories for Tcl and Tk because a"
-	print "Tk window failed to open.  You may need to define DISPLAY for Tk to work"
-	print "so that setup can determine where your libraries are located."
-	o.tcl_lib = "/usr/local/lib"
-	o.tcl_inc = "/usr/local/include"
-	o.tk_lib = "/usr/local/lib"
-        o.tk_inc = "/usr/local/include"
-	o.tkv = ""
-    else:
-	tk.withdraw()
-	o.tcl_lib = os.path.join((tk.getvar('tcl_library')), '../')
-	o.tk_lib = os.path.join((tk.getvar('tk_library')), '../')
-	o.tkv = str(Tkinter.TkVersion)[:3]
-	o.tcl_inc = os.path.join((tk.getvar('tcl_library')), 
-				 '../../include/tcl'+o.tkv)        
-        if not os.path.exists(o.tcl_inc):
-	    o.tcl_inc = os.path.join((tk.getvar('tcl_library')), 
-				     '../../include')
-	o.tk_inc = os.path.join((tk.getvar('tk_library')), 
-				 '../../include/tk'+o.tkv)        
-        if not os.path.exists(o.tk_inc):
-	    o.tk_inc = os.path.join((tk.getvar('tk_library')), 
-				     '../../include')
-        if not os.path.exists(o.tcl_inc):
-            print 'cannot find tcl/tk headers. giving up.'
-            sys.exit()
+    o.tcl_lib = "@PREFIX@/lib"
+    o.tcl_inc = "@PREFIX@/include"
+    o.tk_lib = "@PREFIX@/lib"
+    o.tk_inc = "@PREFIX@/include"
+    o.tkv = ""
     return o
 	
 
@@ -256,53 +224,6 @@
         else:
             raise RuntimeError('No tk/win32 support for this python version yet')
         return
-
-    elif sys.platform == 'darwin' :
-        # this config section lifted directly from Imaging - thanks to
-        # the effbot!
-
-        # First test for a MacOSX/darwin framework install
-        from os.path import join, exists
-        framework_dirs = [
-            '/System/Library/Frameworks/',
-            '/Library/Frameworks',
-            join(os.getenv('HOME'), '/Library/Frameworks')
-        ]
-
-        # Find the directory that contains the Tcl.framwork and Tk.framework
-        # bundles.
-        # XXX distutils should support -F!
-	tk_framework_found = 0
-        for F in framework_dirs:
-            # both Tcl.framework and Tk.framework should be present
-            for fw in 'Tcl', 'Tk':
-                if not exists(join(F, fw + '.framework')):
-                    break
-            else:
-                # ok, F is now directory with both frameworks. Continure
-                # building
-                tk_framework_found = 1
-                break
-        if tk_framework_found:
-            # For 8.4a2, we must add -I options that point inside the Tcl and Tk
-            # frameworks. In later release we should hopefully be able to pass
-            # the -F option to gcc, which specifies a framework lookup path.
-            #
-            tk_include_dirs = [
-                join(F, fw + '.framework', H)
-                for fw in 'Tcl', 'Tk'
-                for H in 'Headers', 'Versions/Current/PrivateHeaders'
-            ]
-
-            # For 8.4a2, the X11 headers are not included. Rather than include a
-            # complicated search, this is a hard-coded path. It could bail out
-            # if X11 libs are not found...
-            # tk_include_dirs.append('/usr/X11R6/include')
-            frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
-            module.include_dirs.extend(tk_include_dirs)
-            module.extra_link_args.extend(frameworks)
-            module.extra_compile_args.extend(frameworks)
-            return 
 
     # you're still here? ok we'll try it this way
     o = find_tcltk() # todo: try/except
