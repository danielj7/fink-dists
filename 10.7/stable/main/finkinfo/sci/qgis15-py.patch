diff -ruN qgis-1.5.0-orig/cmake/FindSIP.cmake qgis-1.5.0/cmake/FindSIP.cmake
--- qgis-1.5.0-orig/cmake/FindSIP.cmake	2010-01-16 20:08:04.000000000 +0900
+++ qgis-1.5.0/cmake/FindSIP.cmake	2011-09-23 08:59:19.000000000 +0900
@@ -36,6 +36,7 @@
   EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} ${_find_sip_py} OUTPUT_VARIABLE sip_config)
   IF(sip_config)
     STRING(REGEX REPLACE "^sip_version:([^\n]+).*$" "\\1" SIP_VERSION ${sip_config})
+    STRING(REGEX REPLACE ".*\nsip_version_num:([^\n]+).*$" "\\1" SIP_VERSION_NUM ${sip_config})
     STRING(REGEX REPLACE ".*\nsip_version_str:([^\n]+).*$" "\\1" SIP_VERSION_STR ${sip_config})
     STRING(REGEX REPLACE ".*\nsip_bin:([^\n]+).*$" "\\1" SIP_BINARY_PATH ${sip_config})
     STRING(REGEX REPLACE ".*\ndefault_sip_dir:([^\n]+).*$" "\\1" SIP_DEFAULT_SIP_DIR ${sip_config})
diff -ruN qgis-1.5.0-orig/cmake/FindSIP.py qgis-1.5.0/cmake/FindSIP.py
--- qgis-1.5.0-orig/cmake/FindSIP.py	2010-01-16 20:04:41.000000000 +0900
+++ qgis-1.5.0/cmake/FindSIP.py	2011-09-23 08:59:38.000000000 +0900
@@ -9,6 +9,7 @@
 
 sipcfg = sipconfig.Configuration()
 print("sip_version:%06.0x" % sipcfg.sip_version)
+print("sip_version_num:%d" % sipcfg.sip_version)
 print("sip_version_str:%s" % sipcfg.sip_version_str)
 print("sip_bin:%s" % sipcfg.sip_bin)
 print("default_sip_dir:%s" % sipcfg.default_sip_dir)
diff -ruN qgis-1.5.0-orig/python/CMakeLists.txt qgis-1.5.0/python/CMakeLists.txt
--- qgis-1.5.0-orig/python/CMakeLists.txt	2010-05-15 17:21:42.000000000 +0900
+++ qgis-1.5.0/python/CMakeLists.txt	2011-09-23 09:08:19.000000000 +0900
@@ -39,6 +39,10 @@
   SET(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} PROXY_FACTORY)
 ENDIF(PYQT4_VERSION_NUM LESS 263680)
 
+IF(NOT PYQT4_VERSION_NUM LESS 263941)   # 0x040705
+  SET(SIP_DISABLE_FEATURES ${SIP_DISABLE_FEATURES} QSETINT_CONVERSION) 
+ENDIF(NOT PYQT4_VERSION_NUM LESS 263941)
+
 # core module
 FILE(GLOB sip_files_core core/*.sip)
 set(SIP_EXTRA_FILES_DEPEND ${sip_files_core})
diff -ruN qgis-1.5.0-orig/python/core/conversions.sip qgis-1.5.0/python/core/conversions.sip
--- qgis-1.5.0-orig/python/core/conversions.sip	2010-04-20 21:25:42.000000000 +0900
+++ qgis-1.5.0/python/core/conversions.sip	2011-09-23 09:30:23.000000000 +0900
@@ -14,6 +14,8 @@
 - QMap<int, QgsOverlayObject*>*
 */
 
+%Feature QSETINT_CONVERSION 
+
 %ModuleHeaderCode
 // From Python 2.5, some functions use Py_ssize_t instead of int
 // thus this typedef is for maintaining backward compatibility
@@ -265,135 +267,6 @@
 
 
 
-%MappedType QSet<int>
-{
-%TypeHeaderCode
-#include <QSet>
-#if (SIP_VERSION >= 0x040900)
-#define sipClass_QString ((sipWrapperType *) sipTypeAsPyTypeObject (sipType_QString))
-#define sipClass_QVariant ((sipWrapperType *) sipTypeAsPyTypeObject (sipType_QVariant))
-#endif
-%End
-
-%ConvertFromTypeCode
-  // Create the list.
-  PyObject *l;
-
-  if ((l = PyList_New(sipCpp->size())) == NULL)
-    return NULL;
-      
-  // Set the list elements.
-  QSet<int>::iterator it = sipCpp->begin();
-  for (int i = 0; it != sipCpp->end(); ++it, ++i)
-  {
-    PyObject *tobj;
-
-    if ((tobj = PyInt_FromLong(*it)) == NULL)
-    {
-      Py_DECREF(l);
-      return NULL;
-    }
-    PyList_SET_ITEM(l, i, tobj);
-  }
-
-  return l;
-%End
-
-%ConvertToTypeCode
-  // Check the type if that is all that is required.
-  if (sipIsErr == NULL)
-    return PyList_Check(sipPy);
-
-  QSet<int> *qset = new QSet<int>;
-
-  for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-  {
-    qset->insert(PyInt_AsLong(PyList_GET_ITEM(sipPy, i)));
-  }
-
-  *sipCppPtr = qset;
-  return sipGetState(sipTransferObj);
-%End
-
-};
-
-
-template <TYPE>
-%MappedType QSet<TYPE>
-{
-%TypeHeaderCode
-#include <QSet>
-#if (SIP_VERSION >= 0x040900)
-#define sipClass_QString ((sipWrapperType *) sipTypeAsPyTypeObject (sipType_QString))
-#define sipClass_QVariant ((sipWrapperType *) sipTypeAsPyTypeObject (sipType_QVariant))
-#endif
-%End
-
-%ConvertFromTypeCode
-  // Create the list.
-  PyObject *l;
-
-  if ((l = PyList_New(sipCpp->size())) == NULL)
-    return NULL;
-      
-  // Set the list elements.
-  int i=0;
-  for (QSet<TYPE>::iterator it = sipCpp->begin(); it != sipCpp->end(); ++it, ++i)
-  {
-    TYPE *t = new TYPE(*it);
-    PyObject *tobj;
-
-    if ((tobj = sipConvertFromNewInstance(t, sipClass_TYPE, sipTransferObj)) == NULL)
-    {
-      Py_DECREF(l);
-      delete t;
-      return NULL;
-    }
-    PyList_SET_ITEM(l, i, tobj);
-  }
- 
-  return l;
-%End
-
-%ConvertToTypeCode
-  // Check the type if that is all that is required.
-  if (sipIsErr == NULL)
-  {
-    if (!PyList_Check(sipPy))
-      return 0;
-
-    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-      if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_TYPE, SIP_NOT_NONE))
-        return 0;
-
-    return 1;
-  }
-
-  QSet<TYPE> *qset = new QSet<TYPE>;
-
-  for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-  {
-    int state;
-    TYPE* t = reinterpret_cast<TYPE *>(sipConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_TYPE, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
-
-    if (*sipIsErr)
-    {
-      sipReleaseInstance(t, sipClass_TYPE, state);
-      delete qset;
-      return 0;
-    }
-    qset->insert(*t);
-    sipReleaseInstance(t, sipClass_TYPE, state);
-  }
-
-  *sipCppPtr = qset;
-  return sipGetState(sipTransferObj);
-%End
-
-};
-
-
-
 template<TYPE>
 %MappedType QMap<int, QMap<int, TYPE> >
 {
diff -ruN qgis-1.5.0-orig/src/core/spatialindex/include/Tools.h qgis-1.5.0/src/core/spatialindex/include/Tools.h
--- qgis-1.5.0-orig/src/core/spatialindex/include/Tools.h	2009-11-29 02:07:29.000000000 +0900
+++ qgis-1.5.0/src/core/spatialindex/include/Tools.h	2011-09-22 16:05:13.000000000 +0900
@@ -408,19 +408,19 @@
     private:
       std::map<std::string, Variant> m_propertySet;
 
-#ifdef _MSC_VER
+// #ifdef _MSC_VER
       // MSVC's friend function syntax differs slightly from everyone elses:
       // don't seem to need to qualify function name.
       friend std::ostream& operator<<(
         std::ostream& os,
         const Tools::PropertySet& p
       );
-#else
-      friend std::ostream& Tools::operator<<(
-        std::ostream& os,
-        const Tools::PropertySet& p
-      );
-#endif//_MSC_VER
+// #else
+//       friend std::ostream& Tools::operator<<(
+//         std::ostream& os,
+//         const Tools::PropertySet& p
+//       );
+// #endif//_MSC_VER
   }; // PropertySet
 
   std::ostream& operator<<( std::ostream& os, const Tools::PropertySet& p );
@@ -621,19 +621,19 @@
       unsigned long long* m_a;
       unsigned long m_k;
 
-#ifdef _MSC_VER
+// #ifdef _MSC_VER
       // MSVC's friend function syntax differs slightly from everyone elses
       // don't seem to need to qualify function name.
       friend std::ostream& operator<<(
         std::ostream& os,
         const Tools::UniversalHash& h
       );
-#else
-      friend std::ostream& Tools::operator<<(
-        std::ostream& os,
-        const Tools::UniversalHash& h
-      );
-#endif//_MSC_VER
+// #else
+//       friend std::ostream& Tools::operator<<(
+//         std::ostream& os,
+//         const Tools::UniversalHash& h
+//       );
+// #endif//_MSC_VER
   }; // UniversalHash
 
   std::ostream& operator<<( std::ostream& os, const Tools::UniversalHash& h );
