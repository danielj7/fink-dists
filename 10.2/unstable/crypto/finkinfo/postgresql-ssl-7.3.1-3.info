Package: postgresql-ssl
Version: 7.3.1
Revision: 3
GCC: 3.1
Source: http://www.postgresql.org/ftpsite/source/v%v/postgresql-%v.tar.gz
Source2: ftp://ftp.us.postgresql.org/odbc/versions/src/psqlodbc-7.2.5.tar.gz
Source3: ftp://gborg.postgresql.org/pub/libpqpp/stable/libpq++-4.0.tar.gz
Source4: ftp://gborg.postgresql.org/pub/libpqxx/stable/libpqxx-1.2.6.tar.gz
Source5: ftp://gborg.postgresql.org/pub/pgeasy/stable/pgeasy-3.0.1.tar.gz
BuildDepends: readline, openssl-dev (>= 0.9.7-1), autoconf25, libgnugetopt
Depends: openssl097-shlibs, readline-shlibs (>= 4.3-5), passwd, daemonic (>= 20010902-1), %N73-shlibs (>= %v-%r), libgnugetopt-shlibs
Conflicts: postgresql
Replaces: postgresql, postgresql-python (<< 7.3), postgresql-ssl-python (<< 7.3), postgresql-perl (<< 7.3), postgresql-ssl-perl (<< 7.3)
PatchScript: sed 's|@PREFIX@|%p|g' < %a/%f.patch | patch -p1
ConfigureParams: --prefix=%p --docdir=%p/share/doc --mandir=%p/share/man --enable-multibyte --enable-recode --with-CXX --without-perl --without-python --with-openssl --with-libraries=%p/lib --with-includes=%p/include --without-tcl --without-java --enable-odbc --with-pam
CompileScript: <<
#!/bin/sh

  export CPPFLAGS="-I%p/include/gnugetopt -I%i/include/postgresql -I%i/include -I%p/include"
  export LDFLAGS="-L%i/lib -L%p/lib"

  # postgresql
  autoconf && \
  ./configure %c && \
  make && \
  make install install-all-headers includedir=%p/include/postgresql includedir_internal=%p/include/postgresql/internal includedir_server=%p/include/postgresql DESTDIR=%d INSTALLSITEMAN3DIR=%i/share/man/man3 || exit 1

  # libpq++
  pushd ../libpq++-4.0
  patch -p1 < %a/%N-libpqpp-%v-%r.patch
  make DESTDIR=%d || exit 2
  popd

  # libpqxx
  pushd ../libpqxx-1.2.6
  ./configure --prefix=%p --with-postgres-include=%i/include/postgresql --with-postgres-lib=%p/lib && \
  make || exit 3
  popd

  # pgeasy
  pushd ../pgeasy-3.0.1
  patch -p1 < %a/%N-libpgeasy-%v-%r.patch
  make DESTDIR=%d || exit 4
  popd

  # odbc
  pushd ../psqlodbc-7.2.5
  ./configure --enable-pthreads --prefix=%p --with-pic && \
  make || exit 5
  popd

<<
InstallScript: <<
#!/bin/sh

  # postgresql
  make install install-all-headers includedir=%p/include/postgresql includedir_internal=%p/include/postgresql/internal includedir_server=%p/include/postgresql DESTDIR=%d INSTALLSITEMAN3DIR=%i/share/man/man3 || exit 10

  mv %i/share/doc/postgresql %i/share/doc/%N >/dev/null 2>&1

  # libpq++
  pushd ../libpq++-4.0
  make install DESTDIR=%d || exit 11
  popd

  # libpqxx
  pushd ../libpqxx-1.2.6
  make install DESTDIR=%d includedir=%p/include/postgresql/pqxx || exit 12
  popd

  # pgeasy
  pushd ../pgeasy-3.0.1
  make install DESTDIR=%d || exit 13
  popd

  # odbc
  pushd ../psqlodbc-7.2.5
  make install DESTDIR=%d || exit 14
  popd

  ranlib %i/lib/*.a

  install -d -m 755 %i/share/doc/%n
  cp -R contrib %i/share/doc/%n/contrib
<<
SplitOff: <<
  Description: PostgreSQL development headers and libraries (with SSL)
  Package: %N-dev
  Depends: %N (>= %v-%r)
  Conflicts: postgresql-dev
  Replaces: postgresql-ssl (<< %v), postgresql-dev
  BuildDependsOnly: true
  Files: bin/pg_config include lib/*.a lib/libecpg.dylib lib/libpgeasy.dylib lib/libpq.dylib lib/libpq++.dylib lib/libpqxx.dylib lib/*.la
<<
SplitOff2: <<
  Description: PostgreSQL shared libraries (with SSL)
  Package: %N73-shlibs
  Conflicts: postgresql73-shlibs
  Depends: libgnugetopt-shlibs
  Replaces: postgresql-ssl (<< %v), postgresql-shlibs, postgresql-ssl-shlibs, postgresql73-shlibs
  BuildDependsOnly: true
  Files: lib/*.dylib
<<
DocFiles: COPYRIGHT HISTORY INSTALL README register.txt
DaemonicFile: <<
<service>
<description>PostgreSQL database server</description>
<message> PostgreSQL database server</message>

<daemon name="postgresql">
<executable background="no">/usr/bin/sudo</executable>
<parameters>-u pgsql %p/bin/pg_ctl -D %p/var/postgresql/data start -l %p/var/log/postgresql/logfile</parameters>
</daemon>

</service>
<<
PreInstScript: <<
rm -rf /tmp/postgresql-status
die () {
  echo "failed" > /tmp/postgresql-status
  echo "failed"
  echo ""
  echo "*** bailing because an error ocurred:"
  echo ""
  echo "$*"
  exit 1
}

# dump the database for upgrade
if [ "$1" = "upgrade" ] && [ -d "%p/var/postgresql/data" ]; then
  echo -e "- creating %p/var/tmp if necessary: \c"
  mkdir -p '%p/var/tmp' || die "couldn't create temp directory %p/var/tmp"
  chmod 1777 '%p/var/tmp'
  echo "ok"
  echo ""

  OLDMAJOR=`cat '%p/var/postgresql/data/PG_VERSION' 2>/dev/null | cut -d. -f1`
  OLDMINOR=`cat '%p/var/postgresql/data/PG_VERSION' 2>/dev/null | cut -d. -f2`
  OLDVERSION="${OLDMAJOR}.${OLDMINOR}"
  CURMAJOR=`echo %v | cut -d. -f1`
  CURMINOR=`echo %v | cut -d. -f2`
  CURVERSION="${OLDMAJOR}.${OLDMINOR}"
  if [ "$OLDVERSION" != "$CURVERSION" ]; then
    cat <<END
It appears you already have an initialized database.

PostgreSQL changes their on-disk format between major releases
and we will need to perform a dump and restore of your database
to upgrade.  Backups of your old database will be in the
%p/var/tmp directory.  In the interest of being ultra-paranoid
both a database dump, and a tarball of your postgresql
directory will be in there.

YOU WILL NEED TO RE-CREATE YOUR DATABASE USING THE DUMP UPON
UPGRADE OF THIS PACKAGE!

If you have important data in the database, be sure that you
also have access to the old (7.2.x) postgresql deb files in
case you need to revert.

END
    read -p 'Should I continue? [Y/n] ' -s -n 1 PG_CONTINUE
    if [ "$PG_CONTINUE" = "y" ] || [ "$PG_CONTINUE" = "Y" ] || [ "$PG_CONTINUE" = "" ]; then
      PG_CONTINUE="Y"
    else
      PG_CONTINUE="N"
    fi
    echo "$PG_CONTINUE"
    echo ""

    if [ "$PG_CONTINUE" = "N" ]; then
      echo "*** BAILING OUT ***"
      echo ""
      echo "manual" > "%p/var/tmp/pg_upgradetype"
      exit 0
    fi

    echo "automatic" > "%p/var/tmp/pg_upgradetype"

    echo -e "- starting postgresql (just to be sure): \c"
    sudo -u pgsql %p/bin/pg_ctl -D %p/var/postgresql/data start -l %p/var/log/postgresql/logfile >/dev/null 2>&1 || true
    echo "ok"

    echo -e "- vacuuming tables (to be sure logs have been played out): \c"
    %p/bin/vacuumdb -U pgsql -a >/dev/null 2>&1 || die "vacuumdb failed!"
    echo -e "ok"

    echo -e "- dumping the database for upgrade: \c"
    sudo -u pgsql %p/bin/pg_dumpall -c -d > "%p/var/tmp/pgdb-${OLDVERSION}.pgsql" 2>&1 || die "couldn't dump database"
    echo "pgdb-${OLDVERSION}.pgsql"

    echo -e "- stopping postgresql: \c"
    sudo -u pgsql %p/bin/pg_ctl -D %p/var/postgresql/data stop -l %p/var/log/postgresql/logfile >/dev/null 2>&1 || true
    echo "ok"

    echo -e "- backing up the %p/var/postgresql directory: \c"
    pushd "%p/var" >/dev/null 2>&1
    sudo -u pgsql tar -czf "%p/var/tmp/pgdb-${OLDVERSION}.tar.gz" postgresql >/dev/null 2>&1 || die "couldn't tar up postgresql directory"
    popd >/dev/null 2>&1
    echo "pgdb-${OLDVERSION}.tar.gz"

    echo ""
  fi
fi
<<

PostInstScript: <<
INSTALL_PHASE="$1"

die () {
  echo "failed"
  echo ""
  echo "*** bailing because an error ocurred:"
  echo ""
  echo "$*"
  exit 1
}

pg_createdb () {
  # initdb quietly creates a bad database with the wrong locale otherwise :P
  export LANG=C

  echo -e "- making postgresql directories: \c"
  mkdir -p %p/var/postgresql/data %p/var/log/postgresql
  chown -R pgsql %p/var/postgresql %p/var/log/postgresql
  chmod 700 %p/var/postgresql
  echo "ok"

  echo -e "- initializing database in %p/var/postgresql/data: \c"
  sudo -u pgsql %p/bin/initdb -D %p/var/postgresql/data >/dev/null 2>&1 || die "couldn't initialize database"
  echo "ok"
}

if [ -d %p/var/postgresql/data ]; then
  OLDMAJOR=`cat '%p/var/postgresql/data/PG_VERSION' 2>/dev/null | cut -d. -f1`
  OLDMINOR=`cat '%p/var/postgresql/data/PG_VERSION' 2>/dev/null | cut -d. -f2`
  OLDVERSION="${OLDMAJOR}.${OLDMINOR}"
  CURMAJOR=`echo %v | cut -d. -f1`
  CURMINOR=`echo %v | cut -d. -f2`
  CURVERSION="${OLDMAJOR}.${OLDMINOR}"
  if [ "$OLDVERSION" = "7.2" ]; then
    cat <<END

Warning: you have a database that was created with PostgreSQL 7.2.x.
Database dumps from versions prior to 7.3 can be missing some 
dependency information on certain types of constraints.

It is recommended that when you have completed this postgresql
install, you install the dbd-pg-pm or dbd-pg-pm-ssl package and then
run the script in %p/share/doc/%N/contrib/adddepend/ on each
of your databases.
END
  fi
else
  pg_createdb
fi

# update daemonic init script if necessary
daemonic install %N
<<
PreRmScript: <<
# clean up
if [ $1 != "upgrade" ]; then
  daemonic remove %N
fi
<<
Description: PostgreSQL open-source database
DescUsage: <<
The package runs initdb on installation as the user 'pgsql'.

You can start the PostgreSQL server manually using 'postmaster' as pgsql
(since pgsql has a shell of /dev/null by default, you must run it as
sudo -u pgsql postmaster) or you can run 'daemonic enable postgresql' as
root to create a StartupItem for it.

Also note that installation of this package is interactive, because
upgrades can make irrevocable changes to your database.
<<
DescPackaging: <<
IMPORTANT: The location of the data files has changed from early
revisions of this package. If you're upgrading from an earlier
revision, note that this one expects the data files to be installed
at <prefix>/var/postgresql/data.

When run from the startup script, logs output to 
<prefix>/var/log/postgresql/logfile
<<
DescPort: <<
Rearranged a lot of the PostgreSQL build to be more "correct" on
Darwin, including making proper dylibs (instead of bundles, which
ended up creating static binaries).

Also had to write a bunch of pre/post-install logic for dumping
databases from 7.2.x (or, in theory, older) schemas.
<<
License: BSD
Maintainer: Benjamin Reed <ranger@befunk.com>
Homepage: http://www.postgresql.org/
