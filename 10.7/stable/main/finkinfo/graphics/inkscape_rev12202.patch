=== modified file 'src/2geom/basic-intersection.cpp'
--- a/src/2geom/basic-intersection.cpp	2011-02-02 21:24:36 +0000
+++ b/src/2geom/basic-intersection.cpp	2013-03-13 21:44:30 +0000
@@ -64,7 +64,12 @@
 void split(vector<Point> const &p, double t, 
            vector<Point> &left, vector<Point> &right) {
     const unsigned sz = p.size();
-    Geom::Point Vtemp[sz][sz];
+    
+    Geom::Point **Vtemp = new Geom::Point* [sz];
+
+    for (unsigned int i = 0; i < sz; ++i) {
+        Vtemp[i] = new Geom::Point[sz];
+    }
 
     /* Copy control points	*/
     std::copy(p.begin(), p.end(), Vtemp[0]);
@@ -82,6 +87,11 @@
         left[j]  = Vtemp[j][0];
     for (unsigned j = 0; j < sz; j++)
         right[j] = Vtemp[sz-1-j][j];
+
+    for (unsigned int i = 0; i < sz; ++i)
+        delete[] Vtemp[i];
+
+    delete[] Vtemp;
 }
 
 

=== modified file 'src/2geom/solve-bezier-parametric.cpp'
--- a/src/2geom/solve-bezier-parametric.cpp	2011-07-24 23:24:28 +0000
+++ b/src/2geom/solve-bezier-parametric.cpp	2013-03-13 21:44:30 +0000
@@ -68,13 +68,20 @@
         break;
     }
 
-    // Otherwise, solve recursively after subdividing control polygon
-    std::vector<Geom::Point> Left(degree + 1);    // New left and right
-    std::vector<Geom::Point> Right(degree + 1);   // control polygons
+    /*
+     * Otherwise, solve recursively after subdividing control polygon
+     * New left and right control polygons
+     */
+    Geom::Point *Left  = new Geom::Point[degree+1];
+    Geom::Point *Right = new Geom::Point[degree+1];
+
     Bezier(w, degree, 0.5, &Left[0], &Right[0]);
     total_subs ++;
     find_parametric_bezier_roots(&Left[0],  degree, solutions, depth + 1);
     find_parametric_bezier_roots(&Right[0], degree, solutions, depth + 1);
+
+    delete[] Left;
+    delete[] Right;
 }
 
 
@@ -191,7 +198,10 @@
        Geom::Point *Left,	/* RETURN left half ctl pts */
        Geom::Point *Right)	/* RETURN right half ctl pts */
 {
-    Geom::Point Vtemp[degree+1][degree+1];
+    Geom::Point **Vtemp = new Geom::Point* [degree+1];
+
+    for (unsigned int i = 0; i < degree+1; ++i)
+        Vtemp[i] = new Geom::Point[degree+1];
 
     /* Copy control points	*/
     std::copy(V, V+degree+1, Vtemp[0]);
@@ -208,7 +218,14 @@
     for (unsigned j = 0; j <= degree; j++)
         Right[j] = Vtemp[degree-j][j];
 
-    return (Vtemp[degree][0]);
+    Geom::Point return_value = Vtemp[degree][0];
+
+    for (unsigned int i = 0; i < degree+1; ++i)
+        delete[] Vtemp[i];
+
+    delete[] Vtemp;
+
+    return return_value;
 }
 
 };

=== modified file 'src/color-profile.cpp'
--- a/src/color-profile.cpp	2013-01-05 14:16:58 +0000
+++ b/src/color-profile.cpp	2013-03-13 21:44:30 +0000
@@ -103,6 +103,8 @@
 
 static SPObjectClass *cprof_parent_class;
 
+namespace Inkscape {
+
 class ColorProfileImpl {
 public:
 #if defined(HAVE_LIBLCMS1) || defined(HAVE_LIBLCMS2)
@@ -129,10 +131,6 @@
 #endif // defined(HAVE_LIBLCMS1) || defined(HAVE_LIBLCMS2)
 };
 
-
-
-namespace Inkscape {
-
 #if defined(HAVE_LIBLCMS1) || defined(HAVE_LIBLCMS2)
 cmsColorSpaceSignature asICColorSpaceSig(ColorSpaceSig const & sig)
 {

