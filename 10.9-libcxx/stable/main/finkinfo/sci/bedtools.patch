From c0b7d934cc61ad6c83eb3d99374263e7ec51722d Mon Sep 17 00:00:00 2001
From: Jonathan Chang <jchang641@gmail.com>
Date: Sun, 24 Sep 2017 23:14:33 -0700
Subject: [PATCH] strandqueue: de-const for stricter Xcode 9 rules

---
 src/utils/FileRecordTools/Records/StrandQueue.cpp | 18 +++++++++---------
 src/utils/FileRecordTools/Records/StrandQueue.h   | 14 +++++++-------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/utils/FileRecordTools/Records/StrandQueue.cpp b/src/utils/FileRecordTools/Records/StrandQueue.cpp
index aa53313b..d8ca3454 100644
--- a/src/utils/FileRecordTools/Records/StrandQueue.cpp
+++ b/src/utils/FileRecordTools/Records/StrandQueue.cpp
@@ -25,11 +25,11 @@ StrandQueue::~StrandQueue() {
 	}
 }
 
-Record *StrandQueue::top() const
+Record *StrandQueue::top()
 {
 	int minIdx = getMinIdx();
 	if (minIdx == -1) return NULL;
-	return const_cast<Record *>(_queues[minIdx]->top());
+	return _queues[minIdx]->top();
 }
 
 void StrandQueue::pop() {
@@ -38,8 +38,8 @@ void StrandQueue::pop() {
 	_queues[minIdx]->pop();
 }
 
-Record * StrandQueue::top(Record::strandType strand) const {
-	const Record *record = NULL;
+Record * StrandQueue::top(Record::strandType strand) {
+	Record *record = NULL;
 	switch (strand) {
 	case Record::FORWARD:
 		if (_queues[0]->empty()) return NULL;
@@ -57,10 +57,10 @@ Record * StrandQueue::top(Record::strandType strand) const {
 	default:
 		break;
 	}
-	return const_cast<Record *>(record);
+	return record;
 }
 
-void StrandQueue::pop(Record::strandType strand) const {
+void StrandQueue::pop(Record::strandType strand) {
 	switch (strand) {
 	case Record::FORWARD:
 		if (_queues[0]->empty()) return;
@@ -95,7 +95,7 @@ void StrandQueue::push(Record *record) {
 	}
 }
 
-size_t StrandQueue::size() const {
+size_t StrandQueue::size() {
 	size_t sumSize = 0;
 	for (int i = 0; i < NUM_QUEUES; i++) {
 		sumSize += _queues[i]->size();
@@ -103,7 +103,7 @@ size_t StrandQueue::size() const {
 	return sumSize;
 }
 
-bool StrandQueue::empty() const {
+bool StrandQueue::empty() {
 	for (int i = 0; i < NUM_QUEUES; i++) {
 		if (!_queues[i]->empty()) {
 			return false;
@@ -113,7 +113,7 @@ bool StrandQueue::empty() const {
 }
 
 
-int StrandQueue::getMinIdx() const {
+int StrandQueue::getMinIdx() {
 	if (empty()) return -1;
 	const Record *minRec = NULL;
 	int minIdx = -1;
diff --git a/src/utils/FileRecordTools/Records/StrandQueue.h b/src/utils/FileRecordTools/Records/StrandQueue.h
index f20e1a1c..62cd985a 100644
--- a/src/utils/FileRecordTools/Records/StrandQueue.h
+++ b/src/utils/FileRecordTools/Records/StrandQueue.h
@@ -20,17 +20,17 @@ class StrandQueue {
 	StrandQueue();
 	~StrandQueue();
 
-	Record * top() const;
+	Record * top();
 	void pop();
-	Record * top(Record::strandType strand) const;
-	void pop(Record::strandType strand) const;
+	Record * top(Record::strandType strand);
+	void pop(Record::strandType strand);
 	void push(Record *record);
-	size_t size() const;
-	bool empty() const;
+	size_t size();
+	bool empty();
 
 private:
 //	static RecordPtrSortFunctor _recSortFunctor;
-	typedef priority_queue<Record *, vector<const Record *>, RecordPtrSortDescFunctor > queueType;
+	typedef priority_queue<Record *, vector<Record *>, RecordPtrSortDescFunctor > queueType;
 	vector<queueType *> _queues;
 	static const int NUM_QUEUES = 3;
 
@@ -39,7 +39,7 @@ class StrandQueue {
 	//do, so we'll use a suggestion found in a forum, and put the enum values into a vector.
 	vector<Record::strandType> _strandIdxs;
 
-	int getMinIdx() const; //will return the idx of queue with the current min val.
+	int getMinIdx(); //will return the idx of queue with the current min val.
 
 };
 
