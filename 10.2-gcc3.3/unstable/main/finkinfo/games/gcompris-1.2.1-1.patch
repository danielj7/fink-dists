--- gcompris-1.2.1/src/gcompris/pluginenum.c	Mon Nov 26 00:57:54 2001
+++ gcompris-1.2.1-new/src/gcompris/pluginenum.c	Mon Mar 17 10:07:38 2003
@@ -18,6 +18,9 @@
  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
 
+#ifdef __APPLE__
+#  include <sys/types.h>
+#endif /* __APPLE__ */
 #include <dirent.h>
 #include <sys/stat.h>
 
@@ -115,9 +118,9 @@
 #ifdef HPUX
 	shl_t *h;
 #else
-	void *h;
+	void *h = NULL;
 #endif
-	void *(*gpi) (void);
+	void *(*gpi) (void) = NULL;
 
 #ifndef DISABLE_USER_PLUGIN_DIR
 	/*
@@ -141,14 +144,20 @@
 		   HP-UX does not support dlopen on 32-bit
 		   PA-RISC executables */
 #else
+#ifdef __APPLE__
+	if ((h = dlopen(filename, RTLD_LOCAL)) != NULL)
+#endif
 	if ((h = dlopen(filename, RTLD_NOW)) != NULL)
 #endif /* HPUX */
 	{
-#ifdef HPUX
+#ifdef HPUX 
  		if ((shl_findsym(&h, "get_bplugin_info", TYPE_PROCEDURE, (void*) &gpi)) == 0)
-#else
-		if ((gpi = dlsym(h, "get_bplugin_info")) != NULL)
 #endif
+#ifdef __APPLE__
+                if ((gpi = dlsym(h, "_get_bplugin_info")) != NULL)
+#else
+                if ((gpi = dlsym(h, "get_bplugin_info")) != NULL)
+#endif /* __APPLE__ */
 		{
 			BoardPlugin *p;
 			g_message("    plugin %s loaded", filename);
@@ -161,8 +170,11 @@
 		else
 		{
 #ifdef HPUX
+		        perror("Loading plugin failed (sh_findsym)!"); 
                         shl_unload(h);
 #else
+                        g_message("    plugin %s not loaded",filename);
+		        fprintf(stderr, "%s\n", dlerror());
 			dlclose(h);
 #endif
 		}
--- gcompris-1.2.1/src/gcompris/oggplayer.c	Wed Oct  9 00:16:26 2002
+++ gcompris-1.2.1-new/src/gcompris/oggplayer.c	Wed Dec 11 15:33:51 2002
@@ -23,78 +23,112 @@
 #include <vorbis/vorbisfile.h>
 #include <ao/ao.h>
 
+#ifdef __WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
+
 int quit = 0;
 
 //int decode_ogg_file(char *infile)
 void *decode_ogg_file(void *infile)
 {
+  char buf[4096];
   OggVorbis_File vf;
-  ao_device *audio_device;
-  ao_sample_format format;
   vorbis_comment *vc;
   vorbis_info *vi;
-  FILE *input;    
-  int bs = 0;
-  char buf[4096];
-  int buflen = 4096;
-  int ret;  
+  long ov_status;
+
+  ao_device *audio_device;
+  ao_sample_format format;
+
   int driver_id;  
   int big_endian;
   int word_size;
   int signed_sample;
-  int rate;
+  long rate;
   int channels;
+
+  FILE* input;
+  int eof=0;
+  int bs=0;
   
   input = fopen((char *)infile, "rb");
-  if(!input) 
-    {
+  if(!input) {
+      fprintf(stderr, "cannot open %s\n",(char *) infile);
       return 0;
     }
 
-  if(ov_open(input, &vf, NULL, 0) < 0) 
+  if((ov_status = ov_open(input, &vf, NULL, 0)) < 0) 
     {
       fclose(input);
+      fprintf(stderr, "ov_open failed for %s (%d)\n",(char *) infile, ov_status);
       return 0;
     }
+  vc = ov_comment(&vf, -1);
+  vi=ov_info(&vf,-1);
+
+  {
+    char **ptr=vc->user_comments;
+    while(*ptr){
+      fprintf(stderr,"%s\n",*ptr);
+      ++ptr;
+    }
+    printf("%s : ", basename(infile));    
+    printf("\nBitstream is %d channel(s), %ldHz\n",vi->channels,vi->rate);
+    printf("Encoded by: %s\n",vc->vendor);
+    printf("number of logical streams : %ld \n", ov_streams(&vf));
+    printf("duration = %f seconds\n\n", ov_time_total(&vf, -1));
+  }
 
+  #ifdef __APPLE__
+  driver_id = ao_driver_id("esd");
+  printf("\n!!! Audio output device set to esd by default on Mac Os 10.2 !!!!\n\n");
+  #else
   driver_id = ao_default_driver_id();      
+  #endif
+  
+  if ( driver_id < 0 ){
+     fprintf(stderr, "Error unable to find a usable audio output device (%d)\n", driver_id);
+     return 0;
+  }
+  
   big_endian = ao_is_big_endian();
   signed_sample = 1;
   word_size = 2;  
-  vc = ov_comment(&vf, -1);
-  vi = ov_info(&vf, -1);	
-  rate = vi->rate;
-  channels = vi->channels;
-  format.rate = rate;
-  format.channels = channels;
+  
+  format.rate = (int ) vi->rate;
+  format.channels = vi->channels;
   format.bits = word_size * 8;
   format.byte_format = big_endian ? AO_FMT_BIG : AO_FMT_LITTLE;	
   audio_device = ao_open_live(driver_id, &format, NULL);    
   if (audio_device == NULL)
     {
       fclose(input);
+      fprintf(stderr, "Error opening audio device\n");
       return 0;
     }
-      
-  printf("%s : ", basename(infile));    
-  printf("  %ldHz , ", rate);    
-  printf(" %d channels  \n", channels);    
-  //printf("number of logical streams : %ld \n", ov_streams(&vf));
-  printf("duration = %f seconds\n", ov_time_total(&vf, -1));
 
-  while (((ret = ov_read(&vf, buf, buflen, big_endian, word_size, signed_sample, &bs)) != 0) && !quit)
-    {
-      if(bs != 0) 
-	{
-	  printf("Only one logical bitstream currently supported\n");
-	  break;
-	}
-
-      // write audio to device
-      if (ret > 0)
-	if (ao_play(audio_device, buf, ret) == 0)
-	  printf("error writing audio data \n");	
+  
+  while(!eof){
+    long ret=ov_read(&vf,buf,sizeof(buf),big_endian, word_size, signed_sample, &bs);
+    if(bs != 0){
+	fprintf(stderr, "Only one logical bitstream currently supported\n");
+	break;
+    }
+    if (ret == 0) {
+      /* EOF */
+      eof=1;
+    } else if (ret < 0) {
+      /* error in the stream.  Not a problem, just reporting it in
+	 case we (the app) cares.  In this case, we don't. */
+    } else {
+      /* we don't bother dealing with sample rate changes, etc, but
+	 you'll have to*/
+      if (ao_play(audio_device, buf, (unsigned int) ret) == 0)
+	  fprintf(stderr, "error writing audio data \n");	
     }
+  }
 
   ov_clear(&vf);
   ao_close(audio_device);
--- gcompris-1.2.1/src/boards/clickgame.c	Wed Apr 17 00:31:42 2002
+++ gcompris-1.2.1-new/src/boards/clickgame.c	Sat Dec  7 11:08:56 2002
@@ -19,6 +19,9 @@
  *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+#ifdef __APPLE__
+#   include <sys/types.h>
+#endif
 #include <dirent.h>
 
 #include "gcompris/gcompris.h"
--- gcompris-1.2.1/src/boards/shapegame.c	Wed Oct  9 08:52:27 2002
+++ gcompris-1.2.1-new/src/boards/shapegame.c	Wed Dec 11 15:43:27 2002
@@ -686,7 +686,7 @@
 static Shape *find_closest_shape(double x, double y, double limit)
 {
   GList *list;
-  double goodDist = powf(limit,2);
+  double goodDist = pow(limit,2);
   Shape *candidateShape = NULL;
 
   /* loop through all our shapes */
@@ -697,7 +697,7 @@
     if(shape->type==SHAPE_TARGET)
       {
 	/* Calc the distance between this shape and the given coord */
-	dist = powf((shape->x-x),2) + powf((shape->y-y),2);
+	dist = pow((shape->x-x),2) + pow((shape->y-y),2);
 	
 	if(dist<goodDist)
 	  {
--- gcompris-1.2.1/configure	Thu Oct 17 10:33:35 2002
+++ gcompris-1.2.1/configure.new	Mon Mar 17 10:29:34 2003
@@ -4649,7 +4649,8 @@
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$nonopt $(test "x$module" = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags -install_name $rpath/$soname $verstring'
+    #archive_cmds='$nonopt $(test "x$module" = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags -install_name $rpath/$soname $verstring'
+      archive_cmds='$nonopt $(test x$module = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags $(test .$module != .yes && echo -install_name $rpath/$soname $verstring)'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' && strip -s $export_symbols'
     hardcode_direct=yes
