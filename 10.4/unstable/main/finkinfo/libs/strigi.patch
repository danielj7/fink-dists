diff -Nurd strigi-0.7.0/src/daemon/dbus/dbuscpp/dbusmessagereader.cpp strigi-0.7.0-new/src/daemon/dbus/dbuscpp/dbusmessagereader.cpp
--- strigi-0.7.0/src/daemon/dbus/dbuscpp/dbusmessagereader.cpp	2009-07-23 01:19:52.000000000 -0400
+++ strigi-0.7.0-new/src/daemon/dbus/dbuscpp/dbusmessagereader.cpp	2009-09-15 09:44:51.000000000 -0400
@@ -51,6 +51,7 @@
     dbus_message_iter_next(&it);
     return *this;
 }
+#ifdef __x86_64__
 DBusMessageReader&
 DBusMessageReader::operator>>(dbus_uint64_t& s) {
     if (!isOk()) return *this;
@@ -62,6 +63,7 @@
     dbus_message_iter_next(&it);
     return *this;
 }
+#endif
 DBusMessageReader&
 DBusMessageReader::operator>>(int64_t& s) {
     if (!isOk()) return *this;
@@ -74,6 +76,17 @@
     return *this;
 }
 DBusMessageReader&
+DBusMessageReader::operator>>(uint64_t& s) {
+    if (!isOk()) return *this;
+    if (DBUS_TYPE_UINT64 != dbus_message_iter_get_arg_type(&it)) {
+        close();
+        return *this;
+    }
+    dbus_message_iter_get_basic(&it, &s);
+    dbus_message_iter_next(&it);
+    return *this;
+}
+DBusMessageReader&
 DBusMessageReader::operator>>(string& s) {
     if (!isOk()) return *this;
     if (DBUS_TYPE_STRING != dbus_message_iter_get_arg_type(&it)) {
diff -Nurd strigi-0.7.0/src/daemon/dbus/dbuscpp/dbusmessagereader.h strigi-0.7.0-new/src/daemon/dbus/dbuscpp/dbusmessagereader.h
--- strigi-0.7.0/src/daemon/dbus/dbuscpp/dbusmessagereader.h	2009-07-23 01:19:52.000000000 -0400
+++ strigi-0.7.0-new/src/daemon/dbus/dbuscpp/dbusmessagereader.h	2009-09-15 09:46:07.000000000 -0400
@@ -62,8 +62,12 @@
     DBusMessageReader& operator>>(std::string& s);
     DBusMessageReader& operator>>(dbus_int32_t& s);
     DBusMessageReader& operator>>(dbus_uint32_t& s);
+#ifdef __x86_64
     DBusMessageReader& operator>>(dbus_uint64_t& s);
     DBusMessageReader& operator>>(dbus_int64_t& s);
+#endif
+    DBusMessageReader& operator>>(int64_t& s);
+    DBusMessageReader& operator>>(uint64_t& s);
     DBusMessageReader& operator>>(std::multimap<int, std::string>&);
     DBusMessageReader& operator>>(std::vector<std::pair<bool, std::string> >&);
     bool isOk() const { return ok; }
diff -Nurd strigi-0.7.0/src/luceneindexer/CMakeLists.txt strigi-0.7.0-new/src/luceneindexer/CMakeLists.txt
--- strigi-0.7.0/src/luceneindexer/CMakeLists.txt	2009-07-23 01:19:52.000000000 -0400
+++ strigi-0.7.0-new/src/luceneindexer/CMakeLists.txt	2009-09-15 09:35:19.000000000 -0400
@@ -19,6 +19,8 @@
     ADD_DEFINITIONS(-DUNICODE)
 ENDIF(WIN32)
 
+add_definitions(-I${CLUCENE_LIBRARY_DIR})
+
 # We need to compile the clucene index plugin with default visibility, because
 # CLucene does not export the symbol for CLuceneError. If this symbol is not
 # exported, the exception cannot be caught and can cause programs that use
