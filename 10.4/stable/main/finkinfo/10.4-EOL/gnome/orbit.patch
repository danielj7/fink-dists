diff -Naur ORBit-0.5.17.old/Makefile.in ORBit-0.5.17.new/Makefile.in
--- ORBit-0.5.17.old/Makefile.in	Thu Jun  6 20:34:34 2002
+++ ORBit-0.5.17.new/Makefile.in	Wed Jul 31 21:53:18 2002
@@ -99,7 +99,7 @@
 
 AUTOMAKE_OPTIONS = 1.3 # required version of automake.
 
-SUBDIRS = popt libIDL src test
+SUBDIRS = popt libIDL src
 
 bin_SCRIPTS = orbit-config
 
diff -Naur ORBit-0.5.17.old/configure ORBit-0.5.17.new/configure
--- ORBit-0.5.17.old/configure	Thu Jun  6 20:27:24 2002
+++ ORBit-0.5.17.new/configure	Wed Jul 31 21:57:14 2002
@@ -4447,7 +4447,7 @@
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$nonopt $(test "x$module" = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags -install_name $rpath/$soname $verstring'
+    archive_cmds='$nonopt $(test x$module = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags $(test .$module != .yes && echo -install_name $rpath/$soname $tmp_verstring)'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' && strip -s $export_symbols'
     hardcode_direct=yes
@@ -8846,13 +8846,13 @@
 		LIB_WRAP=-lwrap
 		echo "Found $THEFILE/libwrap.so" 1>&5
 		break
-	else
-		echo "From $I, checking in dir $THEFILE for libwrap.a" 1>&5
-		if test -f $THEFILE/libwrap.a; then
-			LIBWRAP_PATH=$THEFILE/libwrap.a
-			echo "Found $LIBWRAP_PATH" 1>&5
-			break
-		fi
+#	else
+#		echo "From $I, checking in dir $THEFILE for libwrap.a" 1>&5
+#		if test -f $THEFILE/libwrap.a; then
+#			LIBWRAP_PATH=$THEFILE/libwrap.a
+#			echo "Found $LIBWRAP_PATH" 1>&5
+#			break
+#		fi
 	fi
 	esac
 done
diff -Naur ORBit-0.5.17.old/libIDL/configure ORBit-0.5.17.new/libIDL/configure
--- ORBit-0.5.17.old/libIDL/configure	Thu Jun  6 20:27:28 2002
+++ ORBit-0.5.17.new/libIDL/configure	Wed Jul 31 21:53:19 2002
@@ -5435,7 +5435,7 @@
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$nonopt $(test "x$module" = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags -install_name $rpath/$soname $verstring'
+    archive_cmds='$nonopt $(test x$module = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags $(test .$module != .yes && echo -install_name $rpath/$soname $tmp_verstring)'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' && strip -s $export_symbols'
     hardcode_direct=yes
diff -Naur ORBit-0.5.17.old/libIDL/lexer.l ORBit-0.5.17.new/libIDL/lexer.l
--- ORBit-0.5.17.old/libIDL/lexer.l	Thu Jun  6 20:07:29 2002
+++ ORBit-0.5.17.new/libIDL/lexer.l	Wed Jul 31 21:53:19 2002
@@ -201,15 +201,27 @@
 }
 <*>{whitespace}						;
 {b8_int}						{
+#ifdef __APPLE__
+	yylval.integer = strtoq(yytext, NULL, 8);
+#else
 	sscanf (yytext, "%" IDL_LL "o", &yylval.integer);
+#endif
 	tokreturn (TOK_INTEGER);
 }
 {b10_uint}						{
+#ifdef __APPLE__
+	yylval.integer = strtouq(yytext, NULL, 10);
+#else
 	sscanf (yytext, "%" IDL_LL "u", &yylval.integer);
+#endif
 	tokreturn (TOK_INTEGER);
 }
 {b16_int}						{
+#ifdef __APPLE__
+	yylval.integer = strtoq(yytext + 2, NULL, 16);
+#else
 	sscanf (yytext + 2, "%" IDL_LL "x", &yylval.integer);
+#endif
 	tokreturn (TOK_INTEGER);
 }
 {fixed_lit}						{
diff -Naur ORBit-0.5.17.old/libIDL/ltmain.sh ORBit-0.5.17.new/libIDL/ltmain.sh
--- ORBit-0.5.17.old/libIDL/ltmain.sh	Thu Jun  6 20:27:24 2002
+++ ORBit-0.5.17.new/libIDL/ltmain.sh	Wed Jul 31 21:53:19 2002
@@ -2924,6 +2924,11 @@
 	if test -n "$export_symbols" && test -n "$archive_expsym_cmds"; then
 	  eval cmds=\"$archive_expsym_cmds\"
 	else
+	  if test "x$verstring" = "x0.0"; then
+	    tmp_verstring=
+	  else
+	    tmp_verstring="$verstring"
+	  fi
 	  eval cmds=\"$archive_cmds\"
 	fi
 	save_ifs="$IFS"; IFS='~'
diff -Naur ORBit-0.5.17.old/ltmain.sh ORBit-0.5.17.new/ltmain.sh
--- ORBit-0.5.17.old/ltmain.sh	Thu Jun  6 20:27:06 2002
+++ ORBit-0.5.17.new/ltmain.sh	Wed Jul 31 21:53:19 2002
@@ -2924,6 +2924,11 @@
 	if test -n "$export_symbols" && test -n "$archive_expsym_cmds"; then
 	  eval cmds=\"$archive_expsym_cmds\"
 	else
+	  if test "x$verstring" = "x0.0"; then
+	    tmp_verstring=
+	  else
+	    tmp_verstring="$verstring"
+	  fi
 	  eval cmds=\"$archive_cmds\"
 	fi
 	save_ifs="$IFS"; IFS='~'
diff -Naur ORBit-0.5.17.old/popt/configure ORBit-0.5.17.new/popt/configure
--- ORBit-0.5.17.old/popt/configure	Thu Jun  6 20:27:41 2002
+++ ORBit-0.5.17.new/popt/configure	Wed Jul 31 21:53:19 2002
@@ -5356,7 +5356,7 @@
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$nonopt $(test "x$module" = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags -install_name $rpath/$soname $verstring'
+    archive_cmds='$nonopt $(test x$module = xyes && echo -bundle || echo -dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linker_flags $(test .$module != .yes && echo -install_name $rpath/$soname $tmp_verstring)'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' && strip -s $export_symbols'
     hardcode_direct=yes
diff -Naur ORBit-0.5.17.old/src/ORBitutil/orbit-os-config.h.in ORBit-0.5.17.new/src/ORBitutil/orbit-os-config.h.in
--- ORBit-0.5.17.old/src/ORBitutil/orbit-os-config.h.in	Thu Jun  6 20:07:35 2002
+++ ORBit-0.5.17.new/src/ORBitutil/orbit-os-config.h.in	Wed Jul 31 21:53:19 2002
@@ -1,6 +1,8 @@
 #ifndef OS_CONFIG_H
 #define OS_CONFIG_H 1
 
-#define ORBIT_HAVE_ALLOCA_H @ORBIT_HAVE_ALLOCA_H@
+#if @ORBIT_HAVE_ALLOCA_H@
+#define ORBIT_HAVE_ALLOCA_H 1
+#endif
 
 #endif
