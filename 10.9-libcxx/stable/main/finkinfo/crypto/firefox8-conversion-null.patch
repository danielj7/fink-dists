diff -Nurd -x'*~' mozilla-release.orig/dom/base/nsGlobalWindow.cpp mozilla-release/dom/base/nsGlobalWindow.cpp
--- mozilla-release.orig/dom/base/nsGlobalWindow.cpp	2011-11-20 14:44:30.000000000 -0500
+++ mozilla-release/dom/base/nsGlobalWindow.cpp	2015-09-24 12:00:41.000000000 -0400
@@ -6019,7 +6019,7 @@
     return runtimeCallbacks->read(cx, reader, tag, data, nsnull);
   }
 
-  return JS_FALSE;
+  return nsnull;
 }
 
 static JSBool
diff -Nurd -x'*~' mozilla-release.orig/dom/workers/XMLHttpRequestPrivate.cpp mozilla-release/dom/workers/XMLHttpRequestPrivate.cpp
--- mozilla-release.orig/dom/workers/XMLHttpRequestPrivate.cpp	2011-11-20 14:44:31.000000000 -0500
+++ mozilla-release/dom/workers/XMLHttpRequestPrivate.cpp	2015-09-25 00:24:07.000000000 -0400
@@ -1395,19 +1395,19 @@
   mWorkerPrivate->AssertIsOnWorkerThread();
 
   if (mCanceled) {
-    return false;
+    return nsnull;
   }
 
   if (!mProxy) {
     ThrowDOMExceptionForCode(aCx, INVALID_STATE_ERR);
-    return false;
+    return nsnull;
   }
 
   nsCString responseHeaders;
   nsRefPtr<GetAllResponseHeadersRunnable> runnable =
     new GetAllResponseHeadersRunnable(mWorkerPrivate, mProxy, responseHeaders);
   if (!runnable->Dispatch(aCx)) {
-    return false;
+    return nsnull;
   }
 
   return JS_NewStringCopyN(aCx, responseHeaders.get(),
@@ -1420,17 +1420,17 @@
   mWorkerPrivate->AssertIsOnWorkerThread();
 
   if (mCanceled) {
-    return false;
+    return nsnull;
   }
 
   if (!mProxy) {
     ThrowDOMExceptionForCode(aCx, INVALID_STATE_ERR);
-    return false;
+    return nsnull;
   }
 
   nsDependentJSString header;
   if (!header.init(aCx, aHeader)) {
-    return false;
+    return nsnull;
   }
 
   nsCString value;
@@ -1438,7 +1438,7 @@
     new GetResponseHeaderRunnable(mWorkerPrivate, mProxy,
                                   NS_ConvertUTF16toUTF8(header), value);
   if (!runnable->Dispatch(aCx)) {
-    return false;
+    return nsnull;
   }
 
   return JS_NewStringCopyN(aCx, value.get(), value.Length());
diff -Nurd -x'*~' mozilla-release.orig/ipc/chromium/src/base/file_util.cc mozilla-release/ipc/chromium/src/base/file_util.cc
--- mozilla-release.orig/ipc/chromium/src/base/file_util.cc	2011-11-20 14:44:33.000000000 -0500
+++ mozilla-release/ipc/chromium/src/base/file_util.cc	2015-09-24 01:33:50.000000000 -0400
@@ -194,7 +194,7 @@
 FILE* CreateAndOpenTemporaryFile(FilePath* path) {
   FilePath directory;
   if (!GetTempDir(&directory))
-    return false;
+    return NULL;
 
   return CreateAndOpenTemporaryFileInDir(directory, path);
 }
diff -Nurd -x'*~' mozilla-release.orig/ipc/chromium/src/base/file_util_posix.cc mozilla-release/ipc/chromium/src/base/file_util_posix.cc
--- mozilla-release.orig/ipc/chromium/src/base/file_util_posix.cc	2011-11-20 14:44:33.000000000 -0500
+++ mozilla-release/ipc/chromium/src/base/file_util_posix.cc	2015-09-24 01:35:53.000000000 -0400
@@ -385,7 +385,7 @@
 FILE* CreateAndOpenTemporaryShmemFile(FilePath* path) {
   FilePath directory;
   if (!GetShmemTempDir(&directory))
-    return false;
+    return NULL;
 
   return CreateAndOpenTemporaryFileInDir(directory, path);
 }
diff -Nurd -x'*~' mozilla-release.orig/ipc/chromium/src/base/pickle.cc mozilla-release/ipc/chromium/src/base/pickle.cc
--- mozilla-release.orig/ipc/chromium/src/base/pickle.cc	2011-11-20 14:44:33.000000000 -0500
+++ mozilla-release/ipc/chromium/src/base/pickle.cc	2015-09-24 01:34:42.000000000 -0400
@@ -477,7 +477,7 @@
     "There can only be one variable buffer in a Pickle";
 
   if (!WriteInt(length))
-    return false;
+    return NULL;
 
   char *data_ptr = BeginWrite(length);
   if (!data_ptr)
diff -Nurd -x'*~' mozilla-release.orig/ipc/chromium/src/chrome/common/transport_dib_mac.cc mozilla-release/ipc/chromium/src/chrome/common/transport_dib_mac.cc
--- mozilla-release.orig/ipc/chromium/src/chrome/common/transport_dib_mac.cc	2011-11-20 14:44:34.000000000 -0500
+++ mozilla-release/ipc/chromium/src/chrome/common/transport_dib_mac.cc	2015-09-24 02:33:31.000000000 -0400
@@ -48,7 +48,7 @@
   if (!dib->shared_memory_.Map(st.st_size)) {
     delete dib;
     HANDLE_EINTR(close(handle.fd));
-    return false;
+    return NULL;
   }
 
   dib->size_ = st.st_size;
diff -Nurd -x'*~' mozilla-release.orig/ipc/ipdl/ipdl/lower.py mozilla-release/ipc/ipdl/ipdl/lower.py
--- mozilla-release.orig/ipc/ipdl/ipdl/lower.py	2011-11-20 14:44:34.000000000 -0500
+++ mozilla-release/ipc/ipdl/ipdl/lower.py	2015-09-24 03:15:19.000000000 -0400
@@ -3395,7 +3395,7 @@
                                             p.routingId()))
             ])
             failif = StmtIf(ExprNot(descriptorvar))
-            failif.addifstmt(StmtReturn.FALSE)
+            failif.addifstmt(StmtReturn(ExprLiteral.NULL))
             createshmem.addstmt(failif)
 
             failif = StmtIf(ExprNot(ExprCall(
diff -Nurd -x'*~' mozilla-release.orig/js/src/xpconnect/src/xpcquickstubs.cpp mozilla-release/js/src/xpconnect/src/xpcquickstubs.cpp
--- mozilla-release.orig/js/src/xpconnect/src/xpcquickstubs.cpp	2011-11-20 14:44:37.000000000 -0500
+++ mozilla-release/js/src/xpconnect/src/xpcquickstubs.cpp	2015-09-24 11:36:47.000000000 -0400
@@ -191,7 +191,7 @@
     JSFunction *fun =
         JS_NewFunctionById(cx, PropertyOpForwarder<Op>, argc, 0, obj, id);
     if(!fun)
-        return JS_FALSE;
+        return nsnull;
 
     JSObject *funobj = JS_GetFunctionObject(fun);
 
@@ -201,10 +201,10 @@
     // second object to work around this.
     JSObject *ptrobj = JS_NewObject(cx, &PointerHolderClass, nsnull, funobj);
     if(!ptrobj)
-        return JS_FALSE;
+        return nsnull;
     Op *popp = new Op;
     if(!popp)
-        return JS_FALSE;
+        return nsnull;
     *popp = pop;
     JS_SetPrivate(cx, ptrobj, popp);
 
